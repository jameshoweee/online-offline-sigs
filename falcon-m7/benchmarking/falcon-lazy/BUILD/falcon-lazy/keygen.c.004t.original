
;; Function set_fpu_cw (null)
;; enabled by -tree-original


{
  return x;
}


;; Function fpr_ursh (null)
;; enabled by -tree-original


{
  x = (long long unsigned int) (x >> 32 ^ x) & -(long long unsigned int) (n >> 5) ^ (long long unsigned int) x;
  return x >> (n & 31);
}


;; Function fpr_irsh (null)
;; enabled by -tree-original


{
  x = (long long int) (x >> 32 ^ x) & -(long long int) (n >> 5) ^ (long long int) x;
  return x >> (n & 31);
}


;; Function fpr_ulsh (null)
;; enabled by -tree-original


{
  x = (long long unsigned int) (x << 32 ^ x) & -(long long unsigned int) (n >> 5) ^ (long long unsigned int) x;
  return x << (n & 31);
}


;; Function FPR (null)
;; enabled by -tree-original


{
  fpr x;
  uint32_t t;
  unsigned int f;

    fpr x;
    uint32_t t;
    unsigned int f;
  e = e + 1076;
  t = (long unsigned int) e >> 31;
  m = (long long unsigned int) t + 18446744073709551615 & (long long unsigned int) m;
  t = (long unsigned int) (m >> 54);
  e = -(int) t & e;
  x = ((long long unsigned int) s << 63 | (long long unsigned int) (m >> 2)) + ((long long unsigned int) (long unsigned int) e << 52);
  f = (unsigned int) m & 7;
  x = ((fpr) (200 >> f) & 1) + x;
  return x;
}


;; Function fpr_of (null)
;; enabled by -tree-original


{
  return falcon_inner_fpr_scaled (i, 0);
}


;; Function fpr_rint (null)
;; enabled by -tree-original


{
  uint64_t m;
  uint64_t d;
  int e;
  uint32_t s;
  uint32_t dd;
  uint32_t f;

    uint64_t m;
    uint64_t d;
    int e;
    uint32_t s;
    uint32_t dd;
    uint32_t f;
  m = (long long unsigned int) (x << 10) & 4611686018427387903 | 4611686018427387904;
  e = 1085 - ((int) (x >> 52) & 2047);
  m = -(long long unsigned int) ((long unsigned int) (e + -64) >> 31) & (long long unsigned int) m;
  e = e & 63;
  d = fpr_ulsh (m, 63 - e);
  dd = (long unsigned int) d | (long unsigned int) (d >> 32) & 536870911;
  f = (long unsigned int) (d >> 61) | (long unsigned int) ((-dd | dd) >> 31);
  m = (long long unsigned int) fpr_ursh (m, e) + ((long long unsigned int) (200 >> f) & 1);
  s = (long unsigned int) (x >> 63);
  return (int64_t) ((-(long long int) s ^ (long long int) m) + (long long int) s);
}


;; Function fpr_floor (null)
;; enabled by -tree-original


{
  uint64_t t;
  int64_t xi;
  int e;
  int cc;

    uint64_t t;
    int64_t xi;
    int e;
    int cc;
  e = (int) (x >> 52) & 2047;
  t = x >> 63;
  xi = (long long int) ((long long unsigned int) (x << 10) | 4611686018427387904) & 9223372036854775807;
  xi = (-(long long int) t ^ (long long int) xi) + (long long int) t;
  cc = 1085 - e;
  xi = fpr_irsh (xi, cc & 63);
  xi = (-(long long int) t ^ (long long int) xi) & -(long long int) ((long unsigned int) (63 - cc) >> 31) ^ (long long int) xi;
  return xi;
}


;; Function fpr_trunc (null)
;; enabled by -tree-original


{
  uint64_t t;
  uint64_t xu;
  int e;
  int cc;

    uint64_t t;
    uint64_t xu;
    int e;
    int cc;
  e = (int) (x >> 52) & 2047;
  xu = (long long unsigned int) (x << 10) & 4611686018427387903 | 4611686018427387904;
  cc = 1085 - e;
  xu = fpr_ursh (xu, cc & 63);
  xu = -(long long unsigned int) ((long unsigned int) (cc + -64) >> 31) & (long long unsigned int) xu;
  t = x >> 63;
  xu = (-t ^ xu) + t;
  return *(int64_t *) &xu;
}


;; Function fpr_sub (null)
;; enabled by -tree-original


{
  y = (long long unsigned int) y ^ 9223372036854775808;
  return falcon_inner_fpr_add (x, y);
}


;; Function fpr_neg (null)
;; enabled by -tree-original


{
  x = (long long unsigned int) x ^ 9223372036854775808;
  return x;
}


;; Function fpr_half (null)
;; enabled by -tree-original


{
  uint32_t t;

    uint32_t t;
  x = (long long unsigned int) x + 18442240474082181120;
  t = ((long unsigned int) (x >> 52) & 2047) + 1 >> 11;
  x = (long long unsigned int) t + 18446744073709551615 & (long long unsigned int) x;
  return x;
}


;; Function fpr_double (null)
;; enabled by -tree-original


{
  x = ((long long unsigned int) (((unsigned int) (x >> 52) & 2047) + 2047 >> 11) << 52) + (long long unsigned int) x;
  return x;
}


;; Function fpr_sqr (null)
;; enabled by -tree-original


{
  return falcon_inner_fpr_mul (x, x);
}


;; Function fpr_inv (null)
;; enabled by -tree-original


{
  return falcon_inner_fpr_div (4607182418800017408, x);
}


;; Function fpr_lt (null)
;; enabled by -tree-original


{
  int cc0;
  int cc1;

    int cc0;
    int cc1;
  cc0 = *(int64_t *) &x < *(int64_t *) &y;
  cc1 = *(int64_t *) &x > *(int64_t *) &y;
  return (cc0 ^ cc1) & (int) ((x & y) >> 63) ^ cc0;
}


;; Function prng_get_u64 (null)
;; enabled by -tree-original


{
  size_t u;

    size_t u;
  u = p->ptr;
  if (u > 502)
    {
      falcon_inner_prng_refill (p);
      u = 0;
    }
  p->ptr = u + 8;
  return (uint64_t) ((((((((long long unsigned int) p->buf.d[u] | (long long unsigned int) p->buf.d[u + 1] << 8) | (long long unsigned int) p->buf.d[u + 2] << 16) | (long long unsigned int) p->buf.d[u + 3] << 24) | (long long unsigned int) p->buf.d[u + 4] << 32) | (long long unsigned int) p->buf.d[u + 5] << 40) | (long long unsigned int) p->buf.d[u + 6] << 48) | (long long unsigned int) p->buf.d[u + 7] << 56);
}


;; Function prng_get_u8 (null)
;; enabled by -tree-original


{
  unsigned int v;

    unsigned int v;
  v = (unsigned int) p->buf.d[p->ptr++ ];
  if (p->ptr == 512)
    {
      falcon_inner_prng_refill (p);
    }
  return v;
}


;; Function modp_set (null)
;; enabled by -tree-original


{
  uint32_t w;

    uint32_t w;
  w = (long unsigned int) x;
  w = ((uint32_t) ((signed int) w >> 31) & p) + w;
  return w;
}


;; Function modp_norm (null)
;; enabled by -tree-original


{
  return (int32_t) ((long unsigned int) x - (((long unsigned int) x - ((long unsigned int) p + 1 >> 1) >> 31) + 4294967295 & (long unsigned int) p));
}


;; Function modp_ninv31 (null)
;; enabled by -tree-original


{
  uint32_t y;

    uint32_t y;
  y = 2 - (long unsigned int) p;
  y = (2 - (long unsigned int) (p * y)) * (long unsigned int) y;
  y = (2 - (long unsigned int) (p * y)) * (long unsigned int) y;
  y = (2 - (long unsigned int) (p * y)) * (long unsigned int) y;
  y = (2 - (long unsigned int) (p * y)) * (long unsigned int) y;
  return -y & 2147483647;
}


;; Function modp_R (null)
;; enabled by -tree-original


{
  return (uint32_t) (2147483648 - (long unsigned int) p);
}


;; Function modp_add (null)
;; enabled by -tree-original


{
  uint32_t d;

    uint32_t d;
  d = (a + b) - p;
  d = ((uint32_t) ((signed int) d >> 31) & p) + d;
  return d;
}


;; Function modp_sub (null)
;; enabled by -tree-original


{
  uint32_t d;

    uint32_t d;
  d = a - b;
  d = ((uint32_t) ((signed int) d >> 31) & p) + d;
  return d;
}


;; Function modp_montymul (null)
;; enabled by -tree-original


{
  uint64_t z;
  uint64_t w;
  uint32_t d;

    uint64_t z;
    uint64_t w;
    uint32_t d;
  z = (long long unsigned int) a * (long long unsigned int) b;
  w = ((long long unsigned int) ((uint64_t) p0i * z) & 2147483647) * (long long unsigned int) p;
  d = (long unsigned int) (z + w >> 31) - (long unsigned int) p;
  d = ((uint32_t) ((signed int) d >> 31) & p) + d;
  return d;
}


;; Function modp_R2 (null)
;; enabled by -tree-original


{
  uint32_t z;

    uint32_t z;
  z = modp_R (p);
  z = modp_add (z, z, p);
  z = modp_montymul (z, z, p, p0i);
  z = modp_montymul (z, z, p, p0i);
  z = modp_montymul (z, z, p, p0i);
  z = modp_montymul (z, z, p, p0i);
  z = modp_montymul (z, z, p, p0i);
  z = (-((long unsigned int) z & 1) & (long unsigned int) p) + (long unsigned int) z >> 1;
  return z;
}


;; Function modp_Rx (null)
;; enabled by -tree-original


{
  int i;
  uint32_t r;
  uint32_t z;

    int i;
    uint32_t r;
    uint32_t z;
  x-- ;
  r = R2;
  z = modp_R (p);
  i = 0;
  goto <D.6965>;
  <D.6964>:;
  if ((x >> i & 1) != 0)
    {
      z = modp_montymul (z, r, p, p0i);
    }
  r = modp_montymul (r, r, p, p0i);
  i++ ;
  <D.6965>:;
  if (1 << i <= x) goto <D.6964>; else goto <D.6966>;
  <D.6966>:;
  return z;
}


;; Function modp_div (null)
;; enabled by -tree-original


{
  uint32_t z;
  uint32_t e;
  int i;

    uint32_t z;
    uint32_t e;
    int i;
  e = (long unsigned int) p + 4294967294;
  z = R;
  i = 30;
  goto <D.6979>;
  <D.6978>:;
  {
    uint32_t z2;

        uint32_t z2;
    z = modp_montymul (z, z, p, p0i);
    z2 = modp_montymul (z, b, p, p0i);
    z = (long unsigned int) (z ^ z2) & -((long unsigned int) (e >> i) & 1) ^ (long unsigned int) z;
  }
  i-- ;
  <D.6979>:;
  if (i >= 0) goto <D.6978>; else goto <D.6980>;
  <D.6980>:;
  z = modp_montymul (z, 1, p, p0i);
  return modp_montymul (a, z, p, p0i);
}


;; Function modp_mkgm2 (null)
;; enabled by -tree-original


{
  size_t u;
  size_t n;
  unsigned int k;
  uint32_t ig;
  uint32_t x1;
  uint32_t x2;
  uint32_t R2;

    size_t u;
    size_t n;
    unsigned int k;
    uint32_t ig;
    uint32_t x1;
    uint32_t x2;
    uint32_t R2;
  n = 1 << logn;
  R2 = modp_R2 (p, p0i);
  g = modp_montymul (g, R2, p, p0i);
  k = logn;
  goto <D.6998>;
  <D.6997>:;
  g = modp_montymul (g, g, p, p0i);
  k++ ;
  <D.6998>:;
  if (k <= 9) goto <D.6997>; else goto <D.6999>;
  <D.6999>:;
  ig = modp_div (R2, g, p, p0i, modp_R (p));
  k = 10 - logn;
  x1 = x2 = modp_R (p);
  u = 0;
  goto <D.7002>;
  <D.7001>:;
  {
    size_t v;

        size_t v;
    v = (size_t) REV10[u << k];
    *(gm + (sizetype) (v * 4)) = x1;
    *(igm + (sizetype) (v * 4)) = x2;
    x1 = modp_montymul (x1, g, p, p0i);
    x2 = modp_montymul (x2, ig, p, p0i);
  }
  u++ ;
  <D.7002>:;
  if (u < n) goto <D.7001>; else goto <D.7003>;
  <D.7003>:;
}


;; Function modp_NTT2_ext (null)
;; enabled by -tree-original


{
  size_t t;
  size_t m;
  size_t n;

    size_t t;
    size_t m;
    size_t n;
  if (logn == 0)
    {
      return;
    }
  n = 1 << logn;
  t = n;
  m = 1;
  goto <D.7031>;
  <D.7030>:;
  {
    size_t ht;
    size_t u;
    size_t v1;

        size_t ht;
        size_t u;
        size_t v1;
    ht = t >> 1;
    u = 0;, v1 = 0;;
    goto <D.7028>;
    <D.7027>:;
    {
      uint32_t s;
      size_t v;
      uint32_t * r1;
      uint32_t * r2;

            uint32_t s;
            size_t v;
            uint32_t * r1;
            uint32_t * r2;
      s = *(gm + (sizetype) ((m + u) * 4));
      r1 = a + (sizetype) ((v1 * stride) * 4);
      r2 = r1 + (sizetype) ((ht * stride) * 4);
      v = 0;
      goto <D.7025>;
      <D.7024>:;
      {
        uint32_t x;
        uint32_t y;

                uint32_t x;
                uint32_t y;
        x = *r1;
        y = modp_montymul (*r2, s, p, p0i);
        *r1 = modp_add (x, y, p);
        *r2 = modp_sub (x, y, p);
      }
      v++ ;, r1 = r1 + (sizetype) (stride * 4);;, r2 = r2 + (sizetype) (stride * 4);;
      <D.7025>:;
      if (v < ht) goto <D.7024>; else goto <D.7026>;
      <D.7026>:;
    }
    u++ ;, v1 = v1 + t;;
    <D.7028>:;
    if (u < m) goto <D.7027>; else goto <D.7029>;
    <D.7029>:;
    t = ht;
  }
  m = m << 1;
  <D.7031>:;
  if (m < n) goto <D.7030>; else goto <D.7032>;
  <D.7032>:;
}


;; Function modp_iNTT2_ext (null)
;; enabled by -tree-original


{
  size_t t;
  size_t m;
  size_t n;
  size_t k;
  uint32_t ni;
  uint32_t * r;

    size_t t;
    size_t m;
    size_t n;
    size_t k;
    uint32_t ni;
    uint32_t * r;
  if (logn == 0)
    {
      return;
    }
  n = 1 << logn;
  t = 1;
  m = n;
  goto <D.7064>;
  <D.7063>:;
  {
    size_t hm;
    size_t dt;
    size_t u;
    size_t v1;

        size_t hm;
        size_t dt;
        size_t u;
        size_t v1;
    hm = m >> 1;
    dt = t << 1;
    u = 0;, v1 = 0;;
    goto <D.7061>;
    <D.7060>:;
    {
      uint32_t s;
      size_t v;
      uint32_t * r1;
      uint32_t * r2;

            uint32_t s;
            size_t v;
            uint32_t * r1;
            uint32_t * r2;
      s = *(igm + (sizetype) ((hm + u) * 4));
      r1 = a + (sizetype) ((v1 * stride) * 4);
      r2 = r1 + (sizetype) ((t * stride) * 4);
      v = 0;
      goto <D.7058>;
      <D.7057>:;
      {
        uint32_t x;
        uint32_t y;

                uint32_t x;
                uint32_t y;
        x = *r1;
        y = *r2;
        *r1 = modp_add (x, y, p);
        *r2 = modp_montymul (modp_sub (x, y, p), s, p, p0i);
      }
      v++ ;, r1 = r1 + (sizetype) (stride * 4);;, r2 = r2 + (sizetype) (stride * 4);;
      <D.7058>:;
      if (v < t) goto <D.7057>; else goto <D.7059>;
      <D.7059>:;
    }
    u++ ;, v1 = v1 + dt;;
    <D.7061>:;
    if (u < hm) goto <D.7060>; else goto <D.7062>;
    <D.7062>:;
    t = dt;
  }
  m = m >> 1;
  <D.7064>:;
  if (m > 1) goto <D.7063>; else goto <D.7065>;
  <D.7065>:;
  ni = 2147483648 >> logn;
  k = 0;, r = a;;
  goto <D.7067>;
  <D.7066>:;
  *r = modp_montymul (*r, ni, p, p0i);
  k++ ;, r = r + (sizetype) (stride * 4);;
  <D.7067>:;
  if (k < n) goto <D.7066>; else goto <D.7068>;
  <D.7068>:;
}


;; Function modp_poly_rec_res (null)
;; enabled by -tree-original


{
  size_t hn;
  size_t u;

    size_t hn;
    size_t u;
  hn = 1 << logn + 4294967295;
  u = 0;
  goto <D.7081>;
  <D.7080>:;
  {
    uint32_t w0;
    uint32_t w1;

        uint32_t w0;
        uint32_t w1;
    w0 = *(f + (sizetype) (u * 8));
    w1 = *(f + ((sizetype) (u * 8) + 4));
    *(f + (sizetype) (u * 4)) = modp_montymul (modp_montymul (w0, w1, p, p0i), R2, p, p0i);
  }
  u++ ;
  <D.7081>:;
  if (u < hn) goto <D.7080>; else goto <D.7082>;
  <D.7082>:;
}


;; Function zint_sub (null)
;; enabled by -tree-original


{
  size_t u;
  uint32_t cc;
  uint32_t m;

    size_t u;
    uint32_t cc;
    uint32_t m;
  cc = 0;
  m = -ctl;
  u = 0;
  goto <D.7095>;
  <D.7094>:;
  {
    uint32_t aw;
    uint32_t w;

        uint32_t aw;
        uint32_t w;
    aw = *(a + (sizetype) (u * 4));
    w = ((long unsigned int) aw - (long unsigned int) *(b + (sizetype) (u * 4))) - (long unsigned int) cc;
    cc = w >> 31;
    aw = ((long unsigned int) w & 2147483647 ^ (long unsigned int) aw) & (long unsigned int) m ^ (long unsigned int) aw;
    *(a + (sizetype) (u * 4)) = aw;
  }
  u++ ;
  <D.7095>:;
  if (u < len) goto <D.7094>; else goto <D.7096>;
  <D.7096>:;
  return cc;
}


;; Function zint_mul_small (null)
;; enabled by -tree-original


{
  size_t u;
  uint32_t cc;

    size_t u;
    uint32_t cc;
  cc = 0;
  u = 0;
  goto <D.7106>;
  <D.7105>:;
  {
    uint64_t z;

        uint64_t z;
    z = (long long unsigned int) *(m + (sizetype) (u * 4)) * (long long unsigned int) x + (long long unsigned int) cc;
    *(m + (sizetype) (u * 4)) = (long unsigned int) z & 2147483647;
    cc = (long unsigned int) (z >> 31);
  }
  u++ ;
  <D.7106>:;
  if (u < mlen) goto <D.7105>; else goto <D.7107>;
  <D.7107>:;
  return cc;
}


;; Function zint_mod_small_unsigned (null)
;; enabled by -tree-original


{
  uint32_t x;
  size_t u;

    uint32_t x;
    size_t u;
  x = 0;
  u = dlen;
  goto <D.7119>;
  <D.7118>:;
  {
    uint32_t w;

        uint32_t w;
    x = modp_montymul (x, R2, p, p0i);
    w = (long unsigned int) *(d + (sizetype) (u * 4)) - (long unsigned int) p;
    w = ((uint32_t) ((signed int) w >> 31) & p) + w;
    x = modp_add (x, w, p);
  }
  <D.7119>:;
  if (u--  != 0) goto <D.7118>; else goto <D.7120>;
  <D.7120>:;
  return x;
}


;; Function zint_mod_small_signed (null)
;; enabled by -tree-original


{
  uint32_t z;

    uint32_t z;
  if (dlen == 0)
    {
      return 0;
    }
  z = zint_mod_small_unsigned (d, dlen, p, p0i, R2);
  z = modp_sub (z, (long unsigned int) -(*(d + ((sizetype) dlen + 1073741823) * 4) >> 30) & (long unsigned int) Rx, p);
  return z;
}


;; Function zint_add_mul_small (null)
;; enabled by -tree-original


{
  size_t u;
  uint32_t cc;

    size_t u;
    uint32_t cc;
  cc = 0;
  u = 0;
  goto <D.7142>;
  <D.7141>:;
  {
    uint32_t xw;
    uint32_t yw;
    uint64_t z;

        uint32_t xw;
        uint32_t yw;
        uint64_t z;
    xw = *(x + (sizetype) (u * 4));
    yw = *(y + (sizetype) (u * 4));
    z = ((long long unsigned int) yw * (long long unsigned int) s + (long long unsigned int) xw) + (long long unsigned int) cc;
    *(x + (sizetype) (u * 4)) = (long unsigned int) z & 2147483647;
    cc = (long unsigned int) (z >> 31);
  }
  u++ ;
  <D.7142>:;
  if (u < len) goto <D.7141>; else goto <D.7143>;
  <D.7143>:;
  *(x + (sizetype) (len * 4)) = cc;
}


;; Function zint_norm_zero (null)
;; enabled by -tree-original


{
  size_t u;
  uint32_t r;
  uint32_t bb;

    size_t u;
    uint32_t r;
    uint32_t bb;
  r = 0;
  bb = 0;
  u = len;
  goto <D.7156>;
  <D.7155>:;
  {
    uint32_t wx;
    uint32_t wp;
    uint32_t cc;

        uint32_t wx;
        uint32_t wp;
        uint32_t cc;
    wx = *(x + (sizetype) (u * 4));
    wp = (long unsigned int) (*(p + (sizetype) (u * 4)) >> 1) | (long unsigned int) (bb << 30);
    bb = (long unsigned int) *(p + (sizetype) (u * 4)) & 1;
    cc = wp - wx;
    cc = -cc >> 31 | (uint32_t) ((signed int) cc >> 31);
    r = ((long unsigned int) r & 1) + 4294967295 & (long unsigned int) cc | (long unsigned int) r;
  }
  <D.7156>:;
  if (u--  != 0) goto <D.7155>; else goto <D.7157>;
  <D.7157>:;
  zint_sub (x, p, len, r >> 31);
}


;; Function zint_rebuild_CRT (null)
;; enabled by -tree-original


{
  size_t u;
  uint32_t * x;

    size_t u;
    uint32_t * x;
  *tmp = primes->p;
  u = 1;
  goto <D.7181>;
  <D.7180>:;
  {
    uint32_t p;
    uint32_t p0i;
    uint32_t s;
    uint32_t R2;
    size_t v;

        uint32_t p;
        uint32_t p0i;
        uint32_t s;
        uint32_t R2;
        size_t v;
    p = (primes + (sizetype) (u * 12))->p;
    s = (primes + (sizetype) (u * 12))->s;
    p0i = modp_ninv31 (p);
    R2 = modp_R2 (p, p0i);
    v = 0;, x = xx;;
    goto <D.7178>;
    <D.7177>:;
    {
      uint32_t xp;
      uint32_t xq;
      uint32_t xr;

            uint32_t xp;
            uint32_t xq;
            uint32_t xr;
      xp = *(x + (sizetype) (u * 4));
      xq = zint_mod_small_unsigned ((const uint32_t *) x, u, p, p0i, R2);
      xr = modp_montymul (s, modp_sub (xp, xq, p), p, p0i);
      zint_add_mul_small (x, (const uint32_t * restrict) tmp, u, xr);
    }
    v++ ;, x = x + (sizetype) (xstride * 4);;
    <D.7178>:;
    if (v < num) goto <D.7177>; else goto <D.7179>;
    <D.7179>:;
    *(tmp + (sizetype) (u * 4)) = zint_mul_small (tmp, u, p);
  }
  u++ ;
  <D.7181>:;
  if (u < xlen) goto <D.7180>; else goto <D.7182>;
  <D.7182>:;
  if (normalize_signed != 0)
    {
      u = 0;, x = xx;;
      goto <D.7184>;
      <D.7183>:;
      zint_norm_zero (x, (const uint32_t * restrict) tmp, xlen);
      u++ ;, x = x + (sizetype) (xstride * 4);;
      <D.7184>:;
      if (u < num) goto <D.7183>; else goto <D.7185>;
      <D.7185>:;
    }
}


;; Function zint_negate (null)
;; enabled by -tree-original


{
  size_t u;
  uint32_t cc;
  uint32_t m;

    size_t u;
    uint32_t cc;
    uint32_t m;
  cc = ctl;
  m = -ctl >> 1;
  u = 0;
  goto <D.7196>;
  <D.7195>:;
  {
    uint32_t aw;

        uint32_t aw;
    aw = *(a + (sizetype) (u * 4));
    aw = (aw ^ m) + cc;
    *(a + (sizetype) (u * 4)) = (long unsigned int) aw & 2147483647;
    cc = aw >> 31;
  }
  u++ ;
  <D.7196>:;
  if (u < len) goto <D.7195>; else goto <D.7197>;
  <D.7197>:;
}


;; Function zint_co_reduce (null)
;; enabled by -tree-original


{
  size_t u;
  int64_t cca;
  int64_t ccb;
  uint32_t nega;
  uint32_t negb;

    size_t u;
    int64_t cca;
    int64_t ccb;
    uint32_t nega;
    uint32_t negb;
  cca = 0;
  ccb = 0;
  u = 0;
  goto <D.7217>;
  <D.7216>:;
  {
    uint32_t wa;
    uint32_t wb;
    uint64_t za;
    uint64_t zb;

        uint32_t wa;
        uint32_t wb;
        uint64_t za;
        uint64_t zb;
    wa = *(a + (sizetype) (u * 4));
    wb = *(b + (sizetype) (u * 4));
    za = ((long long unsigned int) wa * (long long unsigned int) xa + (long long unsigned int) wb * (long long unsigned int) xb) + (long long unsigned int) cca;
    zb = ((long long unsigned int) wa * (long long unsigned int) ya + (long long unsigned int) wb * (long long unsigned int) yb) + (long long unsigned int) ccb;
    if (u != 0)
      {
        *(a + ((sizetype) u + 1073741823) * 4) = (long unsigned int) za & 2147483647;
        *(b + ((sizetype) u + 1073741823) * 4) = (long unsigned int) zb & 2147483647;
      }
    cca = *(int64_t *) &za >> 31;
    ccb = *(int64_t *) &zb >> 31;
  }
  u++ ;
  <D.7217>:;
  if (u < len) goto <D.7216>; else goto <D.7218>;
  <D.7218>:;
  *(a + ((sizetype) len + 1073741823) * 4) = (long unsigned int) cca;
  *(b + ((sizetype) len + 1073741823) * 4) = (long unsigned int) ccb;
  nega = (long unsigned int) ((long long unsigned int) cca >> 63);
  negb = (long unsigned int) ((long long unsigned int) ccb >> 63);
  zint_negate (a, len, nega);
  zint_negate (b, len, negb);
  return negb << 1 | nega;
}


;; Function zint_finish_mod (null)
;; enabled by -tree-original


{
  size_t u;
  uint32_t cc;
  uint32_t xm;
  uint32_t ym;

    size_t u;
    uint32_t cc;
    uint32_t xm;
    uint32_t ym;
  cc = 0;
  u = 0;
  goto <D.7230>;
  <D.7229>:;
  cc = ((long unsigned int) *(a + (sizetype) (u * 4)) - (long unsigned int) *(m + (sizetype) (u * 4))) - (long unsigned int) cc >> 31;
  u++ ;
  <D.7230>:;
  if (u < len) goto <D.7229>; else goto <D.7231>;
  <D.7231>:;
  xm = -neg >> 1;
  ym = -(1 - (long unsigned int) cc | (long unsigned int) neg);
  cc = neg;
  u = 0;
  goto <D.7235>;
  <D.7234>:;
  {
    uint32_t aw;
    uint32_t mw;

        uint32_t aw;
        uint32_t mw;
    aw = *(a + (sizetype) (u * 4));
    mw = ((long unsigned int) *(m + (sizetype) (u * 4)) ^ (long unsigned int) xm) & (long unsigned int) ym;
    aw = (aw - mw) - cc;
    *(a + (sizetype) (u * 4)) = (long unsigned int) aw & 2147483647;
    cc = aw >> 31;
  }
  u++ ;
  <D.7235>:;
  if (u < len) goto <D.7234>; else goto <D.7236>;
  <D.7236>:;
}


;; Function zint_co_reduce_mod (null)
;; enabled by -tree-original


{
  size_t u;
  int64_t cca;
  int64_t ccb;
  uint32_t fa;
  uint32_t fb;

    size_t u;
    int64_t cca;
    int64_t ccb;
    uint32_t fa;
    uint32_t fb;
  cca = 0;
  ccb = 0;
  fa = ((long unsigned int) *a * (long unsigned int) xa + (long unsigned int) *b * (long unsigned int) xb) * (long unsigned int) m0i & 2147483647;
  fb = ((long unsigned int) *a * (long unsigned int) ya + (long unsigned int) *b * (long unsigned int) yb) * (long unsigned int) m0i & 2147483647;
  u = 0;
  goto <D.7258>;
  <D.7257>:;
  {
    uint32_t wa;
    uint32_t wb;
    uint64_t za;
    uint64_t zb;

        uint32_t wa;
        uint32_t wb;
        uint64_t za;
        uint64_t zb;
    wa = *(a + (sizetype) (u * 4));
    wb = *(b + (sizetype) (u * 4));
    za = (((long long unsigned int) wa * (long long unsigned int) xa + (long long unsigned int) wb * (long long unsigned int) xb) + (long long unsigned int) *(m + (sizetype) (u * 4)) * (long long unsigned int) fa) + (long long unsigned int) cca;
    zb = (((long long unsigned int) wa * (long long unsigned int) ya + (long long unsigned int) wb * (long long unsigned int) yb) + (long long unsigned int) *(m + (sizetype) (u * 4)) * (long long unsigned int) fb) + (long long unsigned int) ccb;
    if (u != 0)
      {
        *(a + ((sizetype) u + 1073741823) * 4) = (long unsigned int) za & 2147483647;
        *(b + ((sizetype) u + 1073741823) * 4) = (long unsigned int) zb & 2147483647;
      }
    cca = *(int64_t *) &za >> 31;
    ccb = *(int64_t *) &zb >> 31;
  }
  u++ ;
  <D.7258>:;
  if (u < len) goto <D.7257>; else goto <D.7259>;
  <D.7259>:;
  *(a + ((sizetype) len + 1073741823) * 4) = (long unsigned int) cca;
  *(b + ((sizetype) len + 1073741823) * 4) = (long unsigned int) ccb;
  zint_finish_mod (a, len, m, (long unsigned int) ((long long unsigned int) cca >> 63));
  zint_finish_mod (b, len, m, (long unsigned int) ((long long unsigned int) ccb >> 63));
}


;; Function zint_bezout (null)
;; enabled by -tree-original


{
  uint32_t * u0;
  uint32_t * u1;
  uint32_t * v0;
  uint32_t * v1;
  uint32_t * a;
  uint32_t * b;
  uint32_t x0i;
  uint32_t y0i;
  uint32_t num;
  uint32_t rc;
  size_t j;

    uint32_t * u0;
    uint32_t * u1;
    uint32_t * v0;
    uint32_t * v1;
    uint32_t * a;
    uint32_t * b;
    uint32_t x0i;
    uint32_t y0i;
    uint32_t num;
    uint32_t rc;
    size_t j;
  if (len == 0)
    {
      return 0;
    }
  u0 = u;
  v0 = v;
  u1 = tmp;
  v1 = u1 + (sizetype) (len * 4);
  a = v1 + (sizetype) (len * 4);
  b = a + (sizetype) (len * 4);
  x0i = modp_ninv31 (*x);
  y0i = modp_ninv31 (*y);
  memcpy ((void * restrict) a, (const void * restrict) x, len * 4);
  memcpy ((void * restrict) b, (const void * restrict) y, len * 4);
  *u0 = 1;
  memset ((void *) (u0 + 4), 0, (len + 4294967295) * 4);
  memset ((void *) v0, 0, len * 4);
  memcpy ((void * restrict) u1, (const void * restrict) y, len * 4);
  memcpy ((void * restrict) v1, (const void * restrict) x, len * 4);
  *v1-- ;
  num = (long unsigned int) len * 62 + 30;
  goto <D.7311>;
  <D.7310>:;
  {
    uint32_t c0;
    uint32_t c1;
    uint32_t a0;
    uint32_t a1;
    uint32_t b0;
    uint32_t b1;
    uint64_t a_hi;
    uint64_t b_hi;
    uint32_t a_lo;
    uint32_t b_lo;
    int64_t pa;
    int64_t pb;
    int64_t qa;
    int64_t qb;
    int i;
    uint32_t r;

        uint32_t c0;
        uint32_t c1;
        uint32_t a0;
        uint32_t a1;
        uint32_t b0;
        uint32_t b1;
        uint64_t a_hi;
        uint64_t b_hi;
        uint32_t a_lo;
        uint32_t b_lo;
        int64_t pa;
        int64_t pb;
        int64_t qa;
        int64_t qb;
        int i;
        uint32_t r;
    c0 = 4294967295;
    c1 = 4294967295;
    a0 = 0;
    a1 = 0;
    b0 = 0;
    b1 = 0;
    j = len;
    goto <D.7298>;
    <D.7297>:;
    {
      uint32_t aw;
      uint32_t bw;

            uint32_t aw;
            uint32_t bw;
      aw = *(a + (sizetype) (j * 4));
      bw = *(b + (sizetype) (j * 4));
      a0 = (a0 ^ aw) & c0 ^ a0;
      a1 = (a1 ^ aw) & c1 ^ a1;
      b0 = (b0 ^ bw) & c0 ^ b0;
      b1 = (b1 ^ bw) & c1 ^ b1;
      c1 = c0;
      c0 = ((long unsigned int) (aw | bw) + 2147483647 >> 31) + 4294967295 & (long unsigned int) c0;
    }
    <D.7298>:;
    if (j--  != 0) goto <D.7297>; else goto <D.7299>;
    <D.7299>:;
    a1 = a0 & c1 | a1;
    a0 = ~c1 & a0;
    b1 = b0 & c1 | b1;
    b0 = ~c1 & b0;
    a_hi = ((long long unsigned int) a0 << 31) + (long long unsigned int) a1;
    b_hi = ((long long unsigned int) b0 << 31) + (long long unsigned int) b1;
    a_lo = *a;
    b_lo = *b;
    pa = 1;
    pb = 0;
    qa = 0;
    qb = 1;
    i = 0;
    goto <D.7308>;
    <D.7307>:;
    {
      uint32_t rt;
      uint32_t oa;
      uint32_t ob;
      uint32_t cAB;
      uint32_t cBA;
      uint32_t cA;
      uint64_t rz;

            uint32_t rt;
            uint32_t oa;
            uint32_t ob;
            uint32_t cAB;
            uint32_t cBA;
            uint32_t cA;
            uint64_t rz;
      rz = b_hi - a_hi;
      rt = (long unsigned int) (((a_hi ^ b_hi) & (a_hi ^ rz) ^ rz) >> 63);
      oa = (long unsigned int) (a_lo >> i) & 1;
      ob = (long unsigned int) (b_lo >> i) & 1;
      cAB = (oa & ob) & rt;
      cBA = (oa & ob) & ~rt;
      cA = (long unsigned int) oa ^ 1 | (long unsigned int) cAB;
      a_lo = a_lo - (-cAB & b_lo);
      a_hi = (long long unsigned int) a_hi - (-(long long unsigned int) cAB & (long long unsigned int) b_hi);
      pa = (long long int) pa - (-(long long int) cAB & (long long int) qa);
      pb = (long long int) pb - (-(long long int) cAB & (long long int) qb);
      b_lo = b_lo - (-cBA & a_lo);
      b_hi = (long long unsigned int) b_hi - (-(long long unsigned int) cBA & (long long unsigned int) a_hi);
      qa = (long long int) qa - (-(long long int) cBA & (long long int) pa);
      qb = (long long int) qb - (-(long long int) cBA & (long long int) pb);
      a_lo = ((long unsigned int) cA + 4294967295 & (long unsigned int) a_lo) + (long unsigned int) a_lo;
      pa = ((long long int) cA + -1 & (long long int) pa) + (long long int) pa;
      pb = ((long long int) cA + -1 & (long long int) pb) + (long long int) pb;
      a_hi = (long long unsigned int) (a_hi >> 1 ^ a_hi) & -(long long unsigned int) cA ^ (long long unsigned int) a_hi;
      b_lo = (-cA & b_lo) + b_lo;
      qa = (-(long long int) cA & (long long int) qa) + (long long int) qa;
      qb = (-(long long int) cA & (long long int) qb) + (long long int) qb;
      b_hi = (long long unsigned int) (b_hi >> 1 ^ b_hi) & (long long unsigned int) cA + 18446744073709551615 ^ (long long unsigned int) b_hi;
    }
    i++ ;
    <D.7308>:;
    if (i <= 30) goto <D.7307>; else goto <D.7309>;
    <D.7309>:;
    r = zint_co_reduce (a, b, len, pa, pb, qa, qb);
    pa = (long long int) pa - ((long long int) (pa * 2) & -((long long int) r & 1));
    pb = (long long int) pb - ((long long int) (pb * 2) & -((long long int) r & 1));
    qa = (long long int) qa - ((long long int) (qa * 2) & -(long long int) (r >> 1));
    qb = (long long int) qb - ((long long int) (qb * 2) & -(long long int) (r >> 1));
    zint_co_reduce_mod (u0, u1, y, len, y0i, pa, pb, qa, qb);
    zint_co_reduce_mod (v0, v1, x, len, x0i, pa, pb, qa, qb);
  }
  num = (long unsigned int) num + 4294967266;
  <D.7311>:;
  if (num > 29) goto <D.7310>; else goto <D.7312>;
  <D.7312>:;
  rc = (long unsigned int) *a ^ 1;
  j = 1;
  goto <D.7314>;
  <D.7313>:;
  rc = *(a + (sizetype) (j * 4)) | rc;
  j++ ;
  <D.7314>:;
  if (j < len) goto <D.7313>; else goto <D.7315>;
  <D.7315>:;
  return (int) (((long unsigned int) ((signed int) (-rc | rc) >> 31) + 1 & (long unsigned int) *x) & (long unsigned int) *y);
}


;; Function zint_add_scaled_mul_small (null)
;; enabled by -tree-original


{
  size_t u;
  uint32_t ysign;
  uint32_t tw;
  int32_t cc;

    size_t u;
    uint32_t ysign;
    uint32_t tw;
    int32_t cc;
  if (ylen == 0)
    {
      return;
    }
  ysign = -(*(y + ((sizetype) ylen + 1073741823) * 4) >> 30) >> 1;
  tw = 0;
  cc = 0;
  u = (size_t) sch;
  goto <D.7335>;
  <D.7334>:;
  {
    size_t v;
    uint32_t wy;
    uint32_t wys;
    uint32_t ccu;
    uint64_t z;

        size_t v;
        uint32_t wy;
        uint32_t wys;
        uint32_t ccu;
        uint64_t z;
    v = (size_t) ((long unsigned int) u - (long unsigned int) sch);
    wy = v < ylen ? (const long unsigned int) *(y + (sizetype) (v * 4)) : (const long unsigned int) ysign;
    wys = (long unsigned int) (wy << scl) & 2147483647 | (long unsigned int) tw;
    tw = wy >> 31 - (long unsigned int) scl;
    z = (long long unsigned int) (((long long int) wys * (long long int) k + (long long int) *(x + (sizetype) (u * 4))) + (long long int) cc);
    *(x + (sizetype) (u * 4)) = (long unsigned int) z & 2147483647;
    ccu = (long unsigned int) (z >> 31);
    cc = *(int32_t *) &ccu;
  }
  u++ ;
  <D.7335>:;
  if (u < xlen) goto <D.7334>; else goto <D.7336>;
  <D.7336>:;
}


;; Function zint_sub_scaled (null)
;; enabled by -tree-original


{
  size_t u;
  uint32_t ysign;
  uint32_t tw;
  uint32_t cc;

    size_t u;
    uint32_t ysign;
    uint32_t tw;
    uint32_t cc;
  if (ylen == 0)
    {
      return;
    }
  ysign = -(*(y + ((sizetype) ylen + 1073741823) * 4) >> 30) >> 1;
  tw = 0;
  cc = 0;
  u = (size_t) sch;
  goto <D.7354>;
  <D.7353>:;
  {
    size_t v;
    uint32_t w;
    uint32_t wy;
    uint32_t wys;

        size_t v;
        uint32_t w;
        uint32_t wy;
        uint32_t wys;
    v = (size_t) ((long unsigned int) u - (long unsigned int) sch);
    wy = v < ylen ? (const long unsigned int) *(y + (sizetype) (v * 4)) : (const long unsigned int) ysign;
    wys = (long unsigned int) (wy << scl) & 2147483647 | (long unsigned int) tw;
    tw = wy >> 31 - (long unsigned int) scl;
    w = (*(x + (sizetype) (u * 4)) - wys) - cc;
    *(x + (sizetype) (u * 4)) = (long unsigned int) w & 2147483647;
    cc = w >> 31;
  }
  u++ ;
  <D.7354>:;
  if (u < xlen) goto <D.7353>; else goto <D.7355>;
  <D.7355>:;
}


;; Function zint_one_to_plain (null)
;; enabled by -tree-original


{
  uint32_t w;

    uint32_t w;
  w = *x;
  w = (long unsigned int) w << 1 & 2147483648 | (long unsigned int) w;
  return *(int32_t *) &w;
}


;; Function poly_big_to_fp (null)
;; enabled by -tree-original


{
  size_t n;
  size_t u;

    size_t n;
    size_t u;
  n = 1 << logn;
  if (flen == 0)
    {
      u = 0;
      goto <D.7370>;
      <D.7369>:;
      *(d + (sizetype) (u * 8)) = 0;
      u++ ;
      <D.7370>:;
      if (u < n) goto <D.7369>; else goto <D.7371>;
      <D.7371>:;
      return;
    }
  u = 0;
  goto <D.7383>;
  <D.7382>:;
  {
    size_t v;
    uint32_t neg;
    uint32_t cc;
    uint32_t xm;
    fpr x;
    fpr fsc;

        size_t v;
        uint32_t neg;
        uint32_t cc;
        uint32_t xm;
        fpr x;
        fpr fsc;
    neg = -(*(f + ((sizetype) flen + 1073741823) * 4) >> 30);
    xm = neg >> 1;
    cc = (long unsigned int) neg & 1;
    x = 0;
    fsc = 4607182418800017408;
    v = 0;
    goto <D.7380>;
    <D.7379>:;
    {
      uint32_t w;

            uint32_t w;
      w = ((long unsigned int) *(f + (sizetype) (v * 4)) ^ (long unsigned int) xm) + (long unsigned int) cc;
      cc = w >> 31;
      w = (long unsigned int) w & 2147483647;
      w = w - (w << 1 & neg);
      x = falcon_inner_fpr_add (x, falcon_inner_fpr_mul (fpr_of ((int64_t) *(int32_t *) &w), fsc));
    }
    v++ ;, fsc = falcon_inner_fpr_mul (fsc, 4746794007248502784);;
    <D.7380>:;
    if (v < flen) goto <D.7379>; else goto <D.7381>;
    <D.7381>:;
    *(d + (sizetype) (u * 8)) = x;
  }
  u++ ;, f = f + (sizetype) (fstride * 4);;
  <D.7383>:;
  if (u < n) goto <D.7382>; else goto <D.7384>;
  <D.7384>:;
}


;; Function poly_big_to_small (null)
;; enabled by -tree-original


{
  size_t n;
  size_t u;

    size_t n;
    size_t u;
  n = 1 << logn;
  u = 0;
  goto <D.7395>;
  <D.7394>:;
  {
    int32_t z;

        int32_t z;
    z = zint_one_to_plain (s + (sizetype) (u * 4));
    if (-lim > (int) z || z > (int32_t) lim)
      {
        return 0;
      }
    *(d + (sizetype) u) = (signed char) z;
  }
  u++ ;
  <D.7395>:;
  if (u < n) goto <D.7394>; else goto <D.7396>;
  <D.7396>:;
  return 1;
}


;; Function poly_sub_scaled (null)
;; enabled by -tree-original


{
  size_t n;
  size_t u;

    size_t n;
    size_t u;
  n = 1 << logn;
  u = 0;
  goto <D.7419>;
  <D.7418>:;
  {
    int32_t kf;
    size_t v;
    uint32_t * x;
    const uint32_t * y;

        int32_t kf;
        size_t v;
        uint32_t * x;
        const uint32_t * y;
    kf = -*(k + (sizetype) (u * 4));
    x = F + (sizetype) ((u * Fstride) * 4);
    y = f;
    v = 0;
    goto <D.7416>;
    <D.7415>:;
    zint_add_scaled_mul_small (x, Flen, y, flen, kf, sch, scl);
    if (u + v == n + 4294967295)
      {
        x = F;
        kf = -kf;
      }
    else
      {
        x = x + (sizetype) (Fstride * 4);
      }
    y = y + (sizetype) (fstride * 4);
    v++ ;
    <D.7416>:;
    if (v < n) goto <D.7415>; else goto <D.7417>;
    <D.7417>:;
  }
  u++ ;
  <D.7419>:;
  if (u < n) goto <D.7418>; else goto <D.7420>;
  <D.7420>:;
}


;; Function poly_sub_scaled_ntt (null)
;; enabled by -tree-original


{
  uint32_t * gm;
  uint32_t * igm;
  uint32_t * fk;
  uint32_t * t1;
  uint32_t * x;
  const uint32_t * y;
  size_t n;
  size_t u;
  size_t tlen;
  const struct small_prime * primes;

    uint32_t * gm;
    uint32_t * igm;
    uint32_t * fk;
    uint32_t * t1;
    uint32_t * x;
    const uint32_t * y;
    size_t n;
    size_t u;
    size_t tlen;
    const struct small_prime * primes;
  n = 1 << logn;
  tlen = flen + 1;
  gm = tmp;
  igm = gm + (sizetype) (4 << logn);
  fk = igm + (sizetype) (4 << logn);
  t1 = fk + (sizetype) ((n * tlen) * 4);
  primes = (const struct small_prime *) &PRIMES;
  u = 0;
  goto <D.7459>;
  <D.7458>:;
  {
    uint32_t p;
    uint32_t p0i;
    uint32_t R2;
    uint32_t Rx;
    size_t v;

        uint32_t p;
        uint32_t p0i;
        uint32_t R2;
        uint32_t Rx;
        size_t v;
    p = (primes + (sizetype) (u * 12))->p;
    p0i = modp_ninv31 (p);
    R2 = modp_R2 (p, p0i);
    Rx = modp_Rx ((unsigned int) flen, p, p0i, R2);
    modp_mkgm2 (gm, igm, logn, (primes + (sizetype) (u * 12))->g, p, p0i);
    v = 0;
    goto <D.7450>;
    <D.7449>:;
    *(t1 + (sizetype) (v * 4)) = modp_set (*(k + (sizetype) (v * 4)), p);
    v++ ;
    <D.7450>:;
    if (v < n) goto <D.7449>; else goto <D.7451>;
    <D.7451>:;
    modp_NTT2_ext (t1, 1, (const uint32_t *) gm, logn, p, p0i);
    v = 0;, y = f;;, x = fk + (sizetype) (u * 4);;
    goto <D.7453>;
    <D.7452>:;
    *x = zint_mod_small_signed (y, flen, p, p0i, R2, Rx);
    v++ ;, y = y + (sizetype) (fstride * 4);;, x = x + (sizetype) (tlen * 4);;
    <D.7453>:;
    if (v < n) goto <D.7452>; else goto <D.7454>;
    <D.7454>:;
    modp_NTT2_ext (fk + (sizetype) (u * 4), tlen, (const uint32_t *) gm, logn, p, p0i);
    v = 0;, x = fk + (sizetype) (u * 4);;
    goto <D.7456>;
    <D.7455>:;
    *x = modp_montymul (modp_montymul (*(t1 + (sizetype) (v * 4)), *x, p, p0i), R2, p, p0i);
    v++ ;, x = x + (sizetype) (tlen * 4);;
    <D.7456>:;
    if (v < n) goto <D.7455>; else goto <D.7457>;
    <D.7457>:;
    modp_iNTT2_ext (fk + (sizetype) (u * 4), tlen, (const uint32_t *) igm, logn, p, p0i);
  }
  u++ ;
  <D.7459>:;
  if (u < tlen) goto <D.7458>; else goto <D.7460>;
  <D.7460>:;
  zint_rebuild_CRT (fk, tlen, tlen, n, primes, 1, t1);
  u = 0;, x = F;;, y = (const uint32_t *) fk;;
  goto <D.7462>;
  <D.7461>:;
  zint_sub_scaled (x, Flen, y, tlen, sch, scl);
  u++ ;, x = x + (sizetype) (Fstride * 4);;, y = y + (sizetype) (tlen * 4);;
  <D.7462>:;
  if (u < n) goto <D.7461>; else goto <D.7463>;
  <D.7463>:;
}


;; Function get_rng_u64 (null)
;; enabled by -tree-original


{
  uint64_t r;

    uint64_t r;
  falcon_inner_i_shake256_extract (rng, (uint8_t *) &r, 8);
  return r;
}


;; Function mkgauss (null)
;; enabled by -tree-original


{
  unsigned int u;
  unsigned int g;
  int val;

    unsigned int u;
    unsigned int g;
    int val;
  g = 1 << 10 - logn;
  val = 0;
  u = 0;
  goto <D.7486>;
  <D.7485>:;
  {
    uint64_t r;
    uint32_t f;
    uint32_t v;
    uint32_t k;
    uint32_t neg;

        uint64_t r;
        uint32_t f;
        uint32_t v;
        uint32_t k;
        uint32_t neg;
    r = get_rng_u64 (rng);
    neg = (long unsigned int) (r >> 63);
    r = (long long unsigned int) r & 9223372036854775807;
    f = (long unsigned int) ((long long unsigned int) r - (long long unsigned int) gauss_1024_12289[0] >> 63);
    v = 0;
    r = get_rng_u64 (rng);
    r = (long long unsigned int) r & 9223372036854775807;
    k = 1;
    goto <D.7483>;
    <D.7482>:;
    {
      uint32_t t;

            uint32_t t;
      t = (long unsigned int) ((long long unsigned int) r - (long long unsigned int) gauss_1024_12289[k] >> 63) ^ 1;
      v = -(((long unsigned int) f ^ 1) & (long unsigned int) t) & (long unsigned int) k | (long unsigned int) v;
      f = f | t;
    }
    k++ ;
    <D.7483>:;
    if (k <= 26) goto <D.7482>; else goto <D.7484>;
    <D.7484>:;
    v = (-neg ^ v) + neg;
    val = (int) ((long int) *(int32_t *) &v + (long int) val);
  }
  u++ ;
  <D.7486>:;
  if (u < g) goto <D.7485>; else goto <D.7487>;
  <D.7487>:;
  return val;
}


;; Function poly_small_sqnorm (null)
;; enabled by -tree-original


{
  size_t n;
  size_t u;
  uint32_t s;
  uint32_t ng;

    size_t n;
    size_t u;
    uint32_t s;
    uint32_t ng;
  n = 1 << logn;
  s = 0;
  ng = 0;
  u = 0;
  goto <D.7504>;
  <D.7503>:;
  {
    int32_t z;

        int32_t z;
    z = (int32_t) *(f + (sizetype) u);
    s = (long unsigned int) (z * z) + (long unsigned int) s;
    ng = ng | s;
  }
  u++ ;
  <D.7504>:;
  if (u < n) goto <D.7503>; else goto <D.7505>;
  <D.7505>:;
  return (uint32_t) ((signed int) ng >> 31) | s;
}


;; Function align_fpr (null)
;; enabled by -tree-original


{
  uint8_t * cb;
  uint8_t * cd;
  size_t k;
  size_t km;

    uint8_t * cb;
    uint8_t * cd;
    size_t k;
    size_t km;
  cb = (uint8_t *) base;
  cd = (uint8_t *) data;
  k = (unsigned int) (cd - cb);
  km = k & 7;
  if (km != 0)
    {
      k = (k - km) + 8;
    }
  return (fpr *) (cb + (sizetype) k);
}


;; Function align_u32 (null)
;; enabled by -tree-original


{
  uint8_t * cb;
  uint8_t * cd;
  size_t k;
  size_t km;

    uint8_t * cb;
    uint8_t * cd;
    size_t k;
    size_t km;
  cb = (uint8_t *) base;
  cd = (uint8_t *) data;
  k = (unsigned int) (cd - cb);
  km = k & 3;
  if (km != 0)
    {
      k = (k - km) + 4;
    }
  return (uint32_t *) (cb + (sizetype) k);
}


;; Function poly_small_to_fp (null)
;; enabled by -tree-original


{
  size_t n;
  size_t u;

    size_t n;
    size_t u;
  n = 1 << logn;
  u = 0;
  goto <D.7530>;
  <D.7529>:;
  *(x + (sizetype) (u * 8)) = fpr_of ((int64_t) *(f + (sizetype) u));
  u++ ;
  <D.7530>:;
  if (u < n) goto <D.7529>; else goto <D.7531>;
  <D.7531>:;
}


;; Function make_fg_step (null)
;; enabled by -tree-original


{
  size_t n;
  size_t hn;
  size_t u;
  size_t slen;
  size_t tlen;
  uint32_t * fd;
  uint32_t * gd;
  uint32_t * fs;
  uint32_t * gs;
  uint32_t * gm;
  uint32_t * igm;
  uint32_t * t1;
  const struct small_prime * primes;

    size_t n;
    size_t hn;
    size_t u;
    size_t slen;
    size_t tlen;
    uint32_t * fd;
    uint32_t * gd;
    uint32_t * fs;
    uint32_t * gs;
    uint32_t * gm;
    uint32_t * igm;
    uint32_t * t1;
    const struct small_prime * primes;
  n = 1 << logn;
  hn = n >> 1;
  slen = MAX_BL_SMALL[depth];
  tlen = MAX_BL_SMALL[depth + 1];
  primes = (const struct small_prime *) &PRIMES;
  fd = data;
  gd = fd + (sizetype) ((hn * tlen) * 4);
  fs = gd + (sizetype) ((hn * tlen) * 4);
  gs = fs + (sizetype) ((n * slen) * 4);
  gm = gs + (sizetype) ((n * slen) * 4);
  igm = gm + (sizetype) (n * 4);
  t1 = igm + (sizetype) (n * 4);
  memmove ((void *) fs, (const void *) data, (n * slen) * 8);
  u = 0;
  goto <D.7574>;
  <D.7573>:;
  {
    uint32_t p;
    uint32_t p0i;
    uint32_t R2;
    size_t v;
    uint32_t * x;

        uint32_t p;
        uint32_t p0i;
        uint32_t R2;
        size_t v;
        uint32_t * x;
    p = (primes + (sizetype) (u * 12))->p;
    p0i = modp_ninv31 (p);
    R2 = modp_R2 (p, p0i);
    modp_mkgm2 (gm, igm, logn, (primes + (sizetype) (u * 12))->g, p, p0i);
    v = 0;, x = fs + (sizetype) (u * 4);;
    goto <D.7558>;
    <D.7557>:;
    *(t1 + (sizetype) (v * 4)) = *x;
    v++ ;, x = x + (sizetype) (slen * 4);;
    <D.7558>:;
    if (v < n) goto <D.7557>; else goto <D.7559>;
    <D.7559>:;
    if (in_ntt == 0)
      {
        modp_NTT2_ext (t1, 1, (const uint32_t *) gm, logn, p, p0i);
      }
    v = 0;, x = fd + (sizetype) (u * 4);;
    goto <D.7563>;
    <D.7562>:;
    {
      uint32_t w0;
      uint32_t w1;

            uint32_t w0;
            uint32_t w1;
      w0 = *(t1 + (sizetype) (v * 8));
      w1 = *(t1 + ((sizetype) (v * 8) + 4));
      *x = modp_montymul (modp_montymul (w0, w1, p, p0i), R2, p, p0i);
    }
    v++ ;, x = x + (sizetype) (tlen * 4);;
    <D.7563>:;
    if (v < hn) goto <D.7562>; else goto <D.7564>;
    <D.7564>:;
    if (in_ntt != 0)
      {
        modp_iNTT2_ext (fs + (sizetype) (u * 4), slen, (const uint32_t *) igm, logn, p, p0i);
      }
    v = 0;, x = gs + (sizetype) (u * 4);;
    goto <D.7566>;
    <D.7565>:;
    *(t1 + (sizetype) (v * 4)) = *x;
    v++ ;, x = x + (sizetype) (slen * 4);;
    <D.7566>:;
    if (v < n) goto <D.7565>; else goto <D.7567>;
    <D.7567>:;
    if (in_ntt == 0)
      {
        modp_NTT2_ext (t1, 1, (const uint32_t *) gm, logn, p, p0i);
      }
    v = 0;, x = gd + (sizetype) (u * 4);;
    goto <D.7571>;
    <D.7570>:;
    {
      uint32_t w0;
      uint32_t w1;

            uint32_t w0;
            uint32_t w1;
      w0 = *(t1 + (sizetype) (v * 8));
      w1 = *(t1 + ((sizetype) (v * 8) + 4));
      *x = modp_montymul (modp_montymul (w0, w1, p, p0i), R2, p, p0i);
    }
    v++ ;, x = x + (sizetype) (tlen * 4);;
    <D.7571>:;
    if (v < hn) goto <D.7570>; else goto <D.7572>;
    <D.7572>:;
    if (in_ntt != 0)
      {
        modp_iNTT2_ext (gs + (sizetype) (u * 4), slen, (const uint32_t *) igm, logn, p, p0i);
      }
    if (out_ntt == 0)
      {
        modp_iNTT2_ext (fd + (sizetype) (u * 4), tlen, (const uint32_t *) igm, logn + 4294967295, p, p0i);
        modp_iNTT2_ext (gd + (sizetype) (u * 4), tlen, (const uint32_t *) igm, logn + 4294967295, p, p0i);
      }
  }
  u++ ;
  <D.7574>:;
  if (u < slen) goto <D.7573>; else goto <D.7575>;
  <D.7575>:;
  zint_rebuild_CRT (fs, slen, slen, n, primes, 1, gm);
  zint_rebuild_CRT (gs, slen, slen, n, primes, 1, gm);
  u = slen;
  goto <D.7599>;
  <D.7598>:;
  {
    uint32_t p;
    uint32_t p0i;
    uint32_t R2;
    uint32_t Rx;
    size_t v;
    uint32_t * x;

        uint32_t p;
        uint32_t p0i;
        uint32_t R2;
        uint32_t Rx;
        size_t v;
        uint32_t * x;
    p = (primes + (sizetype) (u * 12))->p;
    p0i = modp_ninv31 (p);
    R2 = modp_R2 (p, p0i);
    Rx = modp_Rx ((unsigned int) slen, p, p0i, R2);
    modp_mkgm2 (gm, igm, logn, (primes + (sizetype) (u * 12))->g, p, p0i);
    v = 0;, x = fs;;
    goto <D.7583>;
    <D.7582>:;
    *(t1 + (sizetype) (v * 4)) = zint_mod_small_signed ((const uint32_t *) x, slen, p, p0i, R2, Rx);
    v++ ;, x = x + (sizetype) (slen * 4);;
    <D.7583>:;
    if (v < n) goto <D.7582>; else goto <D.7584>;
    <D.7584>:;
    modp_NTT2_ext (t1, 1, (const uint32_t *) gm, logn, p, p0i);
    v = 0;, x = fd + (sizetype) (u * 4);;
    goto <D.7588>;
    <D.7587>:;
    {
      uint32_t w0;
      uint32_t w1;

            uint32_t w0;
            uint32_t w1;
      w0 = *(t1 + (sizetype) (v * 8));
      w1 = *(t1 + ((sizetype) (v * 8) + 4));
      *x = modp_montymul (modp_montymul (w0, w1, p, p0i), R2, p, p0i);
    }
    v++ ;, x = x + (sizetype) (tlen * 4);;
    <D.7588>:;
    if (v < hn) goto <D.7587>; else goto <D.7589>;
    <D.7589>:;
    v = 0;, x = gs;;
    goto <D.7591>;
    <D.7590>:;
    *(t1 + (sizetype) (v * 4)) = zint_mod_small_signed ((const uint32_t *) x, slen, p, p0i, R2, Rx);
    v++ ;, x = x + (sizetype) (slen * 4);;
    <D.7591>:;
    if (v < n) goto <D.7590>; else goto <D.7592>;
    <D.7592>:;
    modp_NTT2_ext (t1, 1, (const uint32_t *) gm, logn, p, p0i);
    v = 0;, x = gd + (sizetype) (u * 4);;
    goto <D.7596>;
    <D.7595>:;
    {
      uint32_t w0;
      uint32_t w1;

            uint32_t w0;
            uint32_t w1;
      w0 = *(t1 + (sizetype) (v * 8));
      w1 = *(t1 + ((sizetype) (v * 8) + 4));
      *x = modp_montymul (modp_montymul (w0, w1, p, p0i), R2, p, p0i);
    }
    v++ ;, x = x + (sizetype) (tlen * 4);;
    <D.7596>:;
    if (v < hn) goto <D.7595>; else goto <D.7597>;
    <D.7597>:;
    if (out_ntt == 0)
      {
        modp_iNTT2_ext (fd + (sizetype) (u * 4), tlen, (const uint32_t *) igm, logn + 4294967295, p, p0i);
        modp_iNTT2_ext (gd + (sizetype) (u * 4), tlen, (const uint32_t *) igm, logn + 4294967295, p, p0i);
      }
  }
  u++ ;
  <D.7599>:;
  if (u < tlen) goto <D.7598>; else goto <D.7600>;
  <D.7600>:;
}


;; Function make_fg (null)
;; enabled by -tree-original


{
  size_t n;
  size_t u;
  uint32_t * ft;
  uint32_t * gt;
  uint32_t p0;
  unsigned int d;
  const struct small_prime * primes;

    size_t n;
    size_t u;
    uint32_t * ft;
    uint32_t * gt;
    uint32_t p0;
    unsigned int d;
    const struct small_prime * primes;
  n = 1 << logn;
  ft = data;
  gt = ft + (sizetype) (n * 4);
  primes = (const struct small_prime *) &PRIMES;
  p0 = primes->p;
  u = 0;
  goto <D.7617>;
  <D.7616>:;
  *(ft + (sizetype) (u * 4)) = modp_set ((int32_t) *(f + (sizetype) u), p0);
  *(gt + (sizetype) (u * 4)) = modp_set ((int32_t) *(g + (sizetype) u), p0);
  u++ ;
  <D.7617>:;
  if (u < n) goto <D.7616>; else goto <D.7618>;
  <D.7618>:;
  if (depth == 0 && out_ntt != 0)
    {
      {
        uint32_t * gm;
        uint32_t * igm;
        uint32_t p;
        uint32_t p0i;

                uint32_t * gm;
                uint32_t * igm;
                uint32_t p;
                uint32_t p0i;
        p = primes->p;
        p0i = modp_ninv31 (p);
        gm = gt + (sizetype) (n * 4);
        igm = gm + (sizetype) (4 << logn);
        modp_mkgm2 (gm, igm, logn, primes->g, p, p0i);
        modp_NTT2_ext (ft, 1, (const uint32_t *) gm, logn, p, p0i);
        modp_NTT2_ext (gt, 1, (const uint32_t *) gm, logn, p, p0i);
        return;
      }
    }
  d = 0;
  goto <D.7624>;
  <D.7623>:;
  make_fg_step (data, logn - d, d, d != 0, d + 1 < depth || out_ntt != 0);
  d++ ;
  <D.7624>:;
  if (d < depth) goto <D.7623>; else goto <D.7625>;
  <D.7625>:;
}


;; Function solve_NTRU_deepest (null)
;; enabled by -tree-original


{
  size_t len;
  uint32_t * Fp;
  uint32_t * Gp;
  uint32_t * fp;
  uint32_t * gp;
  uint32_t * t1;
  uint32_t q;
  const struct small_prime * primes;

    size_t len;
    uint32_t * Fp;
    uint32_t * Gp;
    uint32_t * fp;
    uint32_t * gp;
    uint32_t * t1;
    uint32_t q;
    const struct small_prime * primes;
  len = MAX_BL_SMALL[logn_top];
  primes = (const struct small_prime *) &PRIMES;
  Fp = tmp;
  Gp = Fp + (sizetype) (len * 4);
  fp = Gp + (sizetype) (len * 4);
  gp = fp + (sizetype) (len * 4);
  t1 = gp + (sizetype) (len * 4);
  make_fg (fp, f, g, logn_top, logn_top, 0);
  zint_rebuild_CRT (fp, len, len, 2, primes, 0, t1);
  if (zint_bezout (Gp, Fp, (const uint32_t * restrict) fp, (const uint32_t * restrict) gp, len, t1) == 0)
    {
      return 0;
    }
  q = 12289;
  if (zint_mul_small (Fp, len, q) != 0 || zint_mul_small (Gp, len, q) != 0)
    {
      return 0;
    }
  return 1;
}


;; Function solve_NTRU_intermediate (null)
;; enabled by -tree-original


{
  unsigned int logn;
  size_t n;
  size_t hn;
  size_t slen;
  size_t dlen;
  size_t llen;
  size_t rlen;
  size_t FGlen;
  size_t u;
  uint32_t * Fd;
  uint32_t * Gd;
  uint32_t * Ft;
  uint32_t * Gt;
  uint32_t * ft;
  uint32_t * gt;
  uint32_t * t1;
  fpr * rt1;
  fpr * rt2;
  fpr * rt3;
  fpr * rt4;
  fpr * rt5;
  int scale_fg;
  int minbl_fg;
  int maxbl_fg;
  int maxbl_FG;
  int scale_k;
  uint32_t * x;
  uint32_t * y;
  int32_t * k;
  const struct small_prime * primes;

    unsigned int logn;
    size_t n;
    size_t hn;
    size_t slen;
    size_t dlen;
    size_t llen;
    size_t rlen;
    size_t FGlen;
    size_t u;
    uint32_t * Fd;
    uint32_t * Gd;
    uint32_t * Ft;
    uint32_t * Gt;
    uint32_t * ft;
    uint32_t * gt;
    uint32_t * t1;
    fpr * rt1;
    fpr * rt2;
    fpr * rt3;
    fpr * rt4;
    fpr * rt5;
    int scale_fg;
    int minbl_fg;
    int maxbl_fg;
    int maxbl_FG;
    int scale_k;
    uint32_t * x;
    uint32_t * y;
    int32_t * k;
    const struct small_prime * primes;
  logn = logn_top - depth;
  n = 1 << logn;
  hn = n >> 1;
  slen = MAX_BL_SMALL[depth];
  dlen = MAX_BL_SMALL[depth + 1];
  llen = MAX_BL_LARGE[depth];
  primes = (const struct small_prime *) &PRIMES;
  Fd = tmp;
  Gd = Fd + (sizetype) ((dlen * hn) * 4);
  ft = Gd + (sizetype) ((dlen * hn) * 4);
  make_fg (ft, f, g, logn_top, depth, 1);
  Ft = tmp;
  Gt = Ft + (sizetype) ((n * llen) * 4);
  t1 = Gt + (sizetype) ((n * llen) * 4);
  memmove ((void *) t1, (const void *) ft, (n * slen) * 8);
  ft = t1;
  gt = ft + (sizetype) ((slen * n) * 4);
  t1 = gt + (sizetype) ((slen * n) * 4);
  memmove ((void *) t1, (const void *) Fd, (hn * dlen) * 8);
  Fd = t1;
  Gd = Fd + (sizetype) ((hn * dlen) * 4);
  u = 0;
  goto <D.7690>;
  <D.7689>:;
  {
    uint32_t p;
    uint32_t p0i;
    uint32_t R2;
    uint32_t Rx;
    size_t v;
    uint32_t * xs;
    uint32_t * ys;
    uint32_t * xd;
    uint32_t * yd;

        uint32_t p;
        uint32_t p0i;
        uint32_t R2;
        uint32_t Rx;
        size_t v;
        uint32_t * xs;
        uint32_t * ys;
        uint32_t * xd;
        uint32_t * yd;
    p = (primes + (sizetype) (u * 12))->p;
    p0i = modp_ninv31 (p);
    R2 = modp_R2 (p, p0i);
    Rx = modp_Rx ((unsigned int) dlen, p, p0i, R2);
    v = 0;, xs = Fd;;, ys = Gd;;, xd = Ft + (sizetype) (u * 4);;, yd = Gt + (sizetype) (u * 4);;
    goto <D.7687>;
    <D.7686>:;
    *xd = zint_mod_small_signed ((const uint32_t *) xs, dlen, p, p0i, R2, Rx);
    *yd = zint_mod_small_signed ((const uint32_t *) ys, dlen, p, p0i, R2, Rx);
    v++ ;, xs = xs + (sizetype) (dlen * 4);;, ys = ys + (sizetype) (dlen * 4);;, xd = xd + (sizetype) (llen * 4);;, yd = yd + (sizetype) (llen * 4);;
    <D.7687>:;
    if (v < hn) goto <D.7686>; else goto <D.7688>;
    <D.7688>:;
  }
  u++ ;
  <D.7690>:;
  if (u < llen) goto <D.7689>; else goto <D.7691>;
  <D.7691>:;
  u = 0;
  goto <D.7722>;
  <D.7721>:;
  {
    uint32_t p;
    uint32_t p0i;
    uint32_t R2;
    uint32_t * gm;
    uint32_t * igm;
    uint32_t * fx;
    uint32_t * gx;
    uint32_t * Fp;
    uint32_t * Gp;
    size_t v;

        uint32_t p;
        uint32_t p0i;
        uint32_t R2;
        uint32_t * gm;
        uint32_t * igm;
        uint32_t * fx;
        uint32_t * gx;
        uint32_t * Fp;
        uint32_t * Gp;
        size_t v;
    p = (primes + (sizetype) (u * 12))->p;
    p0i = modp_ninv31 (p);
    R2 = modp_R2 (p, p0i);
    if (u == slen)
      {
        zint_rebuild_CRT (ft, slen, slen, n, primes, 1, t1);
        zint_rebuild_CRT (gt, slen, slen, n, primes, 1, t1);
      }
    gm = t1;
    igm = gm + (sizetype) (n * 4);
    fx = igm + (sizetype) (n * 4);
    gx = fx + (sizetype) (n * 4);
    modp_mkgm2 (gm, igm, logn, (primes + (sizetype) (u * 12))->g, p, p0i);
    if (u < slen)
      {
        v = 0;, x = ft + (sizetype) (u * 4);;, y = gt + (sizetype) (u * 4);;
        goto <D.7703>;
        <D.7702>:;
        *(fx + (sizetype) (v * 4)) = *x;
        *(gx + (sizetype) (v * 4)) = *y;
        v++ ;, x = x + (sizetype) (slen * 4);;, y = y + (sizetype) (slen * 4);;
        <D.7703>:;
        if (v < n) goto <D.7702>; else goto <D.7704>;
        <D.7704>:;
        modp_iNTT2_ext (ft + (sizetype) (u * 4), slen, (const uint32_t *) igm, logn, p, p0i);
        modp_iNTT2_ext (gt + (sizetype) (u * 4), slen, (const uint32_t *) igm, logn, p, p0i);
      }
    else
      {
        {
          uint32_t Rx;

                    uint32_t Rx;
          Rx = modp_Rx ((unsigned int) slen, p, p0i, R2);
          v = 0;, x = ft;;, y = gt;;
          goto <D.7707>;
          <D.7706>:;
          *(fx + (sizetype) (v * 4)) = zint_mod_small_signed ((const uint32_t *) x, slen, p, p0i, R2, Rx);
          *(gx + (sizetype) (v * 4)) = zint_mod_small_signed ((const uint32_t *) y, slen, p, p0i, R2, Rx);
          v++ ;, x = x + (sizetype) (slen * 4);;, y = y + (sizetype) (slen * 4);;
          <D.7707>:;
          if (v < n) goto <D.7706>; else goto <D.7708>;
          <D.7708>:;
          modp_NTT2_ext (fx, 1, (const uint32_t *) gm, logn, p, p0i);
          modp_NTT2_ext (gx, 1, (const uint32_t *) gm, logn, p, p0i);
        }
      }
    Fp = gx + (sizetype) (n * 4);
    Gp = Fp + (sizetype) (hn * 4);
    v = 0;, x = Ft + (sizetype) (u * 4);;, y = Gt + (sizetype) (u * 4);;
    goto <D.7710>;
    <D.7709>:;
    *(Fp + (sizetype) (v * 4)) = *x;
    *(Gp + (sizetype) (v * 4)) = *y;
    v++ ;, x = x + (sizetype) (llen * 4);;, y = y + (sizetype) (llen * 4);;
    <D.7710>:;
    if (v < hn) goto <D.7709>; else goto <D.7711>;
    <D.7711>:;
    modp_NTT2_ext (Fp, 1, (const uint32_t *) gm, logn + 4294967295, p, p0i);
    modp_NTT2_ext (Gp, 1, (const uint32_t *) gm, logn + 4294967295, p, p0i);
    v = 0;, x = Ft + (sizetype) (u * 4);;, y = Gt + (sizetype) (u * 4);;
    goto <D.7719>;
    <D.7718>:;
    {
      uint32_t ftA;
      uint32_t ftB;
      uint32_t gtA;
      uint32_t gtB;
      uint32_t mFp;
      uint32_t mGp;

            uint32_t ftA;
            uint32_t ftB;
            uint32_t gtA;
            uint32_t gtB;
            uint32_t mFp;
            uint32_t mGp;
      ftA = *(fx + (sizetype) (v * 8));
      ftB = *(fx + ((sizetype) (v * 8) + 4));
      gtA = *(gx + (sizetype) (v * 8));
      gtB = *(gx + ((sizetype) (v * 8) + 4));
      mFp = modp_montymul (*(Fp + (sizetype) (v * 4)), R2, p, p0i);
      mGp = modp_montymul (*(Gp + (sizetype) (v * 4)), R2, p, p0i);
      *x = modp_montymul (gtB, mFp, p, p0i);
      *(x + (sizetype) (llen * 4)) = modp_montymul (gtA, mFp, p, p0i);
      *y = modp_montymul (ftB, mGp, p, p0i);
      *(y + (sizetype) (llen * 4)) = modp_montymul (ftA, mGp, p, p0i);
    }
    v++ ;, x = x + (sizetype) (llen * 8);;, y = y + (sizetype) (llen * 8);;
    <D.7719>:;
    if (v < hn) goto <D.7718>; else goto <D.7720>;
    <D.7720>:;
    modp_iNTT2_ext (Ft + (sizetype) (u * 4), llen, (const uint32_t *) igm, logn, p, p0i);
    modp_iNTT2_ext (Gt + (sizetype) (u * 4), llen, (const uint32_t *) igm, logn, p, p0i);
  }
  u++ ;
  <D.7722>:;
  if (u < llen) goto <D.7721>; else goto <D.7723>;
  <D.7723>:;
  zint_rebuild_CRT (Ft, llen, llen, n, primes, 1, t1);
  zint_rebuild_CRT (Gt, llen, llen, n, primes, 1, t1);
  rt3 = align_fpr ((void *) tmp, (void *) t1);
  rt4 = rt3 + (sizetype) (n * 8);
  rt5 = rt4 + (sizetype) (n * 8);
  rt1 = rt5 + (sizetype) ((n >> 1) * 8);
  k = (int32_t *) align_u32 ((void *) tmp, (void *) rt1);
  rt2 = align_fpr ((void *) tmp, (void *) (k + (sizetype) (n * 4)));
  if (rt1 + (sizetype) (n * 8) > rt2)
    {
      rt2 = rt1 + (sizetype) (n * 8);
    }
  t1 = (uint32_t *) k + (sizetype) (n * 4);
  rlen = MIN_EXPR <slen, 10>;
  poly_big_to_fp (rt3, (const uint32_t *) (ft + ((sizetype) slen - (sizetype) rlen) * 4), rlen, slen, logn);
  poly_big_to_fp (rt4, (const uint32_t *) (gt + ((sizetype) slen - (sizetype) rlen) * 4), rlen, slen, logn);
  scale_fg = (int) (slen - rlen) * 31;
  minbl_fg = (int) BITLENGTH[depth].avg + (int) BITLENGTH[depth].std * -6;
  maxbl_fg = (int) BITLENGTH[depth].avg + (int) BITLENGTH[depth].std * 6;
  falcon_inner_FFT (rt3, logn);
  falcon_inner_FFT (rt4, logn);
  falcon_inner_poly_invnorm2_fft (rt5, (const fpr * restrict) rt3, (const fpr * restrict) rt4, logn);
  falcon_inner_poly_adj_fft (rt3, logn);
  falcon_inner_poly_adj_fft (rt4, logn);
  FGlen = llen;
  maxbl_FG = (int) llen * 31;
  scale_k = maxbl_FG - minbl_fg;
  <D.7739>:;
  {
    int scale_FG;
    int dc;
    int new_maxbl_FG;
    uint32_t scl;
    uint32_t sch;
    fpr pdc;
    fpr pt;

        int scale_FG;
        int dc;
        int new_maxbl_FG;
        uint32_t scl;
        uint32_t sch;
        fpr pdc;
        fpr pt;
    rlen = MIN_EXPR <FGlen, 10>;
    scale_FG = (int) (FGlen - rlen) * 31;
    poly_big_to_fp (rt1, (const uint32_t *) (Ft + ((sizetype) FGlen - (sizetype) rlen) * 4), rlen, llen, logn);
    poly_big_to_fp (rt2, (const uint32_t *) (Gt + ((sizetype) FGlen - (sizetype) rlen) * 4), rlen, llen, logn);
    falcon_inner_FFT (rt1, logn);
    falcon_inner_FFT (rt2, logn);
    falcon_inner_poly_mul_fft (rt1, (const fpr * restrict) rt3, logn);
    falcon_inner_poly_mul_fft (rt2, (const fpr * restrict) rt4, logn);
    falcon_inner_poly_add (rt2, (const fpr * restrict) rt1, logn);
    falcon_inner_poly_mul_autoadj_fft (rt2, (const fpr * restrict) rt5, logn);
    falcon_inner_iFFT (rt2, logn);
    dc = (scale_k - scale_FG) + scale_fg;
    if (dc < 0)
      {
        dc = -dc;
        pt = 4611686018427387904;
      }
    else
      {
        pt = 4602678819172646912;
      }
    pdc = 4607182418800017408;
    goto <D.7732>;
    <D.7731>:;
    if ((dc & 1) != 0)
      {
        pdc = falcon_inner_fpr_mul (pdc, pt);
      }
    dc = dc >> 1;
    pt = fpr_sqr (pt);
    <D.7732>:;
    if (dc != 0) goto <D.7731>; else goto <D.7733>;
    <D.7733>:;
    u = 0;
    goto <D.7736>;
    <D.7735>:;
    {
      fpr xv;

            fpr xv;
      xv = falcon_inner_fpr_mul (*(rt2 + (sizetype) (u * 8)), pdc);
      if (fpr_lt (13970166044099084288, xv) == 0 || fpr_lt (xv, 4746794007244308480) == 0)
        {
          return 0;
        }
      *(k + (sizetype) (u * 4)) = (long int) fpr_rint (xv);
    }
    u++ ;
    <D.7736>:;
    if (u < n) goto <D.7735>; else goto <D.7737>;
    <D.7737>:;
    sch = (long unsigned int) (scale_k / 31);
    scl = (long unsigned int) (scale_k % 31);
    if (depth <= 4)
      {
        poly_sub_scaled_ntt (Ft, FGlen, llen, (const uint32_t * restrict) ft, slen, slen, (const int32_t * restrict) k, sch, scl, logn, t1);
        poly_sub_scaled_ntt (Gt, FGlen, llen, (const uint32_t * restrict) gt, slen, slen, (const int32_t * restrict) k, sch, scl, logn, t1);
      }
    else
      {
        poly_sub_scaled (Ft, FGlen, llen, (const uint32_t * restrict) ft, slen, slen, (const int32_t * restrict) k, sch, scl, logn);
        poly_sub_scaled (Gt, FGlen, llen, (const uint32_t * restrict) gt, slen, slen, (const int32_t * restrict) k, sch, scl, logn);
      }
    new_maxbl_FG = (scale_k + maxbl_fg) + 10;
    if (new_maxbl_FG < maxbl_FG)
      {
        maxbl_FG = new_maxbl_FG;
        if (maxbl_FG + 30 < (int) FGlen * 31)
          {
            FGlen-- ;
          }
      }
    if (scale_k <= 0)
      {
        goto <D.7738>;
      }
    scale_k = scale_k + -25;
    if (scale_k < 0)
      {
        scale_k = 0;
      }
  }
  goto <D.7739>;
  <D.7738>:;
  if (FGlen < slen)
    {
      u = 0;
      goto <D.7749>;
      <D.7748>:;
      {
        size_t v;
        uint32_t sw;

                size_t v;
                uint32_t sw;
        sw = -(*(Ft + ((sizetype) FGlen + 1073741823) * 4) >> 30) >> 1;
        v = FGlen;
        goto <D.7743>;
        <D.7742>:;
        *(Ft + (sizetype) (v * 4)) = sw;
        v++ ;
        <D.7743>:;
        if (v < slen) goto <D.7742>; else goto <D.7744>;
        <D.7744>:;
        sw = -(*(Gt + ((sizetype) FGlen + 1073741823) * 4) >> 30) >> 1;
        v = FGlen;
        goto <D.7746>;
        <D.7745>:;
        *(Gt + (sizetype) (v * 4)) = sw;
        v++ ;
        <D.7746>:;
        if (v < slen) goto <D.7745>; else goto <D.7747>;
        <D.7747>:;
      }
      u++ ;, Ft = Ft + (sizetype) (llen * 4);;, Gt = Gt + (sizetype) (llen * 4);;
      <D.7749>:;
      if (u < n) goto <D.7748>; else goto <D.7750>;
      <D.7750>:;
    }
  u = 0;, x = tmp;;, y = tmp;;
  goto <D.7752>;
  <D.7751>:;
  memmove ((void *) x, (const void *) y, slen * 4);
  u++ ;, x = x + (sizetype) (slen * 4);;, y = y + (sizetype) (llen * 4);;
  <D.7752>:;
  if (n << 1 > u) goto <D.7751>; else goto <D.7753>;
  <D.7753>:;
  return 1;
}


;; Function solve_NTRU_binary_depth1 (null)
;; enabled by -tree-original


{
  unsigned int depth;
  unsigned int logn;
  size_t n_top;
  size_t n;
  size_t hn;
  size_t slen;
  size_t dlen;
  size_t llen;
  size_t u;
  uint32_t * Fd;
  uint32_t * Gd;
  uint32_t * Ft;
  uint32_t * Gt;
  uint32_t * ft;
  uint32_t * gt;
  uint32_t * t1;
  fpr * rt1;
  fpr * rt2;
  fpr * rt3;
  fpr * rt4;
  fpr * rt5;
  fpr * rt6;
  uint32_t * x;
  uint32_t * y;

    unsigned int depth;
    unsigned int logn;
    size_t n_top;
    size_t n;
    size_t hn;
    size_t slen;
    size_t dlen;
    size_t llen;
    size_t u;
    uint32_t * Fd;
    uint32_t * Gd;
    uint32_t * Ft;
    uint32_t * Gt;
    uint32_t * ft;
    uint32_t * gt;
    uint32_t * t1;
    fpr * rt1;
    fpr * rt2;
    fpr * rt3;
    fpr * rt4;
    fpr * rt5;
    fpr * rt6;
    uint32_t * x;
    uint32_t * y;
  depth = 1;
  n_top = 1 << logn_top;
  logn = logn_top - depth;
  n = 1 << logn;
  hn = n >> 1;
  slen = MAX_BL_SMALL[depth];
  dlen = MAX_BL_SMALL[depth + 1];
  llen = MAX_BL_LARGE[depth];
  Fd = tmp;
  Gd = Fd + (sizetype) ((dlen * hn) * 4);
  Ft = Gd + (sizetype) ((dlen * hn) * 4);
  Gt = Ft + (sizetype) ((llen * n) * 4);
  u = 0;
  goto <D.7797>;
  <D.7796>:;
  {
    uint32_t p;
    uint32_t p0i;
    uint32_t R2;
    uint32_t Rx;
    size_t v;
    uint32_t * xs;
    uint32_t * ys;
    uint32_t * xd;
    uint32_t * yd;

        uint32_t p;
        uint32_t p0i;
        uint32_t R2;
        uint32_t Rx;
        size_t v;
        uint32_t * xs;
        uint32_t * ys;
        uint32_t * xd;
        uint32_t * yd;
    p = PRIMES[u].p;
    p0i = modp_ninv31 (p);
    R2 = modp_R2 (p, p0i);
    Rx = modp_Rx ((unsigned int) dlen, p, p0i, R2);
    v = 0;, xs = Fd;;, ys = Gd;;, xd = Ft + (sizetype) (u * 4);;, yd = Gt + (sizetype) (u * 4);;
    goto <D.7794>;
    <D.7793>:;
    *xd = zint_mod_small_signed ((const uint32_t *) xs, dlen, p, p0i, R2, Rx);
    *yd = zint_mod_small_signed ((const uint32_t *) ys, dlen, p, p0i, R2, Rx);
    v++ ;, xs = xs + (sizetype) (dlen * 4);;, ys = ys + (sizetype) (dlen * 4);;, xd = xd + (sizetype) (llen * 4);;, yd = yd + (sizetype) (llen * 4);;
    <D.7794>:;
    if (v < hn) goto <D.7793>; else goto <D.7795>;
    <D.7795>:;
  }
  u++ ;
  <D.7797>:;
  if (u < llen) goto <D.7796>; else goto <D.7798>;
  <D.7798>:;
  memmove ((void *) tmp, (const void *) Ft, (llen * n) * 4);
  Ft = tmp;
  memmove ((void *) (Ft + (sizetype) ((llen * n) * 4)), (const void *) Gt, (llen * n) * 4);
  Gt = Ft + (sizetype) ((llen * n) * 4);
  ft = Gt + (sizetype) ((llen * n) * 4);
  gt = ft + (sizetype) ((slen * n) * 4);
  t1 = gt + (sizetype) ((slen * n) * 4);
  u = 0;
  goto <D.7832>;
  <D.7831>:;
  {
    uint32_t p;
    uint32_t p0i;
    uint32_t R2;
    uint32_t * gm;
    uint32_t * igm;
    uint32_t * fx;
    uint32_t * gx;
    uint32_t * Fp;
    uint32_t * Gp;
    unsigned int e;
    size_t v;

        uint32_t p;
        uint32_t p0i;
        uint32_t R2;
        uint32_t * gm;
        uint32_t * igm;
        uint32_t * fx;
        uint32_t * gx;
        uint32_t * Fp;
        uint32_t * Gp;
        unsigned int e;
        size_t v;
    p = PRIMES[u].p;
    p0i = modp_ninv31 (p);
    R2 = modp_R2 (p, p0i);
    gm = t1;
    igm = gm + (sizetype) (n_top * 4);
    fx = igm + (sizetype) (n * 4);
    gx = fx + (sizetype) (n_top * 4);
    modp_mkgm2 (gm, igm, logn_top, PRIMES[u].g, p, p0i);
    v = 0;
    goto <D.7811>;
    <D.7810>:;
    *(fx + (sizetype) (v * 4)) = modp_set ((int32_t) *(f + (sizetype) v), p);
    *(gx + (sizetype) (v * 4)) = modp_set ((int32_t) *(g + (sizetype) v), p);
    v++ ;
    <D.7811>:;
    if (v < n_top) goto <D.7810>; else goto <D.7812>;
    <D.7812>:;
    modp_NTT2_ext (fx, 1, (const uint32_t *) gm, logn_top, p, p0i);
    modp_NTT2_ext (gx, 1, (const uint32_t *) gm, logn_top, p, p0i);
    e = logn_top;
    goto <D.7814>;
    <D.7813>:;
    modp_poly_rec_res (fx, e, p, p0i, R2);
    modp_poly_rec_res (gx, e, p, p0i, R2);
    e-- ;
    <D.7814>:;
    if (e > logn) goto <D.7813>; else goto <D.7815>;
    <D.7815>:;
    if (depth != 0)
      {
        memmove ((void *) (gm + (sizetype) (n * 4)), (const void *) igm, n * 4);
        igm = gm + (sizetype) (n * 4);
        memmove ((void *) (igm + (sizetype) (n * 4)), (const void *) fx, n * 4);
        fx = igm + (sizetype) (n * 4);
        memmove ((void *) (fx + (sizetype) (n * 4)), (const void *) gx, n * 4);
        gx = fx + (sizetype) (n * 4);
      }
    Fp = gx + (sizetype) (n * 4);
    Gp = Fp + (sizetype) (hn * 4);
    v = 0;, x = Ft + (sizetype) (u * 4);;, y = Gt + (sizetype) (u * 4);;
    goto <D.7817>;
    <D.7816>:;
    *(Fp + (sizetype) (v * 4)) = *x;
    *(Gp + (sizetype) (v * 4)) = *y;
    v++ ;, x = x + (sizetype) (llen * 4);;, y = y + (sizetype) (llen * 4);;
    <D.7817>:;
    if (v < hn) goto <D.7816>; else goto <D.7818>;
    <D.7818>:;
    modp_NTT2_ext (Fp, 1, (const uint32_t *) gm, logn + 4294967295, p, p0i);
    modp_NTT2_ext (Gp, 1, (const uint32_t *) gm, logn + 4294967295, p, p0i);
    v = 0;, x = Ft + (sizetype) (u * 4);;, y = Gt + (sizetype) (u * 4);;
    goto <D.7826>;
    <D.7825>:;
    {
      uint32_t ftA;
      uint32_t ftB;
      uint32_t gtA;
      uint32_t gtB;
      uint32_t mFp;
      uint32_t mGp;

            uint32_t ftA;
            uint32_t ftB;
            uint32_t gtA;
            uint32_t gtB;
            uint32_t mFp;
            uint32_t mGp;
      ftA = *(fx + (sizetype) (v * 8));
      ftB = *(fx + ((sizetype) (v * 8) + 4));
      gtA = *(gx + (sizetype) (v * 8));
      gtB = *(gx + ((sizetype) (v * 8) + 4));
      mFp = modp_montymul (*(Fp + (sizetype) (v * 4)), R2, p, p0i);
      mGp = modp_montymul (*(Gp + (sizetype) (v * 4)), R2, p, p0i);
      *x = modp_montymul (gtB, mFp, p, p0i);
      *(x + (sizetype) (llen * 4)) = modp_montymul (gtA, mFp, p, p0i);
      *y = modp_montymul (ftB, mGp, p, p0i);
      *(y + (sizetype) (llen * 4)) = modp_montymul (ftA, mGp, p, p0i);
    }
    v++ ;, x = x + (sizetype) (llen * 8);;, y = y + (sizetype) (llen * 8);;
    <D.7826>:;
    if (v < hn) goto <D.7825>; else goto <D.7827>;
    <D.7827>:;
    modp_iNTT2_ext (Ft + (sizetype) (u * 4), llen, (const uint32_t *) igm, logn, p, p0i);
    modp_iNTT2_ext (Gt + (sizetype) (u * 4), llen, (const uint32_t *) igm, logn, p, p0i);
    if (u < slen)
      {
        modp_iNTT2_ext (fx, 1, (const uint32_t *) igm, logn, p, p0i);
        modp_iNTT2_ext (gx, 1, (const uint32_t *) igm, logn, p, p0i);
        v = 0;, x = ft + (sizetype) (u * 4);;, y = gt + (sizetype) (u * 4);;
        goto <D.7829>;
        <D.7828>:;
        *x = *(fx + (sizetype) (v * 4));
        *y = *(gx + (sizetype) (v * 4));
        v++ ;, x = x + (sizetype) (slen * 4);;, y = y + (sizetype) (slen * 4);;
        <D.7829>:;
        if (v < n) goto <D.7828>; else goto <D.7830>;
        <D.7830>:;
      }
  }
  u++ ;
  <D.7832>:;
  if (u < llen) goto <D.7831>; else goto <D.7833>;
  <D.7833>:;
  zint_rebuild_CRT (Ft, llen, llen, n << 1, (const struct small_prime *) &PRIMES, 1, t1);
  zint_rebuild_CRT (ft, slen, slen, n << 1, (const struct small_prime *) &PRIMES, 1, t1);
  rt1 = align_fpr ((void *) tmp, (void *) (gt + (sizetype) ((slen * n) * 4)));
  rt2 = rt1 + (sizetype) (n * 8);
  poly_big_to_fp (rt1, (const uint32_t *) Ft, llen, llen, logn);
  poly_big_to_fp (rt2, (const uint32_t *) Gt, llen, llen, logn);
  memmove ((void *) tmp, (const void *) ft, (slen * n) * 8);
  ft = tmp;
  gt = ft + (sizetype) ((slen * n) * 4);
  rt3 = align_fpr ((void *) tmp, (void *) (gt + (sizetype) ((slen * n) * 4)));
  memmove ((void *) rt3, (const void *) rt1, n * 16);
  rt1 = rt3;
  rt2 = rt1 + (sizetype) (n * 8);
  rt3 = rt2 + (sizetype) (n * 8);
  rt4 = rt3 + (sizetype) (n * 8);
  poly_big_to_fp (rt3, (const uint32_t *) ft, slen, slen, logn);
  poly_big_to_fp (rt4, (const uint32_t *) gt, slen, slen, logn);
  memmove ((void *) tmp, (const void *) rt1, n * 32);
  rt1 = (fpr *) tmp;
  rt2 = rt1 + (sizetype) (n * 8);
  rt3 = rt2 + (sizetype) (n * 8);
  rt4 = rt3 + (sizetype) (n * 8);
  falcon_inner_FFT (rt1, logn);
  falcon_inner_FFT (rt2, logn);
  falcon_inner_FFT (rt3, logn);
  falcon_inner_FFT (rt4, logn);
  rt5 = rt4 + (sizetype) (n * 8);
  rt6 = rt5 + (sizetype) (n * 8);
  falcon_inner_poly_add_muladj_fft (rt5, (const fpr * restrict) rt1, (const fpr * restrict) rt2, (const fpr * restrict) rt3, (const fpr * restrict) rt4, logn);
  falcon_inner_poly_invnorm2_fft (rt6, (const fpr * restrict) rt3, (const fpr * restrict) rt4, logn);
  falcon_inner_poly_mul_autoadj_fft (rt5, (const fpr * restrict) rt6, logn);
  falcon_inner_iFFT (rt5, logn);
  u = 0;
  goto <D.7836>;
  <D.7835>:;
  {
    fpr z;

        fpr z;
    z = *(rt5 + (sizetype) (u * 8));
    if (fpr_lt (z, 4890909195324358656) == 0 || fpr_lt (14114281232179134464, z) == 0)
      {
        return 0;
      }
    *(rt5 + (sizetype) (u * 8)) = fpr_of (fpr_rint (z));
  }
  u++ ;
  <D.7836>:;
  if (u < n) goto <D.7835>; else goto <D.7837>;
  <D.7837>:;
  falcon_inner_FFT (rt5, logn);
  falcon_inner_poly_mul_fft (rt3, (const fpr * restrict) rt5, logn);
  falcon_inner_poly_mul_fft (rt4, (const fpr * restrict) rt5, logn);
  falcon_inner_poly_sub (rt1, (const fpr * restrict) rt3, logn);
  falcon_inner_poly_sub (rt2, (const fpr * restrict) rt4, logn);
  falcon_inner_iFFT (rt1, logn);
  falcon_inner_iFFT (rt2, logn);
  Ft = tmp;
  Gt = Ft + (sizetype) (n * 4);
  rt3 = align_fpr ((void *) tmp, (void *) (Gt + (sizetype) (n * 4)));
  memmove ((void *) rt3, (const void *) rt1, n * 16);
  rt1 = rt3;
  rt2 = rt1 + (sizetype) (n * 8);
  u = 0;
  goto <D.7839>;
  <D.7838>:;
  *(Ft + (sizetype) (u * 4)) = (long unsigned int) fpr_rint (*(rt1 + (sizetype) (u * 8)));
  *(Gt + (sizetype) (u * 4)) = (long unsigned int) fpr_rint (*(rt2 + (sizetype) (u * 8)));
  u++ ;
  <D.7839>:;
  if (u < n) goto <D.7838>; else goto <D.7840>;
  <D.7840>:;
  return 1;
}


;; Function solve_NTRU_binary_depth0 (null)
;; enabled by -tree-original


{
  size_t n;
  size_t hn;
  size_t u;
  uint32_t p;
  uint32_t p0i;
  uint32_t R2;
  uint32_t * Fp;
  uint32_t * Gp;
  uint32_t * t1;
  uint32_t * t2;
  uint32_t * t3;
  uint32_t * t4;
  uint32_t * t5;
  uint32_t * gm;
  uint32_t * igm;
  uint32_t * ft;
  uint32_t * gt;
  fpr * rt2;
  fpr * rt3;

    size_t n;
    size_t hn;
    size_t u;
    uint32_t p;
    uint32_t p0i;
    uint32_t R2;
    uint32_t * Fp;
    uint32_t * Gp;
    uint32_t * t1;
    uint32_t * t2;
    uint32_t * t3;
    uint32_t * t4;
    uint32_t * t5;
    uint32_t * gm;
    uint32_t * igm;
    uint32_t * ft;
    uint32_t * gt;
    fpr * rt2;
    fpr * rt3;
  n = 1 << logn;
  hn = n >> 1;
  p = PRIMES[0].p;
  p0i = modp_ninv31 (p);
  R2 = modp_R2 (p, p0i);
  Fp = tmp;
  Gp = Fp + (sizetype) (hn * 4);
  ft = Gp + (sizetype) (hn * 4);
  gt = ft + (sizetype) (n * 4);
  gm = gt + (sizetype) (n * 4);
  igm = gm + (sizetype) (n * 4);
  modp_mkgm2 (gm, igm, logn, PRIMES[0].g, p, p0i);
  u = 0;
  goto <D.7867>;
  <D.7866>:;
  *(Fp + (sizetype) (u * 4)) = modp_set (zint_one_to_plain ((const uint32_t *) (Fp + (sizetype) (u * 4))), p);
  *(Gp + (sizetype) (u * 4)) = modp_set (zint_one_to_plain ((const uint32_t *) (Gp + (sizetype) (u * 4))), p);
  u++ ;
  <D.7867>:;
  if (u < hn) goto <D.7866>; else goto <D.7868>;
  <D.7868>:;
  modp_NTT2_ext (Fp, 1, (const uint32_t *) gm, logn + 4294967295, p, p0i);
  modp_NTT2_ext (Gp, 1, (const uint32_t *) gm, logn + 4294967295, p, p0i);
  u = 0;
  goto <D.7870>;
  <D.7869>:;
  *(ft + (sizetype) (u * 4)) = modp_set ((int32_t) *(f + (sizetype) u), p);
  *(gt + (sizetype) (u * 4)) = modp_set ((int32_t) *(g + (sizetype) u), p);
  u++ ;
  <D.7870>:;
  if (u < n) goto <D.7869>; else goto <D.7871>;
  <D.7871>:;
  modp_NTT2_ext (ft, 1, (const uint32_t *) gm, logn, p, p0i);
  modp_NTT2_ext (gt, 1, (const uint32_t *) gm, logn, p, p0i);
  u = 0;
  goto <D.7879>;
  <D.7878>:;
  {
    uint32_t ftA;
    uint32_t ftB;
    uint32_t gtA;
    uint32_t gtB;
    uint32_t mFp;
    uint32_t mGp;

        uint32_t ftA;
        uint32_t ftB;
        uint32_t gtA;
        uint32_t gtB;
        uint32_t mFp;
        uint32_t mGp;
    ftA = *(ft + (sizetype) (u * 4));
    ftB = *(ft + ((sizetype) u + 1) * 4);
    gtA = *(gt + (sizetype) (u * 4));
    gtB = *(gt + ((sizetype) u + 1) * 4);
    mFp = modp_montymul (*(Fp + (sizetype) ((u >> 1) * 4)), R2, p, p0i);
    mGp = modp_montymul (*(Gp + (sizetype) ((u >> 1) * 4)), R2, p, p0i);
    *(ft + (sizetype) (u * 4)) = modp_montymul (gtB, mFp, p, p0i);
    *(ft + ((sizetype) u + 1) * 4) = modp_montymul (gtA, mFp, p, p0i);
    *(gt + (sizetype) (u * 4)) = modp_montymul (ftB, mGp, p, p0i);
    *(gt + ((sizetype) u + 1) * 4) = modp_montymul (ftA, mGp, p, p0i);
  }
  u = u + 2;
  <D.7879>:;
  if (u < n) goto <D.7878>; else goto <D.7880>;
  <D.7880>:;
  modp_iNTT2_ext (ft, 1, (const uint32_t *) igm, logn, p, p0i);
  modp_iNTT2_ext (gt, 1, (const uint32_t *) igm, logn, p, p0i);
  Gp = Fp + (sizetype) (n * 4);
  t1 = Gp + (sizetype) (n * 4);
  memmove ((void *) Fp, (const void *) ft, n * 8);
  t2 = t1 + (sizetype) (n * 4);
  t3 = t2 + (sizetype) (n * 4);
  t4 = t3 + (sizetype) (n * 4);
  t5 = t4 + (sizetype) (n * 4);
  modp_mkgm2 (t1, t2, logn, PRIMES[0].g, p, p0i);
  modp_NTT2_ext (Fp, 1, (const uint32_t *) t1, logn, p, p0i);
  modp_NTT2_ext (Gp, 1, (const uint32_t *) t1, logn, p, p0i);
  *t4 = *t5 = modp_set ((int32_t) *f, p);
  u = 1;
  goto <D.7882>;
  <D.7881>:;
  *(t4 + (sizetype) (u * 4)) = modp_set ((int32_t) *(f + (sizetype) u), p);
  *(t5 + (sizetype) ((n - u) * 4)) = modp_set ((int32_t) -(int) *(f + (sizetype) u), p);
  u++ ;
  <D.7882>:;
  if (u < n) goto <D.7881>; else goto <D.7883>;
  <D.7883>:;
  modp_NTT2_ext (t4, 1, (const uint32_t *) t1, logn, p, p0i);
  modp_NTT2_ext (t5, 1, (const uint32_t *) t1, logn, p, p0i);
  u = 0;
  goto <D.7886>;
  <D.7885>:;
  {
    uint32_t w;

        uint32_t w;
    w = modp_montymul (*(t5 + (sizetype) (u * 4)), R2, p, p0i);
    *(t2 + (sizetype) (u * 4)) = modp_montymul (w, *(Fp + (sizetype) (u * 4)), p, p0i);
    *(t3 + (sizetype) (u * 4)) = modp_montymul (w, *(t4 + (sizetype) (u * 4)), p, p0i);
  }
  u++ ;
  <D.7886>:;
  if (u < n) goto <D.7885>; else goto <D.7887>;
  <D.7887>:;
  *t4 = *t5 = modp_set ((int32_t) *g, p);
  u = 1;
  goto <D.7889>;
  <D.7888>:;
  *(t4 + (sizetype) (u * 4)) = modp_set ((int32_t) *(g + (sizetype) u), p);
  *(t5 + (sizetype) ((n - u) * 4)) = modp_set ((int32_t) -(int) *(g + (sizetype) u), p);
  u++ ;
  <D.7889>:;
  if (u < n) goto <D.7888>; else goto <D.7890>;
  <D.7890>:;
  modp_NTT2_ext (t4, 1, (const uint32_t *) t1, logn, p, p0i);
  modp_NTT2_ext (t5, 1, (const uint32_t *) t1, logn, p, p0i);
  u = 0;
  goto <D.7893>;
  <D.7892>:;
  {
    uint32_t w;

        uint32_t w;
    w = modp_montymul (*(t5 + (sizetype) (u * 4)), R2, p, p0i);
    *(t2 + (sizetype) (u * 4)) = modp_add (*(t2 + (sizetype) (u * 4)), modp_montymul (w, *(Gp + (sizetype) (u * 4)), p, p0i), p);
    *(t3 + (sizetype) (u * 4)) = modp_add (*(t3 + (sizetype) (u * 4)), modp_montymul (w, *(t4 + (sizetype) (u * 4)), p, p0i), p);
  }
  u++ ;
  <D.7893>:;
  if (u < n) goto <D.7892>; else goto <D.7894>;
  <D.7894>:;
  modp_mkgm2 (t1, t4, logn, PRIMES[0].g, p, p0i);
  modp_iNTT2_ext (t2, 1, (const uint32_t *) t4, logn, p, p0i);
  modp_iNTT2_ext (t3, 1, (const uint32_t *) t4, logn, p, p0i);
  u = 0;
  goto <D.7896>;
  <D.7895>:;
  *(t1 + (sizetype) (u * 4)) = (long unsigned int) modp_norm (*(t2 + (sizetype) (u * 4)), p);
  *(t2 + (sizetype) (u * 4)) = (long unsigned int) modp_norm (*(t3 + (sizetype) (u * 4)), p);
  u++ ;
  <D.7896>:;
  if (u < n) goto <D.7895>; else goto <D.7897>;
  <D.7897>:;
  rt3 = align_fpr ((void *) tmp, (void *) t3);
  u = 0;
  goto <D.7899>;
  <D.7898>:;
  *(rt3 + (sizetype) (u * 8)) = fpr_of ((int64_t) *((int32_t *) t2 + (sizetype) (u * 4)));
  u++ ;
  <D.7899>:;
  if (u < n) goto <D.7898>; else goto <D.7900>;
  <D.7900>:;
  falcon_inner_FFT (rt3, logn);
  rt2 = align_fpr ((void *) tmp, (void *) t2);
  memmove ((void *) rt2, (const void *) rt3, hn * 8);
  rt3 = rt2 + (sizetype) (hn * 8);
  u = 0;
  goto <D.7902>;
  <D.7901>:;
  *(rt3 + (sizetype) (u * 8)) = fpr_of ((int64_t) *((int32_t *) t1 + (sizetype) (u * 4)));
  u++ ;
  <D.7902>:;
  if (u < n) goto <D.7901>; else goto <D.7903>;
  <D.7903>:;
  falcon_inner_FFT (rt3, logn);
  falcon_inner_poly_div_autoadj_fft (rt3, (const fpr * restrict) rt2, logn);
  falcon_inner_iFFT (rt3, logn);
  u = 0;
  goto <D.7905>;
  <D.7904>:;
  *(t1 + (sizetype) (u * 4)) = modp_set ((long int) fpr_rint (*(rt3 + (sizetype) (u * 8))), p);
  u++ ;
  <D.7905>:;
  if (u < n) goto <D.7904>; else goto <D.7906>;
  <D.7906>:;
  t2 = t1 + (sizetype) (n * 4);
  t3 = t2 + (sizetype) (n * 4);
  t4 = t3 + (sizetype) (n * 4);
  t5 = t4 + (sizetype) (n * 4);
  modp_mkgm2 (t2, t3, logn, PRIMES[0].g, p, p0i);
  u = 0;
  goto <D.7908>;
  <D.7907>:;
  *(t4 + (sizetype) (u * 4)) = modp_set ((int32_t) *(f + (sizetype) u), p);
  *(t5 + (sizetype) (u * 4)) = modp_set ((int32_t) *(g + (sizetype) u), p);
  u++ ;
  <D.7908>:;
  if (u < n) goto <D.7907>; else goto <D.7909>;
  <D.7909>:;
  modp_NTT2_ext (t1, 1, (const uint32_t *) t2, logn, p, p0i);
  modp_NTT2_ext (t4, 1, (const uint32_t *) t2, logn, p, p0i);
  modp_NTT2_ext (t5, 1, (const uint32_t *) t2, logn, p, p0i);
  u = 0;
  goto <D.7912>;
  <D.7911>:;
  {
    uint32_t kw;

        uint32_t kw;
    kw = modp_montymul (*(t1 + (sizetype) (u * 4)), R2, p, p0i);
    *(Fp + (sizetype) (u * 4)) = modp_sub (*(Fp + (sizetype) (u * 4)), modp_montymul (kw, *(t4 + (sizetype) (u * 4)), p, p0i), p);
    *(Gp + (sizetype) (u * 4)) = modp_sub (*(Gp + (sizetype) (u * 4)), modp_montymul (kw, *(t5 + (sizetype) (u * 4)), p, p0i), p);
  }
  u++ ;
  <D.7912>:;
  if (u < n) goto <D.7911>; else goto <D.7913>;
  <D.7913>:;
  modp_iNTT2_ext (Fp, 1, (const uint32_t *) t3, logn, p, p0i);
  modp_iNTT2_ext (Gp, 1, (const uint32_t *) t3, logn, p, p0i);
  u = 0;
  goto <D.7915>;
  <D.7914>:;
  *(Fp + (sizetype) (u * 4)) = (long unsigned int) modp_norm (*(Fp + (sizetype) (u * 4)), p);
  *(Gp + (sizetype) (u * 4)) = (long unsigned int) modp_norm (*(Gp + (sizetype) (u * 4)), p);
  u++ ;
  <D.7915>:;
  if (u < n) goto <D.7914>; else goto <D.7916>;
  <D.7916>:;
  return 1;
}


;; Function solve_NTRU (null)
;; enabled by -tree-original


{
  size_t n;
  size_t u;
  uint32_t * ft;
  uint32_t * gt;
  uint32_t * Ft;
  uint32_t * Gt;
  uint32_t * gm;
  uint32_t p;
  uint32_t p0i;
  uint32_t r;
  const struct small_prime * primes;

    size_t n;
    size_t u;
    uint32_t * ft;
    uint32_t * gt;
    uint32_t * Ft;
    uint32_t * Gt;
    uint32_t * gm;
    uint32_t p;
    uint32_t p0i;
    uint32_t r;
    const struct small_prime * primes;
  n = 1 << logn;
  if (solve_NTRU_deepest (logn, f, g, tmp) == 0)
    {
      return 0;
    }
  if (logn <= 2)
    {
      {
        unsigned int depth;

                unsigned int depth;
        depth = logn;
        goto <D.7939>;
        <D.7938>:;
        if (solve_NTRU_intermediate (logn, f, g, depth, tmp) == 0)
          {
            return 0;
          }
        <D.7939>:;
        if (depth--  != 0) goto <D.7938>; else goto <D.7940>;
        <D.7940>:;
      }
    }
  else
    {
      {
        unsigned int depth;

                unsigned int depth;
        depth = logn;
        goto <D.7943>;
        <D.7942>:;
        if (solve_NTRU_intermediate (logn, f, g, depth, tmp) == 0)
          {
            return 0;
          }
        <D.7943>:;
        if (depth--  > 2) goto <D.7942>; else goto <D.7944>;
        <D.7944>:;
        if (solve_NTRU_binary_depth1 (logn, f, g, tmp) == 0)
          {
            return 0;
          }
        if (solve_NTRU_binary_depth0 (logn, f, g, tmp) == 0)
          {
            return 0;
          }
      }
    }
  if (G == 0B)
    {
      G = (int8_t *) (tmp + (sizetype) (n * 8));
    }
  if (poly_big_to_small (F, (const uint32_t *) tmp, lim, logn) == 0 || poly_big_to_small (G, (const uint32_t *) (tmp + (sizetype) (n * 4)), lim, logn) == 0)
    {
      return 0;
    }
  Gt = tmp;
  ft = Gt + (sizetype) (n * 4);
  gt = ft + (sizetype) (n * 4);
  Ft = gt + (sizetype) (n * 4);
  gm = Ft + (sizetype) (n * 4);
  primes = (const struct small_prime *) &PRIMES;
  p = primes->p;
  p0i = modp_ninv31 (p);
  modp_mkgm2 (gm, tmp, logn, primes->g, p, p0i);
  u = 0;
  goto <D.7946>;
  <D.7945>:;
  *(Gt + (sizetype) (u * 4)) = modp_set ((int32_t) *(G + (sizetype) u), p);
  u++ ;
  <D.7946>:;
  if (u < n) goto <D.7945>; else goto <D.7947>;
  <D.7947>:;
  u = 0;
  goto <D.7949>;
  <D.7948>:;
  *(ft + (sizetype) (u * 4)) = modp_set ((int32_t) *(f + (sizetype) u), p);
  *(gt + (sizetype) (u * 4)) = modp_set ((int32_t) *(g + (sizetype) u), p);
  *(Ft + (sizetype) (u * 4)) = modp_set ((int32_t) *(F + (sizetype) u), p);
  u++ ;
  <D.7949>:;
  if (u < n) goto <D.7948>; else goto <D.7950>;
  <D.7950>:;
  modp_NTT2_ext (ft, 1, (const uint32_t *) gm, logn, p, p0i);
  modp_NTT2_ext (gt, 1, (const uint32_t *) gm, logn, p, p0i);
  modp_NTT2_ext (Ft, 1, (const uint32_t *) gm, logn, p, p0i);
  modp_NTT2_ext (Gt, 1, (const uint32_t *) gm, logn, p, p0i);
  r = modp_montymul (12289, 1, p, p0i);
  u = 0;
  goto <D.7953>;
  <D.7952>:;
  {
    uint32_t z;

        uint32_t z;
    z = modp_sub (modp_montymul (*(ft + (sizetype) (u * 4)), *(Gt + (sizetype) (u * 4)), p, p0i), modp_montymul (*(gt + (sizetype) (u * 4)), *(Ft + (sizetype) (u * 4)), p, p0i), p);
    if (z != r)
      {
        return 0;
      }
  }
  u++ ;
  <D.7953>:;
  if (u < n) goto <D.7952>; else goto <D.7954>;
  <D.7954>:;
  return 1;
}


;; Function poly_small_mkgauss (null)
;; enabled by -tree-original


{
  size_t n;
  size_t u;
  unsigned int mod2;
  void restart = <<< error >>>;

    size_t n;
    size_t u;
    unsigned int mod2;
  n = 1 << logn;
  mod2 = 0;
  u = 0;
  goto <D.7966>;
  <D.7965>:;
  {
    int s;

        int s;
    restart:;
    s = mkgauss (rng, logn);
    if ((unsigned int) s + 127 > 254)
      {
        // predicted unlikely by goto predictor.;
        goto restart;
      }
    if (n + 4294967295 == u)
      {
        if (((unsigned int) s & 1) == mod2)
          {
            // predicted unlikely by goto predictor.;
            goto restart;
          }
      }
    else
      {
        mod2 = (unsigned int) s & 1 ^ mod2;
      }
    *(f + (sizetype) u) = (signed char) s;
  }
  u++ ;
  <D.7966>:;
  if (u < n) goto <D.7965>; else goto <D.7967>;
  <D.7967>:;
}


;; Function falcon_inner_keygen (null)
;; enabled by -tree-original


{
  size_t n;
  size_t u;
  uint16_t * h2;
  uint16_t * tmp2;
  struct inner_shake256_context * rc;

    size_t n;
    size_t u;
    uint16_t * h2;
    uint16_t * tmp2;
    struct inner_shake256_context * rc;
  n = 1 << logn;
  rc = rng;
  <D.7999>:;
  {
    fpr * rt1;
    fpr * rt2;
    fpr * rt3;
    fpr bnorm;
    uint32_t normf;
    uint32_t normg;
    uint32_t norm;
    int lim;

        fpr * rt1;
        fpr * rt2;
        fpr * rt3;
        fpr bnorm;
        uint32_t normf;
        uint32_t normg;
        uint32_t norm;
        int lim;
    poly_small_mkgauss (rc, f, logn);
    poly_small_mkgauss (rc, g, logn);
    lim = 1 << (int) falcon_inner_max_fg_bits[logn] + -1;
    u = 0;
    goto <D.7993>;
    <D.7992>:;
    if ((((int) *(f + (sizetype) u) >= lim || (int) *(f + (sizetype) u) <= -lim) || (int) *(g + (sizetype) u) >= lim) || (int) *(g + (sizetype) u) <= -lim)
      {
        lim = -1;
        goto <D.7991>;
      }
    u++ ;
    <D.7993>:;
    if (u < n) goto <D.7992>; else goto <D.7991>;
    <D.7991>:;
    if (lim < 0)
      {
        // predicted unlikely by continue predictor.;
        goto <D.7994>;
      }
    normf = poly_small_sqnorm ((const int8_t *) f, logn);
    normg = poly_small_sqnorm ((const int8_t *) g, logn);
    norm = normf + normg | (uint32_t) ((signed int) (normf | normg) >> 31);
    if (norm > 16822)
      {
        // predicted unlikely by continue predictor.;
        goto <D.7994>;
      }
    rt1 = (fpr *) tmp;
    rt2 = rt1 + (sizetype) (n * 8);
    rt3 = rt2 + (sizetype) (n * 8);
    poly_small_to_fp (rt1, (const int8_t *) f, logn);
    poly_small_to_fp (rt2, (const int8_t *) g, logn);
    falcon_inner_FFT (rt1, logn);
    falcon_inner_FFT (rt2, logn);
    falcon_inner_poly_invnorm2_fft (rt3, (const fpr * restrict) rt1, (const fpr * restrict) rt2, logn);
    falcon_inner_poly_adj_fft (rt1, logn);
    falcon_inner_poly_adj_fft (rt2, logn);
    falcon_inner_poly_mulconst (rt1, 4667981563525332992, logn);
    falcon_inner_poly_mulconst (rt2, 4667981563525332992, logn);
    falcon_inner_poly_mul_autoadj_fft (rt1, (const fpr * restrict) rt3, logn);
    falcon_inner_poly_mul_autoadj_fft (rt2, (const fpr * restrict) rt3, logn);
    falcon_inner_iFFT (rt1, logn);
    falcon_inner_iFFT (rt2, logn);
    bnorm = 0;
    u = 0;
    goto <D.7996>;
    <D.7995>:;
    bnorm = falcon_inner_fpr_add (bnorm, fpr_sqr (*(rt1 + (sizetype) (u * 8))));
    bnorm = falcon_inner_fpr_add (bnorm, fpr_sqr (*(rt2 + (sizetype) (u * 8))));
    u++ ;
    <D.7996>:;
    if (u < n) goto <D.7995>; else goto <D.7997>;
    <D.7997>:;
    if (fpr_lt (bnorm, 4670353323383631276) == 0)
      {
        // predicted unlikely by continue predictor.;
        goto <D.7994>;
      }
    if (h == 0B)
      {
        h2 = (uint16_t *) tmp;
        tmp2 = h2 + (sizetype) (n * 2);
      }
    else
      {
        h2 = h;
        tmp2 = (uint16_t *) tmp;
      }
    if (falcon_inner_compute_public (h2, (const int8_t *) f, (const int8_t *) g, logn, (uint8_t *) tmp2) == 0)
      {
        // predicted unlikely by continue predictor.;
        goto <D.7994>;
      }
    lim = (1 << (int) falcon_inner_max_FG_bits[logn] + -1) + -1;
    if (solve_NTRU (logn, F, G, (const int8_t *) f, (const int8_t *) g, lim, (uint32_t *) tmp) == 0)
      {
        // predicted unlikely by continue predictor.;
        goto <D.7994>;
      }
    goto <D.7998>;
  }
  <D.7994>:;
  goto <D.7999>;
  <D.7998>:;
}

