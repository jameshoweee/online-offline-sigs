
;; Function falcon_inner_fpr_scaled (falcon_inner_fpr_scaled, funcdef_no=18, decl_uid=6651, cgraph_uid=19, symbol_order=38)

(note 1 0 5 NOTE_INSN_DELETED)
(note 5 1 16 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 16 5 4 2 NOTE_INSN_PROLOGUE_END)
(note 4 16 7 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 7 4 11 2 (parallel [
            (asm_input/v ("push	{ r4, r5, r6, lr }
	
	@ Input i is in r0:r1, and sc in r2.
	@ Extract the sign bit, and compute the absolute value.
	@ -> sign bit in r3, with value 0 or -1
	asrs	r3, r1, #31
	eors	r0, r3
	eors	r1, r3
	subs	r0, r3
	sbcs	r1, r3
	
	@ Scale exponent to account for the encoding; if the source is
	@ zero or if the scaled exponent is negative, it is set to 32.
	addw	r2, r2, #1022
	orrs	r4, r0, r1
	bics	r4, r4, r2, asr #31
	rsbs	r5, r4, #0
	orrs	r4, r5
	ands	r2, r2, r4, asr #31
	adds	r2, #32
	
	@ Normalize value to a full 64-bit width, by shifting it left.
	@ The shift count is subtracted from the exponent (in r2).
	@ If the mantissa is 0, the exponent is set to 0.
	
	@ If top word is 0, replace with low word; otherwise, add 32 to
	@ the exponent.
	rsbs	r4, r1, #0
	orrs	r4, r1
	eors	r5, r0, r1
	bics	r5, r5, r4, asr #31
	eors	r1, r5
	ands	r0, r0, r4, asr #31
	lsrs	r4, r4, #31
	adds	r2, r2, r4, lsl #5
	
	@ Count leading zeros of r1 to finish the shift.
	clz	r4, r1
	subs	r2, r4
	rsbs	r5, r4, #32
	lsls	r1, r4
	lsrs	r5, r0, r5
	lsls	r0, r4
	orrs	r1, r5
	
	@ Clear the top bit; we know it's a 1 (unless the whole mantissa
	@ was zero, but then it's still OK to clear it)
	bfc	r1, #31, #1
	
	@ Now shift right the value by 11 bits; this puts the value in
	@ the 2^52..2^53-1 range. We also keep a copy of the pre-shift
	@ low bits in r5.
	movs	r5, r0
	lsrs	r0, #11
	orrs	r0, r0, r1, lsl #21
	lsrs	r1, #11
	
	@ Also plug the exponent at the right place. This must be done
	@ now so that, in case the rounding creates a carry, that carry
	@ adds to the exponent, which would be exactly what we want at
	@ that point.
	orrs	r1, r1, r2, lsl #20
	
	@ Rounding: we must add 1 to the mantissa in the following cases:
	@  - bits 11 to 9 of r5 are '011', '110' or '111'
	@  - bits 11 to 9 of r5 are '010' and one of the
	@    bits 0 to 8 is non-zero
	ubfx	r6, r5, #0, #9
	addw	r6, r6, #511
	orrs	r5, r6
	
	ubfx	r5, r5, #9, #3
	movs	r6, #0xC8
	lsrs	r6, r5
	ands	r6, #1
	adds	r0, r6
	adcs	r1, #0
	
	@ Put back the sign.
	orrs	r1, r1, r3, lsl #31
	
	pop	{ r4, r5, r6, pc}
	") ../falcon-lazy/fpr.c:87)
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) "../falcon-lazy/fpr.c":87:2 -1
     (nil))
(insn 11 7 12 2 (clobber (reg:DI 0 r0 [orig:113 <retval> ] [113])) "../falcon-lazy/fpr.c":171:1 -1
     (nil))
(insn 12 11 22 2 (use (reg/i:DI 0 r0)) "../falcon-lazy/fpr.c":171:1 -1
     (expr_list:REG_DEAD (reg/i:DI 0 r0)
        (nil)))
(note 22 12 18 2 NOTE_INSN_EPILOGUE_BEG)
(jump_insn:TI 18 22 19 2 (simple_return) "../falcon-lazy/fpr.c":171:1 1009 {*thumb2_return}
     (nil)
 -> simple_return)
(barrier 19 18 14)
(note 14 19 15 NOTE_INSN_DELETED)
(note 15 14 0 NOTE_INSN_DELETED)

;; Function falcon_inner_fpr_add (falcon_inner_fpr_add, funcdef_no=19, decl_uid=6700, cgraph_uid=20, symbol_order=39)

(note 1 0 5 NOTE_INSN_DELETED)
(note 5 1 16 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 16 5 4 2 NOTE_INSN_PROLOGUE_END)
(note 4 16 7 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 7 4 11 2 (parallel [
            (asm_input/v ("push	{ r4, r5, r6, r7, r8, r10, r11, lr }
	
	@ Make sure that the first operand (x) has the larger absolute
	@ value. This guarantees that the exponent of y is less than
	@ or equal to the exponent of x, and, if they are equal, then
	@ the mantissa of y will not be greater than the mantissa of x.
	@ However, if absolute values are equal and the sign of x is 1,
	@ then we want to also swap the values.
	ubfx	r4, r1, #0, #31  @ top word without sign bit
	ubfx	r5, r3, #0, #31  @ top word without sign bit
	subs	r7, r0, r2       @ difference in r7:r4
	sbcs	r4, r5
	orrs	r7, r4
	rsbs	r5, r7, #0
	orrs	r7, r5      @ bit 31 of r7 is 0 iff difference is zero
	bics	r6, r1, r7
	orrs	r6, r4      @ bit 31 of r6 is 1 iff the swap must be done
	
	@ Conditional swap
	eors	r4, r0, r2
	eors	r5, r1, r3
	ands	r4, r4, r6, asr #31
	ands	r5, r5, r6, asr #31
	eors	r0, r4
	eors	r1, r5
	eors	r2, r4
	eors	r3, r5
	
	@ Extract mantissa of x into r0:r1, exponent in r4, sign in r5
	ubfx	r4, r1, #20, #11   @ Exponent in r4 (without sign)
	addw	r5, r4, #2047 @ Get a carry to test r4 for zero
	lsrs	r5, #11       @ r5 is the mantissa implicit high bit
	bfc	r1, #20, #11  @ Clear exponent bits (not the sign)
	orrs	r1, r1, r5, lsl #20  @ Set mantissa high bit
	asrs	r5, r1, #31   @ Get sign bit (sign-extended)
	bfc	r1, #31, #1   @ Clear the sign bit
	
	@ Extract mantissa of y into r2:r3, exponent in r6, sign in r7
	ubfx	r6, r3, #20, #11   @ Exponent in r6 (without sign)
	addw	r7, r6, #2047 @ Get a carry to test r6 for zero
	lsrs	r7, #11       @ r7 is the mantissa implicit high bit
	bfc	r3, #20, #11  @ Clear exponent bits (not the sign)
	orrs	r3, r3, r7, lsl #20  @ Set mantissa high bit
	asrs	r7, r3, #31   @ Get sign bit (sign-extended)
	bfc	r3, #31, #1   @ Clear the sign bit
	
	@ Scale mantissas up by three bits.
	lsls	r1, #3
	orrs	r1, r1, r0, lsr #29
	lsls	r0, #3
	lsls	r3, #3
	orrs	r3, r3, r2, lsr #29
	lsls	r2, #3
	
	@ x: exponent=r4, sign=r5, mantissa=r0:r1 (scaled up 3 bits)
	@ y: exponent=r6, sign=r7, mantissa=r2:r3 (scaled up 3 bits)
	
	@ At that point, the exponent of x (in r4) is larger than that
	@ of y (in r6). The difference is the amount of shifting that
	@ should be done on y. If that amount is larger than 59 then
	@ we clamp y to 0. We won't need y's exponent beyond that point,
	@ so we store that shift count in r6.
	subs	r6, r4, r6
	subs	r8, r6, #60
	ands	r2, r2, r8, asr #31
	ands	r3, r3, r8, asr #31
	
	@ Shift right r2:r3 by r6 bits. The shift count is in the 0..59
	@ range. r11 will be non-zero if and only if some non-zero bits
	@ were dropped.
	subs	r8, r6, #32
	bics	r11, r2, r8, asr #31
	ands	r2, r2, r8, asr #31
	bics	r10, r3, r8, asr #31
	orrs	r2, r2, r10
	ands	r3, r3, r8, asr #31
	ands	r6, r6, #31
	rsbs	r8, r6, #32
	lsls	r10, r2, r8
	orrs	r11, r11, r10
	lsrs	r2, r2, r6
	lsls	r10, r3, r8
	orrs	r2, r2, r10
	lsrs	r3, r3, r6
	
	@ If r11 is non-zero then some non-zero bit was dropped and the
	@ low bit of r2 must be forced to 1 ('sticky bit').
	rsbs	r6, r11, #0
	orrs	r6, r6, r11
	orrs	r2, r2, r6, lsr #31
	
	@ x: exponent=r4, sign=r5, mantissa=r0:r1 (scaled up 3 bits)
	@ y: sign=r7, value=r2:r3 (scaled to same exponent as x)
	
	@ If x and y don't have the same sign, then we should negate r2:r3
	@ (i.e. subtract the mantissa instead of adding it). Signs of x
	@ and y are in r5 and r7, as full-width words. We won't need r7
	@ afterwards.
	eors	r7, r5    @ r7 = -1 if y must be negated, 0 otherwise
	eors	r2, r7
	eors	r3, r7
	subs	r2, r7
	sbcs	r3, r7
	
	@ r2:r3 has been shifted, we can add to r0:r1.
	adds	r0, r2
	adcs	r1, r3
	
	@ result: exponent=r4, sign=r5, mantissa=r0:r1 (scaled up 3 bits)
	
	@ Normalize the result with some left-shifting to full 64-bit
	@ width. Shift count goes to r2, and exponent (r4) is adjusted.
	clz	r2, r0
	clz	r3, r1
	sbfx	r6, r3, #5, #1
	ands	r2, r6
	adds	r2, r2, r3
	subs	r4, r4, r2
	
	@ Shift r0:r1 to the left by r2 bits.
	subs	r7, r2, #32
	lsls	r7, r0, r7
	lsls	r1, r1, r2
	rsbs	r6, r2, #32
	orrs	r1, r1, r7
	lsrs	r6, r0, r6
	orrs	r1, r1, r6
	lsls	r0, r0, r2
	
	@ The exponent of x was in r4. The left-shift operation has
	@ subtracted some value from it, 8 in case the result has the
	@ same exponent as x. However, the high bit of the mantissa will
	@ add 1 to the exponent, so we only add back 7 (the exponent is
	@ added in because rounding might have produced a carry, which
	@ should then spill into the exponent).
	adds	r4, #7
	
	@ If the mantissa new mantissa is non-zero, then its bit 63 is
	@ non-zero (thanks to the normalizing shift). Otherwise, that bit
	@ is zero, and we should then set the exponent to zero as well.
	ands	r4, r4, r1, asr #31
	
	@ Shrink back the value to a 52-bit mantissa. This requires
	@ right-shifting by 11 bits; we keep a copy of the pre-shift
	@ low word in r3.
	movs	r3, r0
	lsrs	r0, #11
	orrs	r0, r0, r1, lsl #21
	lsrs	r1, #11
	
	@ Apply rounding.
	ubfx	r6, r3, #0, #9
	addw	r6, r6, #511
	orrs	r3, r6
	ubfx	r3, r3, #9, #3
	movs	r6, #0xC8
	lsrs	r6, r3
	ands	r6, #1
	adds	r0, r6
	adcs	r1, #0
	
	@Plug in the exponent with an addition.
	adds	r1, r1, r4, lsl #20
	
	@ If the new exponent is negative or zero, then it underflowed
	@ and we must clear the whole mantissa and exponent.
	rsbs	r4, r4, #0
	ands	r0, r0, r4, asr #31
	ands	r1, r1, r4, asr #31
	
	@ Put back the sign. This is the sign of x: thanks to the
	@ conditional swap at the start, this is always correct.
	bfi	r1, r5, #31, #1
	
	pop	{ r4, r5, r6, r7, r8, r10, r11, pc }
	") ../falcon-lazy/fpr.c:292)
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) "../falcon-lazy/fpr.c":292:2 -1
     (nil))
(insn 11 7 12 2 (clobber (reg:DI 0 r0 [orig:113 <retval> ] [113])) "../falcon-lazy/fpr.c":469:1 -1
     (nil))
(insn 12 11 20 2 (use (reg/i:DI 0 r0)) "../falcon-lazy/fpr.c":469:1 -1
     (expr_list:REG_DEAD (reg/i:DI 0 r0)
        (nil)))
(note 20 12 18 2 NOTE_INSN_EPILOGUE_BEG)
(jump_insn:TI 18 20 19 2 (simple_return) "../falcon-lazy/fpr.c":469:1 1009 {*thumb2_return}
     (nil)
 -> simple_return)
(barrier 19 18 14)
(note 14 19 15 NOTE_INSN_DELETED)
(note 15 14 0 NOTE_INSN_DELETED)

;; Function falcon_inner_fpr_mul (falcon_inner_fpr_mul, funcdef_no=20, decl_uid=6717, cgraph_uid=21, symbol_order=40)

(note 1 0 5 NOTE_INSN_DELETED)
(note 5 1 16 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 16 5 4 2 NOTE_INSN_PROLOGUE_END)
(note 4 16 7 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 7 4 11 2 (parallel [
            (asm_input/v ("push	{ r4, r5, r6, r7, r8, r10, r11, lr }
	
	@ Extract mantissas: x.m = r4:r5, y.m = r6:r7
	@ r4 and r6 contain only 25 bits each.
	bics	r4, r0, #0xFE000000
	lsls	r5, r1, #7
	orrs	r5, r5, r0, lsr #25
	orrs	r5, r5, #0x08000000
	bics	r5, r5, #0xF0000000
	bics	r6, r2, #0xFE000000
	lsls	r7, r3, #7
	orrs	r7, r7, r2, lsr #25
	orrs	r7, r7, #0x08000000
	bics	r7, r7, #0xF0000000
	
	@ Perform product. Values are in the 2^52..2^53-1 range, so
	@ the product is at most 106-bit long. Of the low 50 bits,
	@ we only want to know if they are all zeros or not. Here,
	@ we get the top 56 bits in r10:r11, and r8 will be non-zero
	@ if and only if at least one of the low 50 bits is non-zero.
	umull	r8, r10, r4, r6      @ x0*y0
	lsls	r10, #7
	orrs	r10, r10, r8, lsr #25
	eors	r11, r11
	umlal	r10, r11, r4, r7     @ x0*y1
	umlal	r10, r11, r5, r6     @ x1*y0
	orrs	r8, r8, r10, lsl #7
	lsrs	r10, #25
	orrs	r10, r10, r11, lsl #7
	eors	r11, r11
	umlal	r10, r11, r5, r7     @ x1*y1
	
	@ Now r0, r2, r4, r5, r6 and r7 are free.
	@ If any of the low 50 bits was non-zero, then we force the
	@ low bit of r10 to 1.
	rsbs	r4, r8, #0
	orrs	r8, r8, r4
	orrs	r10, r10, r8, lsr #31
	
	@ r8 is free.
	@ r10:r11 contains the product in the 2^54..2^56-1 range. We
	@ normalize it to 2^54..2^55-1 (into r6:r7) with a conditional
	@ shift (low bit is sticky). r5 contains -1 if the shift was done,
	@ 0 otherwise.
	ands	r6, r10, #1
	lsrs	r5, r11, #23
	rsbs	r5, r5, #0
	orrs	r6, r6, r10, lsr #1
	orrs	r6, r6, r11, lsl #31
	lsrs	r7, r11, #1
	eors	r10, r10, r6
	eors	r11, r11, r7
	bics	r10, r10, r5
	bics	r11, r11, r5
	eors	r6, r6, r10
	eors	r7, r7, r11
	
	@ Compute aggregate exponent: ex + ey - 1023 + w
	@ (where w = 1 if the conditional shift was done, 0 otherwise)
	@ But we subtract 1 because the injection of the mantissa high
	@ bit will increment the exponent by 1.
	lsls	r0, r1, #1
	lsls	r2, r3, #1
	lsrs	r0, #21
	addw	r4, r0, #0x7FF   @ save ex + 2047 in r4
	lsrs	r2, #21
	addw	r8, r2, #0x7FF   @ save ey + 2047 in r8
	adds	r2, r0
	subw	r2, r2, #1024
	subs	r2, r5
	
	@ r5 is free.
	@ Also, if either of the source exponents is 0, or the result
	@ exponent is 0 or negative, then the result is zero and the
	@ mantissa and the exponent shall be clamped to zero. Since
	@ r2 contains the result exponent minus 1, we test on r2
	@ being strictly negative.
	ands	r4, r8    @ if bit 11 = 0 then one of the exponents was 0
	mvns	r5, r2
	ands	r5, r5, r4, lsl #20
	ands	r2, r2, r5, asr #31
	ands	r6, r6, r5, asr #31
	ands	r7, r7, r5, asr #31
	
	@ Sign is the XOR of the sign of the operands. This is true in
	@ all cases, including very small results (exponent underflow)
	@ and zeros.
	eors	r1, r3
	bfc	r1, #0, #31
	
	@ Plug in the exponent.
	bfi	r1, r2, #20, #11
	
	@ r2 and r3 are free.
	@ Shift back to the normal 53-bit mantissa, with rounding.
	@ Mantissa goes into r0:r1. For r1, we must use an addition
	@ because the rounding may have triggered a carry, that should
	@ be added to the exponent.
	movs	r4, r6
	lsrs	r0, r6, #2
	orrs	r0, r0, r7, lsl #30
	adds	r1, r1, r7, lsr #2
	ands	r4, #0x7
	movs	r3, #0xC8
	lsrs	r3, r4
	ands	r3, #1
	adds	r0, r3
	adcs	r1, #0
	
	pop	{ r4, r5, r6, r7, r8, r10, r11, pc }
	") ../falcon-lazy/fpr.c:589)
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) "../falcon-lazy/fpr.c":589:2 -1
     (nil))
(insn 11 7 12 2 (clobber (reg:DI 0 r0 [orig:113 <retval> ] [113])) "../falcon-lazy/fpr.c":701:1 -1
     (nil))
(insn 12 11 20 2 (use (reg/i:DI 0 r0)) "../falcon-lazy/fpr.c":701:1 -1
     (expr_list:REG_DEAD (reg/i:DI 0 r0)
        (nil)))
(note 20 12 18 2 NOTE_INSN_EPILOGUE_BEG)
(jump_insn:TI 18 20 19 2 (simple_return) "../falcon-lazy/fpr.c":701:1 1009 {*thumb2_return}
     (nil)
 -> simple_return)
(barrier 19 18 14)
(note 14 19 15 NOTE_INSN_DELETED)
(note 15 14 0 NOTE_INSN_DELETED)

;; Function falcon_inner_fpr_div (falcon_inner_fpr_div, funcdef_no=21, decl_uid=6723, cgraph_uid=22, symbol_order=41)

(note 1 0 5 NOTE_INSN_DELETED)
(note 5 1 16 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 16 5 4 2 NOTE_INSN_PROLOGUE_END)
(note 4 16 7 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 7 4 11 2 (parallel [
            (asm_input/v ("push	{ r4, r5, r6, r7, r8, r10, r11, lr }
	@ Extract mantissas of x and y, in r0:r4 and r2:r5, respectively.
	@ We don't touch r1 and r3 as they contain the exponents and
	@ signs, which we'll need later on.
	ubfx	r4, r1, #0, #20
	ubfx	r5, r3, #0, #20
	orrs	r4, r4, #0x00100000
	orrs	r5, r5, #0x00100000
	
	@ Perform bit-by-bit division. We want a 56-bit result in r8:r10
	@ (low bit is 0). Bits come from the carry flag and are
	@ injected with rrx, i.e. in position 31; we thus get bits in
	@ the reverse order. Bits accumulate in r8; after the first 24
	@ bits, we move the quotient bits to r10.
	eors	r8, r8
	
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	
	@ We have the first 24 bits of the quotient, move them to r10.
	rbit	r10, r8
	
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	subs	r6, r0, r2
	sbcs	r7, r4, r5
	rrx	r8, r8
	ands	r6, r2, r8, asr #31
	ands	r7, r5, r8, asr #31
	subs	r0, r6
	sbcs	r4, r7
	adds	r0, r0, r0
	adcs	r4, r4, r4
	
	@ Lowest bit will be set if remainder is non-zero at this point
	@ (this is the 'sticky' bit).
	subs	r0, #1
	sbcs	r4, #0
	rrx	r8, r8
	
	@ We now have the next (low) 32 bits of the quotient.
	rbit	r8, r8
	
	@ Since both operands had their top bit set, we know that the
	@ result at this point is in 2^54..2^56-1. We scale it down
	@ to 2^54..2^55-1 with a conditional shift. We also write the
	@ result in r4:r5. If the shift is done, r6 will contain -1.
	ands	r4, r8, #1
	lsrs	r6, r10, #23
	rsbs	r6, r6, #0
	orrs	r4, r4, r8, lsr #1
	orrs	r4, r4, r10, lsl #31
	lsrs	r5, r10, #1
	eors	r8, r8, r4
	eors	r10, r10, r5
	bics	r8, r8, r6
	bics	r10, r10, r6
	eors	r4, r4, r8
	eors	r5, r5, r10
	
	@ Compute aggregate exponent: ex - ey + 1022 + w
	@ (where w = 1 if the conditional shift was done, 0 otherwise)
	@ But we subtract 1 because the injection of the mantissa high
	@ bit will increment the exponent by 1.
	lsls	r0, r1, #1
	lsls	r2, r3, #1
	lsrs	r0, r0, #21
	addw	r7, r0, #0x7FF  @ save ex + 2047 in r7
	subs	r0, r0, r2, lsr #21
	addw	r0, r0, #1021
	subs	r0, r6
	
	@ If the x operand was zero, then the computation was wrong and
	@ the result is zero. Also, if the result exponent is zero or
	@ negative, then the mantissa shall be clamped to zero. Since r0
	@ contains the result exponent minus 1, we test on r0 being
	@ strictly negative.
	mvns	r2, r0
	ands	r2, r2, r7, lsl #20
	ands	r0, r0, r2, asr #31
	ands	r4, r4, r2, asr #31
	ands	r5, r5, r2, asr #31
	
	@ Sign is the XOR of the sign of the operands. This is true in
	@ all cases, including very small results (exponent underflow)
	@ and zeros.
	eors	r1, r3
	bfc	r1, #0, #31
	
	@ Plug in the exponent.
	bfi	r1, r0, #20, #11
	
	@ Shift back to the normal 53-bit mantissa, with rounding.
	@ Mantissa goes into r0:r1. For r1, we must use an addition
	@ because the rounding may have triggered a carry, that should
	@ be added to the exponent.
	movs	r6, r4
	lsrs	r0, r4, #2
	orrs	r0, r0, r5, lsl #30
	adds	r1, r1, r5, lsr #2
	ands	r6, #0x7
	movs	r3, #0xC8
	lsrs	r3, r6
	ands	r3, #1
	adds	r0, r3
	adcs	r1, #0
	
	pop	{ r4, r5, r6, r7, r8, r10, r11, pc }
	") ../falcon-lazy/fpr.c:809)
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) "../falcon-lazy/fpr.c":809:2 -1
     (nil))
(insn 11 7 12 2 (clobber (reg:DI 0 r0 [orig:113 <retval> ] [113])) "../falcon-lazy/fpr.c":936:1 -1
     (nil))
(insn 12 11 20 2 (use (reg/i:DI 0 r0)) "../falcon-lazy/fpr.c":936:1 -1
     (expr_list:REG_DEAD (reg/i:DI 0 r0)
        (nil)))
(note 20 12 18 2 NOTE_INSN_EPILOGUE_BEG)
(jump_insn:TI 18 20 19 2 (simple_return) "../falcon-lazy/fpr.c":936:1 1009 {*thumb2_return}
     (nil)
 -> simple_return)
(barrier 19 18 14)
(note 14 19 15 NOTE_INSN_DELETED)
(note 15 14 0 NOTE_INSN_DELETED)

;; Function falcon_inner_fpr_sqrt (falcon_inner_fpr_sqrt, funcdef_no=22, decl_uid=6728, cgraph_uid=23, symbol_order=42)

(note 1 0 4 NOTE_INSN_DELETED)
(note 4 1 15 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 15 4 3 2 NOTE_INSN_PROLOGUE_END)
(note 3 15 6 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 6 3 10 2 (parallel [
            (asm_input/v ("push	{ r4, r5, r6, r7, r8, r10, r11, lr }
	
	@ Extract mantissa (r0:r1) and exponent (r2). We assume that the
	@ sign is positive. If the source is zero, then the mantissa is
	@ set to 0.
	lsrs	r2, r1, #20
	bfc	r1, #20, #12
	addw	r3, r2, #0x7FF
	subw	r2, r2, #1023
	lsrs	r3, r3, #11
	orrs	r1, r1, r3, lsl #20
	
	@ If the exponent is odd, then multiply mantissa by 2 and subtract
	@ 1 from the exponent.
	ands	r3, r2, #1
	subs	r2, r2, r3
	rsbs	r3, r3, #0
	ands	r4, r1, r3
	ands	r3, r0
	adds	r0, r3
	adcs	r1, r4
	
	@ Left-shift the mantissa by 9 bits to put it in the
	@ 2^61..2^63-1 range (unless it is exactly 0).
	lsls	r1, r1, #9
	orrs	r1, r1, r0, lsr #23
	lsls	r0, r0, #9
	
	@ Compute the square root bit-by-bit.
	@ There are 54 iterations; first 30 can work on top word only.
	@   q = r3 (bit-reversed)
	@   s = r5
	eors	r3, r3
	eors	r5, r5
	orrs	r6, r5, #(1 << ((25)+4))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((25)+4) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << ((25)+3))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((25)+3) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << ((25)+2))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((25)+2) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << ((25)+1))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((25)+1) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << (25))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #((25) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << ((20)+4))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((20)+4) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << ((20)+3))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((20)+3) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << ((20)+2))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((20)+2) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << ((20)+1))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((20)+1) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << (20))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #((20) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << ((15)+4))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((15)+4) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << ((15)+3))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((15)+3) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << ((15)+2))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((15)+2) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << ((15)+1))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((15)+1) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << (15))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #((15) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << ((10)+4))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((10)+4) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << ((10)+3))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((10)+3) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << ((10)+2))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((10)+2) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << ((10)+1))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((10)+1) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << (10))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #((10) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << ((5)+4))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((5)+4) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << ((5)+3))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((5)+3) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << ((5)+2))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((5)+2) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << ((5)+1))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((5)+1) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << (5))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #((5) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << ((0)+4))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((0)+4) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << ((0)+3))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((0)+3) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << ((0)+2))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((0)+2) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << ((0)+1))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #(((0)+1) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r6, r5, #(1 << (0))
	subs	r7, r1, r6
	rrx	r3, r3
	ands	r6, r6, r3, asr #31
	subs	r1, r1, r6
	lsrs	r6, r3, #31
	orrs	r5, r5, r6, lsl #((0) + 1)
	adds	r0, r0
	adcs	r1, r1
	@ Top 30 bits of the result must be reversed: they were
	@ accumulated with rrx (hence from the top bit).
	rbit	r3, r3
	
	@ For the next 24 iterations, we must use two-word operations.
	@   bits of q now accumulate in r4
	@   s is in r6:r5
	eors	r4, r4
	eors	r6, r6
	
	@ First iteration is special because the potential bit goes into
	@ r5, not r6.
	orrs	r7, r6, #(1 << 31)
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r5, r5, r4, lsr #31
	adds	r0, r0
	adcs	r1, r1
	orrs	r7, r6, #(1 << (30))
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r6, r6, r7, lsl #((30) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r7, r6, #(1 << (29))
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r6, r6, r7, lsl #((29) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r7, r6, #(1 << (28))
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r6, r6, r7, lsl #((28) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r7, r6, #(1 << ((24)+3))
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r6, r6, r7, lsl #(((24)+3) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r7, r6, #(1 << ((24)+2))
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r6, r6, r7, lsl #(((24)+2) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r7, r6, #(1 << ((24)+1))
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r6, r6, r7, lsl #(((24)+1) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r7, r6, #(1 << (24))
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r6, r6, r7, lsl #((24) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r7, r6, #(1 << ((20)+3))
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r6, r6, r7, lsl #(((20)+3) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r7, r6, #(1 << ((20)+2))
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r6, r6, r7, lsl #(((20)+2) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r7, r6, #(1 << ((20)+1))
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r6, r6, r7, lsl #(((20)+1) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r7, r6, #(1 << (20))
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r6, r6, r7, lsl #((20) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r7, r6, #(1 << ((16)+3))
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r6, r6, r7, lsl #(((16)+3) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r7, r6, #(1 << ((16)+2))
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r6, r6, r7, lsl #(((16)+2) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r7, r6, #(1 << ((16)+1))
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r6, r6, r7, lsl #(((16)+1) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r7, r6, #(1 << (16))
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r6, r6, r7, lsl #((16) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r7, r6, #(1 << ((12)+3))
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r6, r6, r7, lsl #(((12)+3) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r7, r6, #(1 << ((12)+2))
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r6, r6, r7, lsl #(((12)+2) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r7, r6, #(1 << ((12)+1))
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r6, r6, r7, lsl #(((12)+1) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r7, r6, #(1 << (12))
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r6, r6, r7, lsl #((12) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r7, r6, #(1 << ((8)+3))
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r6, r6, r7, lsl #(((8)+3) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r7, r6, #(1 << ((8)+2))
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r6, r6, r7, lsl #(((8)+2) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r7, r6, #(1 << ((8)+1))
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r6, r6, r7, lsl #(((8)+1) + 1)
	adds	r0, r0
	adcs	r1, r1
	orrs	r7, r6, #(1 << (8))
	subs	r8, r0, r7
	sbcs	r10, r1, r5
	rrx	r4, r4
	ands	r7, r7, r4, asr #31
	ands	r8, r5, r4, asr #31
	subs	r0, r0, r7
	sbcs	r1, r1, r8
	lsrs	r7, r4, #31
	orrs	r6, r6, r7, lsl #((8) + 1)
	adds	r0, r0
	adcs	r1, r1
	@ Put low 24 bits in the right order.
	rbit	r4, r4
	
	@ We have a 54-bit result; compute the 55-th bit as the 'sticky'
	@ bit: it is non-zero if and only if r0:r1 is non-zero. We put the
	@ three low bits (including the sticky bit) in r5.
	orrs	r0, r1
	rsbs	r1, r0, #0
	orrs	r0, r1
	lsls	r5, r4, #1
	orrs	r5, r5, r0, lsr #31
	ands	r5, #0x7
	
	@ Compute the rounding: r6 is set to 0 or 1, and will be added
	@ to the mantissa.
	movs	r6, #0xC8
	lsrs	r6, r5
	ands	r6, #1
	
	@ Put the mantissa (53 bits, in the 2^52..2^53-1 range) in r0:r1
	@ (rounding not applied yet).
	lsrs	r0, r4, #1
	orrs	r0, r0, r3, lsl #23
	lsrs	r1, r3, #9
	
	@ Compute new exponent. This is half the old one (then reencoded
	@ by adding 1023). Exception: if the mantissa is zero, then the
	@ encoded exponent is set to 0. At that point, if the mantissa
	@ is non-zero, then its high bit (bit 52, i.e. bit 20 of r1) is
	@ non-zero. Note that the exponent cannot go out of range.
	lsrs	r2, r2, #1
	addw	r2, r2, #1023
	lsrs	r5, r1, #20
	rsbs	r5, r5, #0
	ands	r2, r5
	
	@ Place exponent. This overwrites the high bit of the mantissa.
	bfi	r1, r2, #20, #11
	
	@ Apply rounding. This may create a carry that will spill into
	@ the exponent, which is exactly what should be done in that case
	@ (i.e. increment the exponent).
	adds	r0, r0, r6
	adcs	r1, r1, #0
	
	pop	{ r4, r5, r6, r7, r8, r10, r11, pc }
	") ../falcon-lazy/fpr.c:1035)
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) "../falcon-lazy/fpr.c":1035:2 -1
     (nil))
(insn 10 6 11 2 (clobber (reg:DI 0 r0 [orig:113 <retval> ] [113])) "../falcon-lazy/fpr.c":1203:1 -1
     (nil))
(insn 11 10 19 2 (use (reg/i:DI 0 r0)) "../falcon-lazy/fpr.c":1203:1 -1
     (expr_list:REG_DEAD (reg/i:DI 0 r0)
        (nil)))
(note 19 11 17 2 NOTE_INSN_EPILOGUE_BEG)
(jump_insn:TI 17 19 18 2 (simple_return) "../falcon-lazy/fpr.c":1203:1 1009 {*thumb2_return}
     (nil)
 -> simple_return)
(barrier 18 17 13)
(note 13 18 14 NOTE_INSN_DELETED)
(note 14 13 0 NOTE_INSN_DELETED)

;; Function falcon_inner_fpr_expm_p63 (falcon_inner_fpr_expm_p63, funcdef_no=23, decl_uid=6737, cgraph_uid=24, symbol_order=43)

(note 1 0 7 NOTE_INSN_DELETED)
(note 7 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 7 15 2 NOTE_INSN_FUNCTION_BEG)
(note 15 4 22 2 NOTE_INSN_DELETED)
(note 22 15 27 2 NOTE_INSN_DELETED)
(note 27 22 32 2 NOTE_INSN_DELETED)
(note 32 27 33 2 NOTE_INSN_DELETED)
(note 33 32 34 2 NOTE_INSN_DELETED)
(note 34 33 46 2 NOTE_INSN_DELETED)
(note 46 34 58 2 NOTE_INSN_DELETED)
(note 58 46 60 2 NOTE_INSN_DELETED)
(note 60 58 65 2 NOTE_INSN_DELETED)
(note 65 60 66 2 NOTE_INSN_DELETED)
(note 66 65 70 2 NOTE_INSN_DELETED)
(note 70 66 71 2 NOTE_INSN_DELETED)
(note 71 70 446 2 NOTE_INSN_DELETED)
(insn/f:TI 446 71 447 2 (parallel [
            (set (mem/c:BLK (pre_modify:SI (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -40 [0xffffffffffffffd8]))) [2  A8])
                (unspec:BLK [
                        (reg:SI 3 r3)
                    ] UNSPEC_PUSH_MULT))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 r10))
            (use (reg:SI 11 fp))
            (use (reg:SI 14 lr))
        ]) "../falcon-lazy/fpr.c":1288:1 378 {*push_multi}
     (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 11 fp)
            (expr_list:REG_DEAD (reg:SI 10 r10)
                (expr_list:REG_DEAD (reg:SI 9 r9)
                    (expr_list:REG_DEAD (reg:SI 8 r8)
                        (expr_list:REG_DEAD (reg:SI 7 r7)
                            (expr_list:REG_DEAD (reg:SI 6 r6)
                                (expr_list:REG_DEAD (reg:SI 5 r5)
                                    (expr_list:REG_DEAD (reg:SI 4 r4)
                                        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                                    (set/f (reg/f:SI 13 sp)
                                                        (plus:SI (reg/f:SI 13 sp)
                                                            (const_int -40 [0xffffffffffffffd8])))
                                                    (set/f (mem/c:SI (reg/f:SI 13 sp) [2  S4 A32])
                                                        (reg:SI 3 r3))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 4 [0x4])) [2  S4 A32])
                                                        (reg:SI 4 r4))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 8 [0x8])) [2  S4 A32])
                                                        (reg:SI 5 r5))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 12 [0xc])) [2  S4 A32])
                                                        (reg:SI 6 r6))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 16 [0x10])) [2  S4 A32])
                                                        (reg:SI 7 r7))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 20 [0x14])) [2  S4 A32])
                                                        (reg:SI 8 r8))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 24 [0x18])) [2  S4 A32])
                                                        (reg:SI 9 r9))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 28 [0x1c])) [2  S4 A32])
                                                        (reg:SI 10 r10))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 32 [0x20])) [2  S4 A32])
                                                        (reg:SI 11 fp))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 36 [0x24])) [2  S4 A32])
                                                        (reg:SI 14 lr))
                                                ])
                                            (nil))))))))))))
(insn/f:TI 447 446 448 2 (parallel [
            (set (mem/c:BLK (pre_modify:SI (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -8 [0xfffffffffffffff8]))) [2  A8])
                (unspec:BLK [
                        (reg:DF 32 s16)
                    ] UNSPEC_PUSH_MULT))
        ]) "../falcon-lazy/fpr.c":1288:1 852 {*push_multi_vfp}
     (expr_list:REG_DEAD (reg:DF 32 s16)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -8 [0xfffffffffffffff8])))
                    (set/f (mem/c:DF (reg/f:SI 13 sp) [2  S8 A64])
                        (reg:DF 32 s16))
                ])
            (nil))))
(note 448 447 419 2 NOTE_INSN_PROLOGUE_END)
(insn:TI 419 448 420 2 (set (reg:SI 32 s16 [orig:555 ccs ] [555])
        (reg:SI 2 r2 [557])) "../falcon-lazy/fpr.c":1288:1 728 {*thumb2_movsi_vfp}
     (expr_list:REG_DEAD (reg:SI 2 r2 [557])
        (nil)))
(insn 420 419 439 2 (set (reg:SI 33 s17 [orig:556 ccs+4 ] [556])
        (reg:SI 3 r3 [orig:558+4 ] [558])) "../falcon-lazy/fpr.c":1288:1 728 {*thumb2_movsi_vfp}
     (expr_list:REG_DEAD (reg:SI 3 r3 [orig:558+4 ] [558])
        (nil)))
(insn:TI 439 420 440 2 (parallel [
            (set (reg:SI 2 r2)
                (const_int 0 [0]))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/fpr.c":1324:16 1016 {*thumb2_movsi_shortim}
     (nil))
(insn 440 439 12 2 (set (reg:SI 3 r3 [+4 ])
        (mem:SI (label_ref 469) [0  S4 A32])) "../falcon-lazy/fpr.c":1324:16 728 {*thumb2_movsi_vfp}
     (nil))
(call_insn:TI 12 440 409 2 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("falcon_inner_fpr_mul") [flags 0x3]  <function_decl 0x14c4de600 falcon_inner_fpr_mul>) [0 falcon_inner_fpr_mul S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "../falcon-lazy/fpr.c":1324:16 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 r2)
        (expr_list:REG_CALL_DECL (symbol_ref:SI ("falcon_inner_fpr_mul") [flags 0x3]  <function_decl 0x14c4de600 falcon_inner_fpr_mul>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:DI (use (reg:DI 0 r0))
            (expr_list:DI (use (reg:DI 2 r2))
                (nil)))))
(insn 409 12 20 2 (set (reg/v:SI 6 r6 [orig:157 cc ] [157])
        (const_int 1085 [0x43d])) "../falcon-lazy/fpr.h":379:5 728 {*thumb2_movsi_vfp}
     (expr_list:REG_EQUAL (const_int 1085 [0x43d])
        (nil)))
(insn:TI 20 409 18 2 (parallel [
            (set (reg:SI 4 r4 [orig:432+4 ] [432])
                (ashift:SI (reg:SI 1 r1 [orig:384 _1+4 ] [384])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/fpr.h":378:11 1013 {*thumb2_shiftsi3_short}
     (nil))
(insn 18 20 412 2 (set (reg/v:SI 7 r7 [orig:153 e ] [153])
        (zero_extract:SI (reg:SI 1 r1 [orig:384 _1+4 ] [384])
            (const_int 11 [0xb])
            (const_int 20 [0x14]))) "../falcon-lazy/fpr.h":377:4 161 {extzv_t2}
     (nil))
(insn:TI 412 18 315 2 (set (reg:SI 2 r2 [246])
        (const_int 1021 [0x3fd])) "../falcon-lazy/fpr.h":387:34 728 {*thumb2_movsi_vfp}
     (expr_list:REG_EQUAL (const_int 1021 [0x3fd])
        (nil)))
(insn 315 412 21 2 (set (reg:SI 8 r8 [orig:423 pretmp_145 ] [423])
        (mem:SI (const:SI (plus:SI (label_ref 469)
                    (const_int 12 [0xc]))) [0  S4 A32])) "../falcon-lazy/fpr.c":1340:21 728 {*thumb2_movsi_vfp}
     (expr_list:REG_EQUAL (const_int 1418525702 [0x548cfc06])
        (nil)))
(insn:TI 21 315 410 2 (set (reg:SI 4 r4 [orig:432+4 ] [432])
        (ior:SI (lshiftrt:SI (reg:SI 0 r0 [orig:383 _1 ] [383])
                (const_int 22 [0x16]))
            (reg:SI 4 r4 [orig:432+4 ] [432]))) "../falcon-lazy/fpr.h":378:11 320 {*orr_shiftsi}
     (nil))
(insn 410 21 413 2 (parallel [
            (set (reg/v:SI 6 r6 [orig:157 cc ] [157])
                (minus:SI (reg/v:SI 6 r6 [orig:157 cc ] [157])
                    (reg/v:SI 7 r7 [orig:153 e ] [153])))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/fpr.h":379:5 1018 {*thumb2_subsi_short}
     (nil))
(insn:TI 413 410 85 2 (parallel [
            (set (reg:SI 2 r2 [246])
                (minus:SI (reg:SI 2 r2 [246])
                    (reg/v:SI 7 r7 [orig:153 e ] [153])))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/fpr.h":387:34 1018 {*thumb2_subsi_short}
     (expr_list:REG_DEAD (reg/v:SI 7 r7 [orig:153 e ] [153])
        (nil)))
(insn 85 413 24 2 (set (reg:SI 7 r7 [orig:211 ivtmp.45 ] [211])
        (mem:SI (const:SI (plus:SI (label_ref 469)
                    (const_int 4 [0x4]))) [0  S4 A32])) 728 {*thumb2_movsi_vfp}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 8 [0x8])))
        (nil)))
(insn:TI 24 85 316 2 (set (reg:SI 4 r4 [orig:434+4 ] [434])
        (and:SI (reg:SI 4 r4 [orig:432+4 ] [432])
            (const_int 1073741823 [0x3fffffff]))) "../falcon-lazy/fpr.h":378:41 90 {*arm_andsi3_insn}
     (nil))
(insn 316 24 87 2 (set (reg:SI 9 r9 [orig:424 pretmp_145+4 ] [424])
        (const_int 54 [0x36])) "../falcon-lazy/fpr.c":1340:21 728 {*thumb2_movsi_vfp}
     (expr_list:REG_EQUAL (const_int 54 [0x36])
        (nil)))
(insn:TI 87 316 26 2 (set (reg/f:SI 10 r10 [orig:209 _134 ] [209])
        (plus:SI (reg:SI 7 r7 [orig:211 ivtmp.45 ] [211])
            (const_int 88 [0x58]))) 7 {*arm_addsi3}
     (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 96 [0x60])))
        (nil)))
(insn:TI 26 87 38 2 (set (reg:SI 5 r5 [orig:416 _63+4 ] [416])
        (ior:SI (reg:SI 4 r4 [orig:434+4 ] [434])
            (const_int 1073741824 [0x40000000]))) "../falcon-lazy/fpr.h":378:41 106 {*iorsi3_insn}
     (expr_list:REG_DEAD (reg:SI 4 r4 [orig:434+4 ] [434])
        (nil)))
(insn 38 26 43 2 (set (reg:SI 4 r4 [437])
        (sign_extract:SI (reg/v:SI 6 r6 [orig:157 cc ] [157])
            (const_int 1 [0x1])
            (const_int 5 [0x5]))) "../falcon-lazy/fpr.h":130:25 160 {*extv_reg}
     (nil))
(insn:TI 43 38 45 2 (set (reg:SI 3 r3 [441])
        (xor:SI (ashift:SI (reg:SI 0 r0 [orig:383 _1 ] [383])
                (const_int 10 [0xa]))
            (reg:SI 5 r5 [orig:416 _63+4 ] [416]))) "../falcon-lazy/fpr.h":130:10 321 {*eor_shiftsi}
     (nil))
(insn:TI 45 43 47 2 (parallel [
            (set (reg:SI 4 r4 [443])
                (and:SI (reg:SI 4 r4 [437])
                    (reg:SI 3 r3 [441])))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/fpr.h":130:23 1012 {*thumb2_alusi3_short}
     (expr_list:REG_DEAD (reg:SI 3 r3 [441])
        (nil)))
(insn:TI 47 45 49 2 (set (reg:SI 3 r3 [orig:445 x ] [445])
        (xor:SI (ashift:SI (reg:SI 0 r0 [orig:383 _1 ] [383])
                (const_int 10 [0xa]))
            (reg:SI 4 r4 [443]))) "../falcon-lazy/fpr.h":130:4 321 {*eor_shiftsi}
     (expr_list:REG_DEAD (reg:SI 4 r4 [443])
        (expr_list:REG_DEAD (reg:SI 0 r0 [orig:383 _1 ] [383])
            (nil))))
(insn 49 47 39 2 (set (reg:SI 0 r0 [241])
        (and:SI (reg/v:SI 6 r6 [orig:157 cc ] [157])
            (const_int 31 [0x1f]))) "../falcon-lazy/fpr.h":131:17 90 {*arm_andsi3_insn}
     (nil))
(insn:TI 39 49 31 2 (set (reg:SI 4 r4 [orig:438+4 ] [438])
        (sign_extract:SI (reg/v:SI 6 r6 [orig:157 cc ] [157])
            (const_int 1 [0x1])
            (const_int 5 [0x5]))) "../falcon-lazy/fpr.h":130:25 160 {*extv_reg}
     (expr_list:REG_DEAD (reg/v:SI 6 r6 [orig:157 cc ] [157])
        (nil)))
(insn 31 39 52 2 (parallel [
            (set (reg:SI 6 r6 [orig:418 t+4 ] [418])
                (const_int 0 [0]))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/fpr.h":392:4 1016 {*thumb2_movsi_shortim}
     (expr_list:REG_EQUIV (const_int 0 [0])
        (nil)))
(insn:TI 52 31 48 2 (parallel [
            (set (reg:SI 3 r3 [447])
                (lshiftrt:SI (reg:SI 3 r3 [orig:445 x ] [445])
                    (reg:SI 0 r0 [241])))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/fpr.h":131:11 1013 {*thumb2_shiftsi3_short}
     (nil))
(insn:TI 48 52 50 2 (set (reg:SI 4 r4 [orig:446 x+4 ] [446])
        (and:SI (not:SI (reg:SI 4 r4 [orig:438+4 ] [438]))
            (reg:SI 5 r5 [orig:416 _63+4 ] [416]))) "../falcon-lazy/fpr.h":130:4 100 {andsi_notsi_si}
     (expr_list:REG_DEAD (reg:SI 5 r5 [orig:416 _63+4 ] [416])
        (nil)))
(insn 50 48 53 2 (set (reg:SI 5 r5 [243])
        (minus:SI (const_int 32 [0x20])
            (reg:SI 0 r0 [241]))) "../falcon-lazy/fpr.h":131:11 45 {*arm_subsi3_insn}
     (nil))
(insn:TI 53 50 54 2 (set (reg:SI 5 r5 [243])
        (ashift:SI (reg:SI 4 r4 [orig:446 x+4 ] [446])
            (reg:SI 5 r5 [243]))) "../falcon-lazy/fpr.h":131:11 147 {*arm_shiftsi3}
     (nil))
(insn:TI 54 53 51 2 (parallel [
            (set (reg:SI 3 r3 [447])
                (ior:SI (reg:SI 3 r3 [447])
                    (reg:SI 5 r5 [243])))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/fpr.h":131:11 1012 {*thumb2_alusi3_short}
     (expr_list:REG_DEAD (reg:SI 5 r5 [243])
        (nil)))
(insn 51 54 57 2 (set (reg:SI 5 r5 [244])
        (plus:SI (reg:SI 0 r0 [241])
            (const_int -32 [0xffffffffffffffe0]))) "../falcon-lazy/fpr.h":131:11 7 {*arm_addsi3}
     (nil))
(insn:TI 57 51 55 2 (set (reg:SI 0 r0 [orig:448+4 ] [448])
        (lshiftrt:SI (reg:SI 4 r4 [orig:446 x+4 ] [446])
            (reg:SI 0 r0 [241]))) "../falcon-lazy/fpr.h":131:11 147 {*arm_shiftsi3}
     (nil))
(insn:TI 55 57 318 2 (set (reg:SI 5 r5 [244])
        (lshiftrt:SI (reg:SI 4 r4 [orig:446 x+4 ] [446])
            (reg:SI 5 r5 [244]))) "../falcon-lazy/fpr.h":131:11 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 4 r4 [orig:446 x+4 ] [446])
        (nil)))
(insn 318 55 68 2 (parallel [
            (set (reg:SI 4 r4 [orig:412 y+4 ] [412])
                (const_int 4 [0x4]))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/fpr.c":1323:4 1016 {*thumb2_movsi_shortim}
     (expr_list:REG_EQUAL (const_int 4 [0x4])
        (nil)))
(insn:TI 68 318 56 2 (set (reg:SI 0 r0 [orig:454+4 ] [454])
        (and:SI (ashiftrt:SI (reg:SI 2 r2 [246])
                (const_int 31 [0x1f]))
            (reg:SI 0 r0 [orig:448+4 ] [448]))) "../falcon-lazy/fpr.h":387:5 322 {*and_shiftsi}
     (nil))
(insn:TI 56 68 317 2 (parallel [
            (set (reg:SI 3 r3 [447])
                (ior:SI (reg:SI 3 r3 [447])
                    (reg:SI 5 r5 [244])))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/fpr.h":131:11 1012 {*thumb2_alusi3_short}
     (expr_list:REG_DEAD (reg:SI 5 r5 [244])
        (nil)))
(insn 317 56 73 2 (set (reg:SI 5 r5 [orig:411 y ] [411])
        (mem:SI (const:SI (plus:SI (label_ref 469)
                    (const_int 8 [0x8]))) [0  S4 A32])) "../falcon-lazy/fpr.c":1323:4 728 {*thumb2_movsi_vfp}
     (expr_list:REG_EQUAL (const_int 1947304867 [0x741183a3])
        (nil)))
(insn:TI 73 317 67 2 (set (reg:SI 0 r0 [orig:458+4 ] [458])
        (xor:SI (ashiftrt:SI (reg:SI 1 r1 [orig:384 _1+4 ] [384])
                (const_int 31 [0x1f]))
            (reg:SI 0 r0 [orig:454+4 ] [454]))) "../falcon-lazy/fpr.h":393:11 321 {*eor_shiftsi}
     (nil))
(insn:TI 67 73 30 2 (set (reg:SI 3 r3 [453])
        (and:SI (ashiftrt:SI (reg:SI 2 r2 [246])
                (const_int 31 [0x1f]))
            (reg:SI 3 r3 [447]))) "../falcon-lazy/fpr.h":387:5 322 {*and_shiftsi}
     (expr_list:REG_DEAD (reg:SI 2 r2 [246])
        (nil)))
(insn:TI 30 67 72 2 (parallel [
            (set (reg:SI 2 r2 [orig:417 t ] [417])
                (lshiftrt:SI (reg:SI 1 r1 [orig:384 _1+4 ] [384])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/fpr.h":392:4 1013 {*thumb2_shiftsi3_short}
     (expr_list:REG_DEAD (reg:SI 1 r1 [orig:384 _1+4 ] [384])
        (nil)))
(insn:TI 72 30 74 2 (set (reg:SI 3 r3 [457])
        (xor:SI (ashiftrt:SI (reg:SI 1 r1 [orig:384 _1+4 ] [384])
                (const_int 31 [0x1f]))
            (reg:SI 3 r3 [453]))) "../falcon-lazy/fpr.h":393:11 321 {*eor_shiftsi}
     (nil))
(insn:TI 74 72 425 2 (parallel [
            (set (reg:CC_C 100 cc)
                (compare:CC_C (plus:SI (reg:SI 3 r3 [457])
                        (reg:SI 2 r2 [orig:417 t ] [417]))
                    (reg:SI 3 r3 [457])))
            (set (reg:SI 2 r2 [459])
                (plus:SI (reg:SI 3 r3 [457])
                    (reg:SI 2 r2 [orig:417 t ] [417])))
        ]) "../falcon-lazy/fpr.h":393:17 17 {addsi3_compare_op1}
     (expr_list:REG_DEAD (reg:SI 3 r3 [457])
        (nil)))
(insn 425 74 75 2 (set (reg:SI 3 r3 [orig:411 y ] [411])
        (reg:SI 5 r5 [orig:411 y ] [411])) "../falcon-lazy/fpr.c":1323:4 728 {*thumb2_movsi_vfp}
     (expr_list:REG_DEAD (reg:SI 5 r5 [orig:411 y ] [411])
        (nil)))
(insn:TI 75 425 76 2 (set (reg:SI 1 r1 [orig:460+4 ] [460])
        (plus:SI (ltu:SI (reg:CC_C 100 cc)
                (const_int 0 [0]))
            (reg:SI 0 r0 [orig:458+4 ] [458]))) "../falcon-lazy/fpr.h":393:17 22 {add0si3_carryin}
     (expr_list:REG_DEAD (reg:CC_C 100 cc)
        (expr_list:REG_DEAD (reg:SI 0 r0 [orig:458+4 ] [458])
            (nil))))
(insn 76 75 426 2 (parallel [
            (set (reg:CC_C 100 cc)
                (compare:CC_C (plus:SI (reg:SI 2 r2 [459])
                        (reg:SI 2 r2 [459]))
                    (reg:SI 2 r2 [459])))
            (set (reg:SI 2 r2 [461])
                (plus:SI (reg:SI 2 r2 [459])
                    (reg:SI 2 r2 [459])))
        ]) "../falcon-lazy/fpr.c":1324:4 17 {addsi3_compare_op1}
     (nil))
(insn:TI 426 76 427 2 (set (reg:SI 0 r0 [orig:412 y+4 ] [412])
        (reg:SI 4 r4 [orig:412 y+4 ] [412])) "../falcon-lazy/fpr.c":1323:4 728 {*thumb2_movsi_vfp}
     (expr_list:REG_DEAD (reg:SI 4 r4 [orig:412 y+4 ] [412])
        (nil)))
(insn 427 426 77 2 (set (reg:SI 4 r4 [orig:423 pretmp_145 ] [423])
        (reg:SI 8 r8 [orig:423 pretmp_145 ] [423])) "../falcon-lazy/fpr.c":1323:4 728 {*thumb2_movsi_vfp}
     (expr_list:REG_DEAD (reg:SI 8 r8 [orig:423 pretmp_145 ] [423])
        (nil)))
(insn:TI 77 427 455 2 (parallel [
            (set (reg:SI 1 r1 [orig:462+4 ] [462])
                (plus:SI (plus:SI (reg:SI 1 r1 [orig:460+4 ] [460])
                        (reg:SI 1 r1 [orig:460+4 ] [460]))
                    (ltu:SI (reg:CC_C 100 cc)
                        (const_int 0 [0]))))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/fpr.c":1324:4 25 {*addsi3_carryin_clobercc}
     (expr_list:REG_DEAD (reg:CC_C 100 cc)
        (nil)))
(jump_insn 455 77 456 2 (set (pc)
        (label_ref 155)) 284 {*arm_jump}
     (nil)
 -> 155)
(barrier 456 455 457)
(code_label 457 456 152 3 12 (nil) [1 uses])
(note 152 457 329 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 329 152 330 3 (set (reg:SI 4 r4 [orig:423 pretmp_145 ] [423])
        (mem:SI (pre_modify:SI (reg:SI 7 r7 [orig:211 ivtmp.45 ] [211])
                (plus:SI (reg:SI 7 r7 [orig:211 ivtmp.45 ] [211])
                    (const_int 8 [0x8]))) [1 MEM[base: _133, offset: 0B]+0 S4 A64])) "../falcon-lazy/fpr.c":1349:8 728 {*thumb2_movsi_vfp}
     (expr_list:REG_INC (reg:SI 7 r7 [orig:211 ivtmp.45 ] [211])
        (nil)))
(insn:TI 330 329 155 3 (set (reg:SI 9 r9 [orig:424 pretmp_145+4 ] [424])
        (mem:SI (plus:SI (reg:SI 7 r7 [orig:211 ivtmp.45 ] [211])
                (const_int 4 [0x4])) [1 MEM[base: _133, offset: 0B]+4 S4 A32])) "../falcon-lazy/fpr.c":1349:8 728 {*thumb2_movsi_vfp}
     (nil))
(code_label 155 330 88 4 9 (nil) [1 uses])
(note 88 155 95 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(note 95 88 97 4 NOTE_INSN_DELETED)
(note 97 95 105 4 NOTE_INSN_DELETED)
(note 105 97 107 4 NOTE_INSN_DELETED)
(note 107 105 116 4 NOTE_INSN_DELETED)
(note 116 107 126 4 NOTE_INSN_DELETED)
(note 126 116 108 4 NOTE_INSN_DELETED)
(insn:TI 108 126 98 4 (parallel [
            (set (reg:SI 11 fp [467])
                (mult:SI (reg:SI 0 r0 [orig:412 y+4 ] [412])
                    (reg:SI 2 r2 [461])))
            (set (reg:SI 14 lr [276])
                (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (reg:SI 0 r0 [orig:412 y+4 ] [412]))
                            (zero_extend:DI (reg:SI 2 r2 [461])))
                        (const_int 32 [0x20]))))
        ]) "../falcon-lazy/fpr.c":1343:21 68 {umull}
     (nil))
(insn:TI 98 108 127 4 (parallel [
            (set (reg:SI 5 r5 [463])
                (mult:SI (reg:SI 3 r3 [orig:411 y ] [411])
                    (reg:SI 2 r2 [461])))
            (set (reg:SI 12 ip [268])
                (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (reg:SI 3 r3 [orig:411 y ] [411]))
                            (zero_extend:DI (reg:SI 2 r2 [461])))
                        (const_int 32 [0x20]))))
        ]) "../falcon-lazy/fpr.c":1344:21 68 {umull}
     (expr_list:REG_UNUSED (reg:SI 5 r5 [463])
        (nil)))
(insn:TI 127 98 111 4 (parallel [
            (set (reg:SI 8 r8 [471])
                (mult:SI (reg:SI 1 r1 [orig:462+4 ] [462])
                    (reg:SI 0 r0 [orig:412 y+4 ] [412])))
            (set (reg:SI 0 r0 [288])
                (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (reg:SI 1 r1 [orig:462+4 ] [462]))
                            (zero_extend:DI (reg:SI 0 r0 [orig:412 y+4 ] [412])))
                        (const_int 32 [0x20]))))
        ]) "../falcon-lazy/fpr.c":1348:21 68 {umull}
     (nil))
(insn:TI 111 127 117 4 (parallel [
            (set (reg:CC_C 100 cc)
                (compare:CC_C (plus:SI (reg:SI 12 ip [268])
                        (reg:SI 11 fp [467]))
                    (reg:SI 12 ip [268])))
            (set (reg:SI 12 ip [orig:407 a ] [407])
                (plus:SI (reg:SI 12 ip [268])
                    (reg:SI 11 fp [467])))
        ]) "../falcon-lazy/fpr.c":1343:5 17 {addsi3_compare_op1}
     (expr_list:REG_DEAD (reg:SI 11 fp [467])
        (nil)))
(insn 117 111 112 4 (parallel [
            (set (reg:SI 5 r5 [orig:409 b ] [409])
                (mult:SI (reg:SI 1 r1 [orig:462+4 ] [462])
                    (reg:SI 3 r3 [orig:411 y ] [411])))
            (set (reg:SI 3 r3 [280])
                (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (reg:SI 1 r1 [orig:462+4 ] [462]))
                            (zero_extend:DI (reg:SI 3 r3 [orig:411 y ] [411])))
                        (const_int 32 [0x20]))))
        ]) "../falcon-lazy/fpr.c":1345:5 68 {umull}
     (nil))
(insn:TI 112 117 130 4 (set (reg:SI 14 lr [orig:408 a+4 ] [408])
        (plus:SI (ltu:SI (reg:CC_C 100 cc)
                (const_int 0 [0]))
            (reg:SI 14 lr [276]))) "../falcon-lazy/fpr.c":1343:5 22 {add0si3_carryin}
     (expr_list:REG_DEAD (reg:CC_C 100 cc)
        (nil)))
(insn 130 112 131 4 (parallel [
            (set (reg:CC_C 100 cc)
                (compare:CC_C (plus:SI (reg:SI 3 r3 [280])
                        (reg:SI 8 r8 [471]))
                    (reg:SI 3 r3 [280])))
            (set (reg:SI 3 r3 [473])
                (plus:SI (reg:SI 3 r3 [280])
                    (reg:SI 8 r8 [471])))
        ]) "../falcon-lazy/fpr.c":1349:5 17 {addsi3_compare_op1}
     (expr_list:REG_DEAD (reg:SI 8 r8 [471])
        (nil)))
(insn:TI 131 130 135 4 (set (reg:SI 0 r0 [orig:474+4 ] [474])
        (plus:SI (ltu:SI (reg:CC_C 100 cc)
                (const_int 0 [0]))
            (reg:SI 0 r0 [288]))) "../falcon-lazy/fpr.c":1349:5 22 {add0si3_carryin}
     (expr_list:REG_DEAD (reg:CC_C 100 cc)
        (nil)))
(insn 135 131 136 4 (parallel [
            (set (reg:CC_C 100 cc)
                (compare:CC_C (plus:SI (reg:SI 3 r3 [473])
                        (reg:SI 14 lr [orig:408 a+4 ] [408]))
                    (reg:SI 3 r3 [473])))
            (set (reg:SI 3 r3 [477])
                (plus:SI (reg:SI 3 r3 [473])
                    (reg:SI 14 lr [orig:408 a+4 ] [408])))
        ]) "../falcon-lazy/fpr.c":1349:5 17 {addsi3_compare_op1}
     (expr_list:REG_DEAD (reg:SI 14 lr [orig:408 a+4 ] [408])
        (nil)))
(insn:TI 136 135 141 4 (set (reg:SI 0 r0 [orig:478+4 ] [478])
        (plus:SI (ltu:SI (reg:CC_C 100 cc)
                (const_int 0 [0]))
            (reg:SI 0 r0 [orig:474+4 ] [474]))) "../falcon-lazy/fpr.c":1349:5 22 {add0si3_carryin}
     (expr_list:REG_DEAD (reg:CC_C 100 cc)
        (nil)))
(insn 141 136 142 4 (parallel [
            (set (reg:CC_C 100 cc)
                (compare:CC_C (plus:SI (reg:SI 12 ip [orig:407 a ] [407])
                        (reg:SI 5 r5 [orig:409 b ] [409]))
                    (reg:SI 12 ip [orig:407 a ] [407])))
            (set (reg:SI 5 r5 [483])
                (plus:SI (reg:SI 12 ip [orig:407 a ] [407])
                    (reg:SI 5 r5 [orig:409 b ] [409])))
        ]) "../falcon-lazy/fpr.c":1347:32 17 {addsi3_compare_op1}
     (expr_list:REG_DEAD (reg:SI 12 ip [orig:407 a ] [407])
        (expr_list:REG_UNUSED (reg:SI 5 r5 [483])
            (nil))))
(insn:TI 142 141 146 4 (set (reg:SI 5 r5 [orig:484+4 ] [484])
        (plus:SI (plus:SI (reg:SI 6 r6 [orig:388 _5+4 ] [388])
                (reg:SI 6 r6 [orig:388 _5+4 ] [388]))
            (ltu:SI (reg:CC_C 100 cc)
                (const_int 0 [0])))) "../falcon-lazy/fpr.c":1347:32 21 {addsi3_carryin}
     (expr_list:REG_DEAD (reg:CC_C 100 cc)
        (expr_list:REG_EQUAL (ltu:SI (reg:CC_C 100 cc)
                (const_int 0 [0]))
            (nil))))
(insn:TI 146 142 147 4 (parallel [
            (set (reg:CC_C 100 cc)
                (compare:CC_C (plus:SI (reg:SI 3 r3 [477])
                        (reg:SI 5 r5 [orig:484+4 ] [484]))
                    (reg:SI 3 r3 [477])))
            (set (reg:SI 3 r3 [487])
                (plus:SI (reg:SI 3 r3 [477])
                    (reg:SI 5 r5 [orig:484+4 ] [484])))
        ]) "../falcon-lazy/fpr.c":1349:5 17 {addsi3_compare_op1}
     (expr_list:REG_DEAD (reg:SI 5 r5 [orig:484+4 ] [484])
        (nil)))
(insn:TI 147 146 148 4 (set (reg:SI 0 r0 [orig:488+4 ] [488])
        (plus:SI (ltu:SI (reg:CC_C 100 cc)
                (const_int 0 [0]))
            (reg:SI 0 r0 [orig:478+4 ] [478]))) "../falcon-lazy/fpr.c":1349:5 22 {add0si3_carryin}
     (expr_list:REG_DEAD (reg:CC_C 100 cc)
        (nil)))
(insn 148 147 149 4 (parallel [
            (set (reg:CC 100 cc)
                (compare:CC (reg:SI 4 r4 [orig:423 pretmp_145 ] [423])
                    (reg:SI 3 r3 [487])))
            (set (reg:SI 3 r3 [orig:411 y ] [411])
                (minus:SI (reg:SI 4 r4 [orig:423 pretmp_145 ] [423])
                    (reg:SI 3 r3 [487])))
        ]) "../falcon-lazy/fpr.c":1349:5 26 {subsi3_compare1}
     (expr_list:REG_DEAD (reg:SI 4 r4 [orig:423 pretmp_145 ] [423])
        (nil)))
(insn:TI 149 148 150 4 (set (reg:SI 0 r0 [orig:412 y+4 ] [412])
        (minus:SI (minus:SI (reg:SI 9 r9 [orig:424 pretmp_145+4 ] [424])
                (reg:SI 0 r0 [orig:488+4 ] [488]))
            (ltu:SI (reg:CC 100 cc)
                (const_int 0 [0])))) "../falcon-lazy/fpr.c":1349:5 29 {subsi3_carryin}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (expr_list:REG_DEAD (reg:SI 9 r9 [orig:424 pretmp_145+4 ] [424])
            (nil))))
(insn 150 149 151 4 (set (reg:CC 100 cc)
        (compare:CC (reg/f:SI 10 r10 [orig:209 _134 ] [209])
            (reg:SI 7 r7 [orig:211 ivtmp.45 ] [211]))) "../falcon-lazy/fpr.c":1325:2 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn:TI 151 150 159 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 457)
            (pc))) "../falcon-lazy/fpr.c":1325:2 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (int_list:REG_BR_PROB 984292428 (nil)))
 -> 457)
(note 159 151 166 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 166 159 173 5 NOTE_INSN_DELETED)
(note 173 166 178 5 NOTE_INSN_DELETED)
(note 178 173 183 5 NOTE_INSN_DELETED)
(note 183 178 184 5 NOTE_INSN_DELETED)
(note 184 183 185 5 NOTE_INSN_DELETED)
(note 185 184 197 5 NOTE_INSN_DELETED)
(note 197 185 209 5 NOTE_INSN_DELETED)
(note 209 197 211 5 NOTE_INSN_DELETED)
(note 211 209 216 5 NOTE_INSN_DELETED)
(note 216 211 217 5 NOTE_INSN_DELETED)
(note 217 216 221 5 NOTE_INSN_DELETED)
(note 221 217 222 5 NOTE_INSN_DELETED)
(note 222 221 293 5 NOTE_INSN_DELETED)
(note 293 222 431 5 NOTE_INSN_DELETED)
(insn:TI 431 293 432 5 (set (reg:SI 5 r5 [orig:411 y ] [411])
        (reg:SI 3 r3 [orig:411 y ] [411])) "../falcon-lazy/fpr.c":1357:16 728 {*thumb2_movsi_vfp}
     (expr_list:REG_DEAD (reg:SI 3 r3 [orig:411 y ] [411])
        (nil)))
(insn 432 431 422 5 (set (reg:SI 4 r4 [orig:412 y+4 ] [412])
        (reg:SI 0 r0 [orig:412 y+4 ] [412])) "../falcon-lazy/fpr.c":1357:16 728 {*thumb2_movsi_vfp}
     (expr_list:REG_DEAD (reg:SI 0 r0 [orig:412 y+4 ] [412])
        (nil)))
(insn:TI 422 432 421 5 (set (reg:SI 1 r1 [+4 ])
        (reg:SI 33 s17 [orig:556 ccs+4 ] [556])) "../falcon-lazy/fpr.c":1357:16 728 {*thumb2_movsi_vfp}
     (expr_list:REG_DEAD (reg:SI 33 s17 [orig:556 ccs+4 ] [556])
        (nil)))
(insn 421 422 434 5 (set (reg:SI 0 r0)
        (reg:SI 32 s16 [orig:555 ccs ] [555])) "../falcon-lazy/fpr.c":1357:16 728 {*thumb2_movsi_vfp}
     (expr_list:REG_DEAD (reg:SI 32 s16 [orig:555 ccs ] [555])
        (nil)))
(insn:TI 434 421 435 5 (parallel [
            (set (reg:SI 2 r2)
                (const_int 0 [0]))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/fpr.c":1357:16 1016 {*thumb2_movsi_shortim}
     (nil))
(insn 435 434 163 5 (set (reg:SI 3 r3 [+4 ])
        (mem:SI (label_ref 469) [0  S4 A32])) "../falcon-lazy/fpr.c":1357:16 728 {*thumb2_movsi_vfp}
     (nil))
(call_insn:TI 163 435 403 5 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("falcon_inner_fpr_mul") [flags 0x3]  <function_decl 0x14c4de600 falcon_inner_fpr_mul>) [0 falcon_inner_fpr_mul S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "../falcon-lazy/fpr.c":1357:16 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 r2)
        (expr_list:REG_CALL_DECL (symbol_ref:SI ("falcon_inner_fpr_mul") [flags 0x3]  <function_decl 0x14c4de600 falcon_inner_fpr_mul>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:DI (use (reg:DI 0 r0))
            (expr_list:DI (use (reg:DI 2 r2))
                (nil)))))
(insn 403 163 171 5 (set (reg/v:SI 8 r8 [orig:184 cc ] [184])
        (const_int 1085 [0x43d])) "../falcon-lazy/fpr.h":379:5 728 {*thumb2_movsi_vfp}
     (expr_list:REG_EQUAL (const_int 1085 [0x43d])
        (nil)))
(insn:TI 171 403 406 5 (parallel [
            (set (reg:SI 2 r2 [orig:492+4 ] [492])
                (ashift:SI (reg:SI 1 r1 [orig:390 _15+4 ] [390])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/fpr.h":378:11 1013 {*thumb2_shiftsi3_short}
     (nil))
(insn 406 171 181 5 (set (reg:SI 3 r3 [330])
        (const_int 1021 [0x3fd])) "../falcon-lazy/fpr.h":387:34 728 {*thumb2_movsi_vfp}
     (expr_list:REG_EQUAL (const_int 1021 [0x3fd])
        (nil)))
(insn:TI 181 406 172 5 (set (reg:SI 12 ip [orig:421 t ] [421])
        (lshiftrt:SI (reg:SI 1 r1 [orig:390 _15+4 ] [390])
            (const_int 31 [0x1f]))) "../falcon-lazy/fpr.h":392:4 147 {*arm_shiftsi3}
     (nil))
(insn:TI 172 181 175 5 (set (reg:SI 2 r2 [orig:492+4 ] [492])
        (ior:SI (lshiftrt:SI (reg:SI 0 r0 [orig:389 _15 ] [389])
                (const_int 22 [0x16]))
            (reg:SI 2 r2 [orig:492+4 ] [492]))) "../falcon-lazy/fpr.h":378:11 320 {*orr_shiftsi}
     (nil))
(insn:TI 175 172 169 5 (set (reg:SI 7 r7 [orig:494+4 ] [494])
        (and:SI (reg:SI 2 r2 [orig:492+4 ] [492])
            (const_int 1073741823 [0x3fffffff]))) "../falcon-lazy/fpr.h":378:41 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 2 r2 [orig:492+4 ] [492])
        (nil)))
(insn 169 175 177 5 (set (reg/v:SI 2 r2 [orig:180 e ] [180])
        (zero_extract:SI (reg:SI 1 r1 [orig:390 _15+4 ] [390])
            (const_int 11 [0xb])
            (const_int 20 [0x14]))) "../falcon-lazy/fpr.h":377:4 161 {extzv_t2}
     (nil))
(insn:TI 177 169 404 5 (set (reg:SI 14 lr [orig:420 _91+4 ] [420])
        (ior:SI (reg:SI 7 r7 [orig:494+4 ] [494])
            (const_int 1073741824 [0x40000000]))) "../falcon-lazy/fpr.h":378:41 106 {*iorsi3_insn}
     (expr_list:REG_DEAD (reg:SI 7 r7 [orig:494+4 ] [494])
        (nil)))
(insn 404 177 407 5 (set (reg/v:SI 8 r8 [orig:184 cc ] [184])
        (minus:SI (reg/v:SI 8 r8 [orig:184 cc ] [184])
            (reg/v:SI 2 r2 [orig:180 e ] [180]))) "../falcon-lazy/fpr.h":379:5 45 {*arm_subsi3_insn}
     (nil))
(insn:TI 407 404 189 5 (parallel [
            (set (reg:SI 3 r3 [330])
                (minus:SI (reg:SI 3 r3 [330])
                    (reg/v:SI 2 r2 [orig:180 e ] [180])))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/fpr.h":387:34 1018 {*thumb2_subsi_short}
     (expr_list:REG_DEAD (reg/v:SI 2 r2 [orig:180 e ] [180])
        (nil)))
(insn:TI 189 407 194 5 (set (reg:SI 7 r7 [497])
        (sign_extract:SI (reg/v:SI 8 r8 [orig:184 cc ] [184])
            (const_int 1 [0x1])
            (const_int 5 [0x5]))) "../falcon-lazy/fpr.h":130:25 160 {*extv_reg}
     (nil))
(insn 194 189 196 5 (set (reg:SI 2 r2 [501])
        (xor:SI (ashift:SI (reg:SI 0 r0 [orig:389 _15 ] [389])
                (const_int 10 [0xa]))
            (reg:SI 14 lr [orig:420 _91+4 ] [420]))) "../falcon-lazy/fpr.h":130:10 321 {*eor_shiftsi}
     (nil))
(insn:TI 196 194 198 5 (parallel [
            (set (reg:SI 7 r7 [503])
                (and:SI (reg:SI 7 r7 [497])
                    (reg:SI 2 r2 [501])))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/fpr.h":130:23 1012 {*thumb2_alusi3_short}
     (expr_list:REG_DEAD (reg:SI 2 r2 [501])
        (nil)))
(insn:TI 198 196 200 5 (set (reg:SI 2 r2 [orig:505 x ] [505])
        (xor:SI (ashift:SI (reg:SI 0 r0 [orig:389 _15 ] [389])
                (const_int 10 [0xa]))
            (reg:SI 7 r7 [503]))) "../falcon-lazy/fpr.h":130:4 321 {*eor_shiftsi}
     (expr_list:REG_DEAD (reg:SI 7 r7 [503])
        (expr_list:REG_DEAD (reg:SI 0 r0 [orig:389 _15 ] [389])
            (nil))))
(insn 200 198 190 5 (set (reg:SI 0 r0 [325])
        (and:SI (reg/v:SI 8 r8 [orig:184 cc ] [184])
            (const_int 31 [0x1f]))) "../falcon-lazy/fpr.h":131:17 90 {*arm_andsi3_insn}
     (nil))
(insn:TI 190 200 203 5 (set (reg:SI 7 r7 [orig:498+4 ] [498])
        (sign_extract:SI (reg/v:SI 8 r8 [orig:184 cc ] [184])
            (const_int 1 [0x1])
            (const_int 5 [0x5]))) "../falcon-lazy/fpr.h":130:25 160 {*extv_reg}
     (expr_list:REG_DEAD (reg/v:SI 8 r8 [orig:184 cc ] [184])
        (nil)))
(insn:TI 203 190 199 5 (parallel [
            (set (reg:SI 2 r2 [507])
                (lshiftrt:SI (reg:SI 2 r2 [orig:505 x ] [505])
                    (reg:SI 0 r0 [325])))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/fpr.h":131:11 1013 {*thumb2_shiftsi3_short}
     (nil))
(insn:TI 199 203 201 5 (set (reg:SI 7 r7 [orig:506 x+4 ] [506])
        (and:SI (not:SI (reg:SI 7 r7 [orig:498+4 ] [498]))
            (reg:SI 14 lr [orig:420 _91+4 ] [420]))) "../falcon-lazy/fpr.h":130:4 100 {andsi_notsi_si}
     (expr_list:REG_DEAD (reg:SI 14 lr [orig:420 _91+4 ] [420])
        (nil)))
(insn 201 199 204 5 (set (reg:SI 14 lr [327])
        (minus:SI (const_int 32 [0x20])
            (reg:SI 0 r0 [325]))) "../falcon-lazy/fpr.h":131:11 45 {*arm_subsi3_insn}
     (nil))
(insn:TI 204 201 205 5 (set (reg:SI 14 lr [327])
        (ashift:SI (reg:SI 7 r7 [orig:506 x+4 ] [506])
            (reg:SI 14 lr [327]))) "../falcon-lazy/fpr.h":131:11 147 {*arm_shiftsi3}
     (nil))
(insn:TI 205 204 202 5 (set (reg:SI 2 r2 [507])
        (ior:SI (reg:SI 2 r2 [507])
            (reg:SI 14 lr [327]))) "../falcon-lazy/fpr.h":131:11 106 {*iorsi3_insn}
     (expr_list:REG_DEAD (reg:SI 14 lr [327])
        (nil)))
(insn 202 205 208 5 (set (reg:SI 14 lr [328])
        (plus:SI (reg:SI 0 r0 [325])
            (const_int -32 [0xffffffffffffffe0]))) "../falcon-lazy/fpr.h":131:11 7 {*arm_addsi3}
     (nil))
(insn:TI 208 202 206 5 (set (reg:SI 0 r0 [orig:508+4 ] [508])
        (lshiftrt:SI (reg:SI 7 r7 [orig:506 x+4 ] [506])
            (reg:SI 0 r0 [325]))) "../falcon-lazy/fpr.h":131:11 147 {*arm_shiftsi3}
     (nil))
(insn:TI 206 208 219 5 (set (reg:SI 14 lr [328])
        (lshiftrt:SI (reg:SI 7 r7 [orig:506 x+4 ] [506])
            (reg:SI 14 lr [328]))) "../falcon-lazy/fpr.h":131:11 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 7 r7 [orig:506 x+4 ] [506])
        (nil)))
(insn:TI 219 206 207 5 (set (reg:SI 0 r0 [orig:514+4 ] [514])
        (and:SI (ashiftrt:SI (reg:SI 3 r3 [330])
                (const_int 31 [0x1f]))
            (reg:SI 0 r0 [orig:508+4 ] [508]))) "../falcon-lazy/fpr.h":387:5 322 {*and_shiftsi}
     (nil))
(insn:TI 207 219 224 5 (set (reg:SI 2 r2 [507])
        (ior:SI (reg:SI 2 r2 [507])
            (reg:SI 14 lr [328]))) "../falcon-lazy/fpr.h":131:11 106 {*iorsi3_insn}
     (nil))
(insn:TI 224 207 218 5 (set (reg:SI 0 r0 [orig:518+4 ] [518])
        (xor:SI (ashiftrt:SI (reg:SI 1 r1 [orig:390 _15+4 ] [390])
                (const_int 31 [0x1f]))
            (reg:SI 0 r0 [orig:514+4 ] [514]))) "../falcon-lazy/fpr.h":393:11 321 {*eor_shiftsi}
     (nil))
(insn:TI 218 224 223 5 (set (reg:SI 2 r2 [513])
        (and:SI (ashiftrt:SI (reg:SI 3 r3 [330])
                (const_int 31 [0x1f]))
            (reg:SI 2 r2 [507]))) "../falcon-lazy/fpr.h":387:5 322 {*and_shiftsi}
     (expr_list:REG_DEAD (reg:SI 3 r3 [330])
        (nil)))
(insn:TI 223 218 225 5 (set (reg:SI 3 r3 [517])
        (xor:SI (ashiftrt:SI (reg:SI 1 r1 [orig:390 _15+4 ] [390])
                (const_int 31 [0x1f]))
            (reg:SI 2 r2 [513]))) "../falcon-lazy/fpr.h":393:11 321 {*eor_shiftsi}
     (expr_list:REG_DEAD (reg:SI 2 r2 [513])
        (expr_list:REG_DEAD (reg:SI 1 r1 [orig:390 _15+4 ] [390])
            (nil))))
(insn:TI 225 223 226 5 (parallel [
            (set (reg:CC_C 100 cc)
                (compare:CC_C (plus:SI (reg:SI 3 r3 [517])
                        (reg:SI 12 ip [orig:421 t ] [421]))
                    (reg:SI 3 r3 [517])))
            (set (reg:SI 3 r3 [519])
                (plus:SI (reg:SI 3 r3 [517])
                    (reg:SI 12 ip [orig:421 t ] [421])))
        ]) "../falcon-lazy/fpr.h":393:17 17 {addsi3_compare_op1}
     (expr_list:REG_DEAD (reg:SI 12 ip [orig:421 t ] [421])
        (nil)))
(insn:TI 226 225 227 5 (set (reg:SI 1 r1 [orig:520+4 ] [520])
        (plus:SI (ltu:SI (reg:CC_C 100 cc)
                (const_int 0 [0]))
            (reg:SI 0 r0 [orig:518+4 ] [518]))) "../falcon-lazy/fpr.h":393:17 22 {add0si3_carryin}
     (expr_list:REG_DEAD (reg:CC_C 100 cc)
        (expr_list:REG_DEAD (reg:SI 0 r0 [orig:518+4 ] [518])
            (nil))))
(insn 227 226 243 5 (parallel [
            (set (reg:CC_C 100 cc)
                (compare:CC_C (plus:SI (reg:SI 3 r3 [519])
                        (reg:SI 3 r3 [519]))
                    (reg:SI 3 r3 [519])))
            (set (reg:SI 3 r3 [521])
                (plus:SI (reg:SI 3 r3 [519])
                    (reg:SI 3 r3 [519])))
        ]) "../falcon-lazy/fpr.c":1357:4 17 {addsi3_compare_op1}
     (nil))
(insn:TI 243 227 228 5 (parallel [
            (set (reg:SI 0 r0 [523])
                (mult:SI (reg:SI 3 r3 [521])
                    (reg:SI 5 r5 [orig:411 y ] [411])))
            (set (reg:SI 2 r2 [orig:524+4 ] [524])
                (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (reg:SI 3 r3 [521]))
                            (zero_extend:DI (reg:SI 5 r5 [orig:411 y ] [411])))
                        (const_int 32 [0x20]))))
        ]) "../falcon-lazy/fpr.c":1363:20 68 {umull}
     (expr_list:REG_UNUSED (reg:SI 0 r0 [523])
        (nil)))
(insn 228 243 253 5 (parallel [
            (set (reg:SI 1 r1 [orig:522+4 ] [522])
                (plus:SI (plus:SI (reg:SI 1 r1 [orig:520+4 ] [520])
                        (reg:SI 1 r1 [orig:520+4 ] [520]))
                    (ltu:SI (reg:CC_C 100 cc)
                        (const_int 0 [0]))))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/fpr.c":1357:4 25 {*addsi3_carryin_clobercc}
     (expr_list:REG_DEAD (reg:CC_C 100 cc)
        (nil)))
(insn:TI 253 228 257 5 (parallel [
            (set (reg:SI 3 r3 [527])
                (mult:SI (reg:SI 4 r4 [orig:412 y+4 ] [412])
                    (reg:SI 3 r3 [521])))
            (set (reg:SI 0 r0 [orig:528+4 ] [528])
                (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (reg:SI 4 r4 [orig:412 y+4 ] [412]))
                            (zero_extend:DI (reg:SI 3 r3 [521])))
                        (const_int 32 [0x20]))))
        ]) "../falcon-lazy/fpr.c":1362:20 68 {umull}
     (nil))
(insn:TI 257 253 258 5 (parallel [
            (set (reg:CC_C 100 cc)
                (compare:CC_C (plus:SI (reg:SI 2 r2 [orig:524+4 ] [524])
                        (reg:SI 3 r3 [527]))
                    (reg:SI 2 r2 [orig:524+4 ] [524])))
            (set (reg:SI 3 r3 [orig:401 a ] [401])
                (plus:SI (reg:SI 2 r2 [orig:524+4 ] [524])
                    (reg:SI 3 r3 [527])))
        ]) "../falcon-lazy/fpr.c":1362:4 17 {addsi3_compare_op1}
     (expr_list:REG_DEAD (reg:SI 2 r2 [orig:524+4 ] [524])
        (nil)))
(insn:TI 258 257 262 5 (set (reg:SI 2 r2 [orig:402 a+4 ] [402])
        (plus:SI (ltu:SI (reg:CC_C 100 cc)
                (const_int 0 [0]))
            (reg:SI 0 r0 [orig:528+4 ] [528]))) "../falcon-lazy/fpr.c":1362:4 22 {add0si3_carryin}
     (expr_list:REG_DEAD (reg:CC_C 100 cc)
        (expr_list:REG_DEAD (reg:SI 0 r0 [orig:528+4 ] [528])
            (nil))))
(insn 262 258 272 5 (parallel [
            (set (reg:SI 5 r5 [orig:403 b ] [403])
                (mult:SI (reg:SI 1 r1 [orig:522+4 ] [522])
                    (reg:SI 5 r5 [orig:411 y ] [411])))
            (set (reg:SI 0 r0 [orig:404 b+4 ] [404])
                (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (reg:SI 1 r1 [orig:522+4 ] [522]))
                            (zero_extend:DI (reg:SI 5 r5 [orig:411 y ] [411])))
                        (const_int 32 [0x20]))))
        ]) "../falcon-lazy/fpr.c":1364:4 68 {umull}
     (nil))
(insn:TI 272 262 276 5 (parallel [
            (set (reg:SI 4 r4 [533])
                (mult:SI (reg:SI 1 r1 [orig:522+4 ] [522])
                    (reg:SI 4 r4 [orig:412 y+4 ] [412])))
            (set (reg:SI 1 r1 [orig:534+4 ] [534])
                (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (reg:SI 1 r1 [orig:522+4 ] [522]))
                            (zero_extend:DI (reg:SI 4 r4 [orig:412 y+4 ] [412])))
                        (const_int 32 [0x20]))))
        ]) "../falcon-lazy/fpr.c":1367:20 68 {umull}
     (nil))
(insn:TI 276 272 277 5 (parallel [
            (set (reg:CC_C 100 cc)
                (compare:CC_C (plus:SI (reg:SI 0 r0 [orig:404 b+4 ] [404])
                        (reg:SI 4 r4 [533]))
                    (reg:SI 0 r0 [orig:404 b+4 ] [404])))
            (set (reg:SI 4 r4 [535])
                (plus:SI (reg:SI 0 r0 [orig:404 b+4 ] [404])
                    (reg:SI 4 r4 [533])))
        ]) "../falcon-lazy/fpr.c":1367:4 17 {addsi3_compare_op1}
     (expr_list:REG_DEAD (reg:SI 0 r0 [orig:404 b+4 ] [404])
        (nil)))
(insn:TI 277 276 281 5 (set (reg:SI 1 r1 [orig:536+4 ] [536])
        (plus:SI (ltu:SI (reg:CC_C 100 cc)
                (const_int 0 [0]))
            (reg:SI 1 r1 [orig:534+4 ] [534]))) "../falcon-lazy/fpr.c":1367:4 22 {add0si3_carryin}
     (expr_list:REG_DEAD (reg:CC_C 100 cc)
        (nil)))
(insn 281 277 282 5 (parallel [
            (set (reg:CC_C 100 cc)
                (compare:CC_C (plus:SI (reg:SI 4 r4 [535])
                        (reg:SI 2 r2 [orig:402 a+4 ] [402]))
                    (reg:SI 4 r4 [535])))
            (set (reg:SI 0 r0 [539])
                (plus:SI (reg:SI 4 r4 [535])
                    (reg:SI 2 r2 [orig:402 a+4 ] [402])))
        ]) "../falcon-lazy/fpr.c":1367:4 17 {addsi3_compare_op1}
     (expr_list:REG_DEAD (reg:SI 4 r4 [535])
        (expr_list:REG_DEAD (reg:SI 2 r2 [orig:402 a+4 ] [402])
            (nil))))
(insn:TI 282 281 287 5 (set (reg:SI 1 r1 [orig:540+4 ] [540])
        (plus:SI (ltu:SI (reg:CC_C 100 cc)
                (const_int 0 [0]))
            (reg:SI 1 r1 [orig:536+4 ] [536]))) "../falcon-lazy/fpr.c":1367:4 22 {add0si3_carryin}
     (expr_list:REG_DEAD (reg:CC_C 100 cc)
        (nil)))
(insn 287 282 288 5 (parallel [
            (set (reg:CC_C 100 cc)
                (compare:CC_C (plus:SI (reg:SI 3 r3 [orig:401 a ] [401])
                        (reg:SI 5 r5 [orig:403 b ] [403]))
                    (reg:SI 3 r3 [orig:401 a ] [401])))
            (set (reg:SI 5 r5 [545])
                (plus:SI (reg:SI 3 r3 [orig:401 a ] [401])
                    (reg:SI 5 r5 [orig:403 b ] [403])))
        ]) "../falcon-lazy/fpr.c":1366:31 17 {addsi3_compare_op1}
     (expr_list:REG_DEAD (reg:SI 3 r3 [orig:401 a ] [401])
        (expr_list:REG_UNUSED (reg:SI 5 r5 [545])
            (nil))))
(insn:TI 288 287 466 5 (parallel [
            (set (reg:SI 6 r6 [orig:546+4 ] [546])
                (plus:SI (plus:SI (reg:SI 6 r6 [orig:388 _5+4 ] [388])
                        (reg:SI 6 r6 [orig:388 _5+4 ] [388]))
                    (ltu:SI (reg:CC_C 100 cc)
                        (const_int 0 [0]))))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/fpr.c":1366:31 25 {*addsi3_carryin_clobercc}
     (expr_list:REG_DEAD (reg:CC_C 100 cc)
        (nil)))
(note 466 288 450 5 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 450 466 292 5 (parallel [
            (set/f (reg/f:SI 13 sp)
                (plus:SI (reg/f:SI 13 sp)
                    (const_int 8 [0x8])))
            (set/f (reg:DF 32 s16)
                (mem/c:DF (reg/f:SI 13 sp) [2  S8 A64]))
        ]) "../falcon-lazy/fpr.c":1370:1 384 {*vfp_pop_multiple_with_writeback}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:SI 13 sp)
            (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DF 32 s16)
            (nil))))
(insn:TI 292 450 358 5 (parallel [
            (set (reg:CC_C 100 cc)
                (compare:CC_C (plus:SI (reg:SI 0 r0 [539])
                        (reg:SI 6 r6 [orig:546+4 ] [546]))
                    (reg:SI 0 r0 [539])))
            (set (reg:SI 0 r0 [orig:529 y ] [529])
                (plus:SI (reg:SI 0 r0 [539])
                    (reg:SI 6 r6 [orig:546+4 ] [546])))
        ]) "../falcon-lazy/fpr.c":1367:4 17 {addsi3_compare_op1}
     (expr_list:REG_DEAD (reg:SI 6 r6 [orig:546+4 ] [546])
        (nil)))
(insn:TI 358 292 299 5 (set (reg:SI 1 r1 [+4 ])
        (plus:SI (ltu:SI (reg:CC_C 100 cc)
                (const_int 0 [0]))
            (reg:SI 1 r1 [orig:540+4 ] [540]))) "../falcon-lazy/fpr.c":1370:1 22 {add0si3_carryin}
     (expr_list:REG_DEAD (reg:CC_C 100 cc)
        (nil)))
(insn 299 358 451 5 (use (reg/i:DI 0 r0)) "../falcon-lazy/fpr.c":1370:1 -1
     (nil))
(jump_insn:TI 451 299 454 5 (parallel [
            (return)
            (set/f (reg/f:SI 13 sp)
                (plus:SI (reg/f:SI 13 sp)
                    (const_int 40 [0x28])))
            (set/f (reg:SI 3 r3)
                (mem/c:SI (reg/f:SI 13 sp) [2  S4 A32]))
            (set/f (reg:SI 4 r4)
                (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                        (const_int 4 [0x4])) [2  S4 A32]))
            (set/f (reg:SI 5 r5)
                (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                        (const_int 8 [0x8])) [2  S4 A32]))
            (set/f (reg:SI 6 r6)
                (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                        (const_int 12 [0xc])) [2  S4 A32]))
            (set/f (reg:SI 7 r7)
                (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                        (const_int 16 [0x10])) [2  S4 A32]))
            (set/f (reg:SI 8 r8)
                (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                        (const_int 20 [0x14])) [2  S4 A32]))
            (set/f (reg:SI 9 r9)
                (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                        (const_int 24 [0x18])) [2  S4 A32]))
            (set/f (reg:SI 10 r10)
                (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                        (const_int 28 [0x1c])) [2  S4 A32]))
            (set/f (reg:SI 11 fp)
                (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                        (const_int 32 [0x20])) [2  S4 A32]))
            (set/f (reg:SI 15 pc)
                (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                        (const_int 36 [0x24])) [2  S4 A32]))
        ]) "../falcon-lazy/fpr.c":1370:1 381 {*pop_multiple_with_writeback_and_return}
     (expr_list:REG_UNUSED (reg:SI 15 pc)
        (expr_list:REG_UNUSED (reg:SI 3 r3)
            (expr_list:REG_CFA_RESTORE (reg:SI 11 fp)
                (expr_list:REG_CFA_RESTORE (reg:SI 10 r10)
                    (expr_list:REG_CFA_RESTORE (reg:SI 9 r9)
                        (expr_list:REG_CFA_RESTORE (reg:SI 8 r8)
                            (expr_list:REG_CFA_RESTORE (reg:SI 7 r7)
                                (expr_list:REG_CFA_RESTORE (reg:SI 6 r6)
                                    (expr_list:REG_CFA_RESTORE (reg:SI 5 r5)
                                        (expr_list:REG_CFA_RESTORE (reg:SI 4 r4)
                                            (expr_list:REG_CFA_RESTORE (reg:SI 3 r3)
                                                (nil))))))))))))
 -> return)
(barrier 454 451 467)
(code_label 467 454 468 14 (nil) [0 uses])
(insn 468 467 469 (unspec_volatile [
            (const_int 0 [0])
        ] VUNSPEC_ALIGN) 385 {align_4}
     (nil))
(code_label 469 468 470 13 (nil) [0 uses])
(insn 470 469 471 (unspec_volatile [
            (const_int 1138753536 [0x43e00000])
        ] VUNSPEC_POOL_4) 390 {consttable_4}
     (nil))
(insn 471 470 472 (unspec_volatile [
            (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 8 [0x8])))
        ] VUNSPEC_POOL_4) 390 {consttable_4}
     (nil))
(insn 472 471 473 (unspec_volatile [
            (const_int 1947304867 [0x741183a3])
        ] VUNSPEC_POOL_4) 390 {consttable_4}
     (nil))
(insn 473 472 474 (unspec_volatile [
            (const_int 1418525702 [0x548cfc06])
        ] VUNSPEC_POOL_4) 390 {consttable_4}
     (nil))
(insn 474 473 475 (unspec_volatile [
            (const_int 0 [0])
        ] VUNSPEC_POOL_END) 387 {consttable_end}
     (nil))
(barrier 475 474 423)
(note 423 475 433 NOTE_INSN_DELETED)
(note 433 423 0 NOTE_INSN_DELETED)
