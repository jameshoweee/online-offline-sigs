
;; Function __sputc_r (null)
;; enabled by -tree-original


{
  if ( --_p->_w >= 0 || _p->_w >= _p->_lbfsize && (unsigned char) _c != 10)
    {
      return (int) (*_p->_p++  = (unsigned char) _c);
    }
  else
    {
      return __swbuf_r (_ptr, _c, _p);
    }
}


;; Function _getchar_unlocked (null)
;; enabled by -tree-original


{
  struct _reent * _ptr;

    struct _reent * _ptr;
  _ptr = _impure_ptr;
  return  --_ptr->_stdin->_r < 0 ? __srget_r (_ptr, (struct FILE *) _ptr->_stdin) : (int) *_ptr->_stdin->_p++ ;
}


;; Function _putchar_unlocked (null)
;; enabled by -tree-original


{
  struct _reent * _ptr;

    struct _reent * _ptr;
  _ptr = _impure_ptr;
  return __sputc_r (_ptr, _c, (struct FILE *) _ptr->_stdout);
}


;; Function set_fpu_cw (null)
;; enabled by -tree-original


{
  return x;
}


;; Function fpr_ursh (null)
;; enabled by -tree-original


{
  x = (long long unsigned int) (x >> 32 ^ x) & -(long long unsigned int) (n >> 5) ^ (long long unsigned int) x;
  return x >> (n & 31);
}


;; Function fpr_irsh (null)
;; enabled by -tree-original


{
  x = (long long int) (x >> 32 ^ x) & -(long long int) (n >> 5) ^ (long long int) x;
  return x >> (n & 31);
}


;; Function fpr_ulsh (null)
;; enabled by -tree-original


{
  x = (long long unsigned int) (x << 32 ^ x) & -(long long unsigned int) (n >> 5) ^ (long long unsigned int) x;
  return x << (n & 31);
}


;; Function FPR (null)
;; enabled by -tree-original


{
  fpr x;
  uint32_t t;
  unsigned int f;

    fpr x;
    uint32_t t;
    unsigned int f;
  e = e + 1076;
  t = (long unsigned int) e >> 31;
  m = (long long unsigned int) t + 18446744073709551615 & (long long unsigned int) m;
  t = (long unsigned int) (m >> 54);
  e = -(int) t & e;
  x = ((long long unsigned int) s << 63 | (long long unsigned int) (m >> 2)) + ((long long unsigned int) (long unsigned int) e << 52);
  f = (unsigned int) m & 7;
  x = ((fpr) (200 >> f) & 1) + x;
  return x;
}


;; Function fpr_of (null)
;; enabled by -tree-original


{
  return falcon_inner_fpr_scaled (i, 0);
}


;; Function fpr_rint (null)
;; enabled by -tree-original


{
  uint64_t m;
  uint64_t d;
  int e;
  uint32_t s;
  uint32_t dd;
  uint32_t f;

    uint64_t m;
    uint64_t d;
    int e;
    uint32_t s;
    uint32_t dd;
    uint32_t f;
  m = (long long unsigned int) (x << 10) & 4611686018427387903 | 4611686018427387904;
  e = 1085 - ((int) (x >> 52) & 2047);
  m = -(long long unsigned int) ((long unsigned int) (e + -64) >> 31) & (long long unsigned int) m;
  e = e & 63;
  d = fpr_ulsh (m, 63 - e);
  dd = (long unsigned int) d | (long unsigned int) (d >> 32) & 536870911;
  f = (long unsigned int) (d >> 61) | (long unsigned int) ((-dd | dd) >> 31);
  m = (long long unsigned int) fpr_ursh (m, e) + ((long long unsigned int) (200 >> f) & 1);
  s = (long unsigned int) (x >> 63);
  return (int64_t) ((-(long long int) s ^ (long long int) m) + (long long int) s);
}


;; Function fpr_floor (null)
;; enabled by -tree-original


{
  uint64_t t;
  int64_t xi;
  int e;
  int cc;

    uint64_t t;
    int64_t xi;
    int e;
    int cc;
  e = (int) (x >> 52) & 2047;
  t = x >> 63;
  xi = (long long int) ((long long unsigned int) (x << 10) | 4611686018427387904) & 9223372036854775807;
  xi = (-(long long int) t ^ (long long int) xi) + (long long int) t;
  cc = 1085 - e;
  xi = fpr_irsh (xi, cc & 63);
  xi = (-(long long int) t ^ (long long int) xi) & -(long long int) ((long unsigned int) (63 - cc) >> 31) ^ (long long int) xi;
  return xi;
}


;; Function fpr_trunc (null)
;; enabled by -tree-original


{
  uint64_t t;
  uint64_t xu;
  int e;
  int cc;

    uint64_t t;
    uint64_t xu;
    int e;
    int cc;
  e = (int) (x >> 52) & 2047;
  xu = (long long unsigned int) (x << 10) & 4611686018427387903 | 4611686018427387904;
  cc = 1085 - e;
  xu = fpr_ursh (xu, cc & 63);
  xu = -(long long unsigned int) ((long unsigned int) (cc + -64) >> 31) & (long long unsigned int) xu;
  t = x >> 63;
  xu = (-t ^ xu) + t;
  return *(int64_t *) &xu;
}


;; Function fpr_sub (null)
;; enabled by -tree-original


{
  y = (long long unsigned int) y ^ 9223372036854775808;
  return falcon_inner_fpr_add (x, y);
}


;; Function fpr_neg (null)
;; enabled by -tree-original


{
  x = (long long unsigned int) x ^ 9223372036854775808;
  return x;
}


;; Function fpr_half (null)
;; enabled by -tree-original


{
  uint32_t t;

    uint32_t t;
  x = (long long unsigned int) x + 18442240474082181120;
  t = ((long unsigned int) (x >> 52) & 2047) + 1 >> 11;
  x = (long long unsigned int) t + 18446744073709551615 & (long long unsigned int) x;
  return x;
}


;; Function fpr_double (null)
;; enabled by -tree-original


{
  x = ((long long unsigned int) (((unsigned int) (x >> 52) & 2047) + 2047 >> 11) << 52) + (long long unsigned int) x;
  return x;
}


;; Function fpr_sqr (null)
;; enabled by -tree-original


{
  return falcon_inner_fpr_mul (x, x);
}


;; Function fpr_inv (null)
;; enabled by -tree-original


{
  return falcon_inner_fpr_div (4607182418800017408, x);
}


;; Function fpr_lt (null)
;; enabled by -tree-original


{
  int cc0;
  int cc1;

    int cc0;
    int cc1;
  cc0 = *(int64_t *) &x < *(int64_t *) &y;
  cc1 = *(int64_t *) &x > *(int64_t *) &y;
  return (cc0 ^ cc1) & (int) ((x & y) >> 63) ^ cc0;
}


;; Function prng_get_u64 (null)
;; enabled by -tree-original


{
  size_t u;

    size_t u;
  u = p->ptr;
  if (u > 502)
    {
      falcon_inner_prng_refill (p);
      u = 0;
    }
  p->ptr = u + 8;
  return (uint64_t) ((((((((long long unsigned int) p->buf.d[u] | (long long unsigned int) p->buf.d[u + 1] << 8) | (long long unsigned int) p->buf.d[u + 2] << 16) | (long long unsigned int) p->buf.d[u + 3] << 24) | (long long unsigned int) p->buf.d[u + 4] << 32) | (long long unsigned int) p->buf.d[u + 5] << 40) | (long long unsigned int) p->buf.d[u + 6] << 48) | (long long unsigned int) p->buf.d[u + 7] << 56);
}


;; Function prng_get_u8 (null)
;; enabled by -tree-original


{
  unsigned int v;

    unsigned int v;
  v = (unsigned int) p->buf.d[p->ptr++ ];
  if (p->ptr == 512)
    {
      falcon_inner_prng_refill (p);
    }
  return v;
}


;; Function v_add (null)
;; enabled by -tree-original


{
  {
    size_t i = 0;

        size_t i = 0;
    goto <D.8223>;
    <D.8222>:;
    *(result + (sizetype) (i * 8)) = falcon_inner_fpr_add (*(a + (sizetype) (i * 8)), *(b + (sizetype) (i * 8)));
    i++ ;
    <D.8223>:;
    if (i < size) goto <D.8222>; else goto <D.8224>;
    <D.8224>:;
  }
}


;; Function v_sub (null)
;; enabled by -tree-original


{
  {
    size_t i = 0;

        size_t i = 0;
    goto <D.8233>;
    <D.8232>:;
    *(result + (sizetype) (i * 8)) = fpr_sub (*(a + (sizetype) (i * 8)), *(b + (sizetype) (i * 8)));
    i++ ;
    <D.8233>:;
    if (i < size) goto <D.8232>; else goto <D.8234>;
    <D.8234>:;
  }
}


;; Function v_mul (null)
;; enabled by -tree-original


{
  {
    size_t i = 0;

        size_t i = 0;
    goto <D.8243>;
    <D.8242>:;
    *(result + (sizetype) (i * 8)) = falcon_inner_fpr_mul (*(a + (sizetype) (i * 8)), *(b + (sizetype) (i * 8)));
    i++ ;
    <D.8243>:;
    if (i < size) goto <D.8242>; else goto <D.8244>;
    <D.8244>:;
  }
}


;; Function v_neg (null)
;; enabled by -tree-original


{
  {
    size_t i = 0;

        size_t i = 0;
    goto <D.8252>;
    <D.8251>:;
    *(result + (sizetype) (i * 8)) = fpr_neg (*(a + (sizetype) (i * 8)));
    i++ ;
    <D.8252>:;
    if (i < size) goto <D.8251>; else goto <D.8253>;
    <D.8253>:;
  }
}


;; Function v_inv (null)
;; enabled by -tree-original


{
  {
    size_t i = 0;

        size_t i = 0;
    goto <D.8261>;
    <D.8260>:;
    *(result + (sizetype) (i * 8)) = fpr_inv (*(a + (sizetype) (i * 8)));
    i++ ;
    <D.8261>:;
    if (i < size) goto <D.8260>; else goto <D.8262>;
    <D.8262>:;
  }
}


;; Function v_round (null)
;; enabled by -tree-original


{
  falcon_inner_iFFT ((fpr *) a, logn);
  {
    size_t i = 0;

        size_t i = 0;
    goto <D.8271>;
    <D.8270>:;
    *(result + (sizetype) (i * 8)) = fpr_of (fpr_rint (*(a + (sizetype) (i * 8))));
    i++ ;
    <D.8271>:;
    if (i < size) goto <D.8270>; else goto <D.8272>;
    <D.8272>:;
  }
  falcon_inner_FFT (result, logn);
}


;; Function mat_mul (null)
;; enabled by -tree-original


{
  {
    size_t i = 0;

        size_t i = 0;
    goto <D.8288>;
    <D.8287>:;
    {
      fpr temp1 = falcon_inner_fpr_add (*(x1 + (sizetype) (i * 8)), falcon_inner_fpr_mul (*(A01 + (sizetype) (i * 8)), *(x2 + (sizetype) (i * 8))));
      fpr temp2 = falcon_inner_fpr_add (falcon_inner_fpr_mul (*(A10 + (sizetype) (i * 8)), *(x1 + (sizetype) (i * 8))), falcon_inner_fpr_mul (*(A11 + (sizetype) (i * 8)), *(x2 + (sizetype) (i * 8))));

            fpr temp1 = falcon_inner_fpr_add (*(x1 + (sizetype) (i * 8)), falcon_inner_fpr_mul (*(A01 + (sizetype) (i * 8)), *(x2 + (sizetype) (i * 8))));
            fpr temp2 = falcon_inner_fpr_add (falcon_inner_fpr_mul (*(A10 + (sizetype) (i * 8)), *(x1 + (sizetype) (i * 8))), falcon_inner_fpr_mul (*(A11 + (sizetype) (i * 8)), *(x2 + (sizetype) (i * 8))));
      *(y1 + (sizetype) (i * 8)) = falcon_inner_fpr_add (*(y1 + (sizetype) (i * 8)), temp1);
      *(y2 + (sizetype) (i * 8)) = falcon_inner_fpr_add (*(y2 + (sizetype) (i * 8)), temp2);
    }
    i++ ;
    <D.8288>:;
    if (i < size) goto <D.8287>; else goto <D.8289>;
    <D.8289>:;
  }
}


;; Function v_scalar_mul (null)
;; enabled by -tree-original


{
  {
    int i = 0;

        int i = 0;
    goto <D.8298>;
    <D.8297>:;
    *(result + (sizetype) ((unsigned int) i * 8)) = falcon_inner_fpr_mul (s, *(a + (sizetype) ((unsigned int) i * 8)));
    i++ ;
    <D.8298>:;
    if ((size_t) i < size) goto <D.8297>; else goto <D.8299>;
    <D.8299>:;
  }
}


;; Function randint (null)
;; enabled by -tree-original


{
  return rand () % ((max - min) + 1) + min;
}


;; Function rand32 (null)
;; enabled by -tree-original


{
  uint32_t r = 0;

    uint32_t r = 0;
  {
    int i = 0;

        int i = 0;
    goto <D.8310>;
    <D.8309>:;
    r = r << 31;
    SAVE_EXPR <(unsigned int) rand ()>;, r = (long unsigned int) SAVE_EXPR <(unsigned int) rand ()> ^ (long unsigned int) r;;
    i = i + 31;
    <D.8310>:;
    if (i <= 31) goto <D.8309>; else goto <D.8311>;
    <D.8311>:;
  }
  return r;
}


;; Function gaussian_sampler (null)
;; enabled by -tree-original


{
  {
    size_t i = 0;

        size_t i = 0;
    goto <D.8320>;
    <D.8319>:;
    {
      uint32_t rand = rand32 ();
      struct prng p;

            uint32_t rand = rand32 ();
            struct prng p;
      p.buf.dummy_u64 = (uint64_t) rand;
      *(result + (sizetype) (i * 4)) = falcon_inner_gaussian0_sampler (&p);
      if (((long unsigned int) rand32 () & 1) == 0)
        {
          *(result + (sizetype) (i * 4)) = -*(result + (sizetype) (i * 4));
        }
    }
    i++ ;
    <D.8320>:;
    if (i < size) goto <D.8319>; else goto <D.8321>;
    <D.8321>:;
  }
}


;; Function calc_norm (null)
;; enabled by -tree-original


{
  double norm = 0.0;

    double norm = 0.0;
  {
    size_t i = 0;

        size_t i = 0;
    goto <D.8329>;
    <D.8328>:;
    norm = (double) *(array + (sizetype) (i * 8)) * (double) *(array + (sizetype) (i * 8)) + norm;
    i++ ;
    <D.8329>:;
    if (i < size) goto <D.8328>; else goto <D.8330>;
    <D.8330>:;
  }
  return sqrt (norm);
}


;; Function ffLDL_treesize (null)
;; enabled by -tree-original


{
  return logn + 1 << logn;
}


;; Function ffLDL_fft_inner (null)
;; enabled by -tree-original


{
  size_t n;
  size_t hn;

    size_t n;
    size_t hn;
  n = 1 << logn;
  if (n == 1)
    {
      *tree = *g0;
      return;
    }
  hn = n >> 1;
  falcon_inner_poly_LDLmv_fft (tmp, tree, (const fpr * restrict) g0, (const fpr * restrict) g1, (const fpr * restrict) g0, logn);
  falcon_inner_poly_split_fft (g1, g1 + (sizetype) (hn * 8), (const fpr * restrict) g0, logn);
  falcon_inner_poly_split_fft (g0, g0 + (sizetype) (hn * 8), (const fpr * restrict) tmp, logn);
  ffLDL_fft_inner (tree + (sizetype) (n * 8), g1, g1 + (sizetype) (hn * 8), logn + 4294967295, tmp);
  ffLDL_fft_inner (tree + ((sizetype) ffLDL_treesize (logn + 4294967295) + (sizetype) n) * 8, g0, g0 + (sizetype) (hn * 8), logn + 4294967295, tmp);
}


;; Function ffLDL_fft (null)
;; enabled by -tree-original


{
  size_t n;
  size_t hn;
  fpr * d00;
  fpr * d11;

    size_t n;
    size_t hn;
    fpr * d00;
    fpr * d11;
  n = 1 << logn;
  if (n == 1)
    {
      *tree = *g00;
      return;
    }
  hn = n >> 1;
  d00 = tmp;
  d11 = tmp + (sizetype) (n * 8);
  tmp = tmp + (sizetype) (n * 16);
  memcpy ((void * restrict) d00, (const void * restrict) g00, n * 8);
  falcon_inner_poly_LDLmv_fft (d11, tree, g00, g01, g11, logn);
  falcon_inner_poly_split_fft (tmp, tmp + (sizetype) (hn * 8), (const fpr * restrict) d00, logn);
  falcon_inner_poly_split_fft (d00, d00 + (sizetype) (hn * 8), (const fpr * restrict) d11, logn);
  memcpy ((void * restrict) d11, (const void * restrict) tmp, n * 8);
  ffLDL_fft_inner (tree + (sizetype) (n * 8), d11, d11 + (sizetype) (hn * 8), logn + 4294967295, tmp);
  ffLDL_fft_inner (tree + ((sizetype) ffLDL_treesize (logn + 4294967295) + (sizetype) n) * 8, d00, d00 + (sizetype) (hn * 8), logn + 4294967295, tmp);
}


;; Function ffLDL_binary_normalize (null)
;; enabled by -tree-original


{
  size_t n;

    size_t n;
  n = 1 << logn;
  if (n == 1)
    {
      *tree = falcon_inner_fpr_mul (falcon_inner_fpr_sqrt (*tree), fpr_inv_sigma[orig_logn]);
    }
  else
    {
      ffLDL_binary_normalize (tree + (sizetype) (n * 8), orig_logn, logn + 4294967295);
      ffLDL_binary_normalize (tree + ((sizetype) ffLDL_treesize (logn + 4294967295) + (sizetype) n) * 8, orig_logn, logn + 4294967295);
    }
}


;; Function smallints_to_fpr (null)
;; enabled by -tree-original


{
  size_t n;
  size_t u;

    size_t n;
    size_t u;
  n = 1 << logn;
  u = 0;
  goto <D.8369>;
  <D.8368>:;
  *(r + (sizetype) (u * 8)) = fpr_of ((int64_t) *(t + (sizetype) u));
  u++ ;
  <D.8369>:;
  if (u < n) goto <D.8368>; else goto <D.8370>;
  <D.8370>:;
}


;; Function skoff_b00 (null)
;; enabled by -tree-original


{
  (void) logn;
  return 0;
}


;; Function skoff_b01 (null)
;; enabled by -tree-original


{
  return (size_t) (1 << logn);
}


;; Function skoff_b10 (null)
;; enabled by -tree-original


{
  return (size_t) (2 << logn);
}


;; Function skoff_b11 (null)
;; enabled by -tree-original


{
  return (size_t) (3 << logn);
}


;; Function skoff_tree (null)
;; enabled by -tree-original


{
  return (size_t) (4 << logn);
}


;; Function falcon_inner_expand_privkey (null)
;; enabled by -tree-original


{
  size_t n;
  fpr * rf;
  fpr * rg;
  fpr * rF;
  fpr * rG;
  fpr * b00;
  fpr * b01;
  fpr * b10;
  fpr * b11;
  fpr * g00;
  fpr * g01;
  fpr * g11;
  fpr * gxx;
  fpr * tree;

    size_t n;
    fpr * rf;
    fpr * rg;
    fpr * rF;
    fpr * rG;
    fpr * b00;
    fpr * b01;
    fpr * b10;
    fpr * b11;
    fpr * g00;
    fpr * g01;
    fpr * g11;
    fpr * gxx;
    fpr * tree;
  n = 1 << logn;
  b00 = expanded_key + (sizetype) (skoff_b00 (logn) * 8);
  b01 = expanded_key + (sizetype) (skoff_b01 (logn) * 8);
  b10 = expanded_key + (sizetype) (skoff_b10 (logn) * 8);
  b11 = expanded_key + (sizetype) (skoff_b11 (logn) * 8);
  tree = expanded_key + (sizetype) (skoff_tree (logn) * 8);
  rf = b01;
  rg = b00;
  rF = b11;
  rG = b10;
  smallints_to_fpr (rf, f, logn);
  smallints_to_fpr (rg, g, logn);
  smallints_to_fpr (rF, F, logn);
  smallints_to_fpr (rG, G, logn);
  falcon_inner_FFT (rf, logn);
  falcon_inner_FFT (rg, logn);
  falcon_inner_FFT (rF, logn);
  falcon_inner_FFT (rG, logn);
  falcon_inner_poly_neg (rf, logn);
  falcon_inner_poly_neg (rF, logn);
  g00 = (fpr *) tmp;
  g01 = g00 + (sizetype) (n * 8);
  g11 = g01 + (sizetype) (n * 8);
  gxx = g11 + (sizetype) (n * 8);
  memcpy ((void * restrict) g00, (const void * restrict) b00, n * 8);
  falcon_inner_poly_mulselfadj_fft (g00, logn);
  memcpy ((void * restrict) gxx, (const void * restrict) b01, n * 8);
  falcon_inner_poly_mulselfadj_fft (gxx, logn);
  falcon_inner_poly_add (g00, (const fpr * restrict) gxx, logn);
  memcpy ((void * restrict) g01, (const void * restrict) b00, n * 8);
  falcon_inner_poly_muladj_fft (g01, (const fpr * restrict) b10, logn);
  memcpy ((void * restrict) gxx, (const void * restrict) b01, n * 8);
  falcon_inner_poly_muladj_fft (gxx, (const fpr * restrict) b11, logn);
  falcon_inner_poly_add (g01, (const fpr * restrict) gxx, logn);
  memcpy ((void * restrict) g11, (const void * restrict) b10, n * 8);
  falcon_inner_poly_mulselfadj_fft (g11, logn);
  memcpy ((void * restrict) gxx, (const void * restrict) b11, n * 8);
  falcon_inner_poly_mulselfadj_fft (gxx, logn);
  falcon_inner_poly_add (g11, (const fpr * restrict) gxx, logn);
  ffLDL_fft (tree, (const fpr * restrict) g00, (const fpr * restrict) g01, (const fpr * restrict) g11, logn, gxx);
  ffLDL_binary_normalize (tree, logn, logn);
}


;; Function ffSampling_fft_dyntree (null)
;; enabled by -tree-original


{
  size_t n;
  size_t hn;
  fpr * z0;
  fpr * z1;

    size_t n;
    size_t hn;
    fpr * z0;
    fpr * z1;
  if (logn == 0)
    {
      {
        fpr leaf;

                fpr leaf;
        leaf = *g00;
        leaf = falcon_inner_fpr_mul (falcon_inner_fpr_sqrt (leaf), fpr_inv_sigma[orig_logn]);
        *t0 = fpr_of ((int64_t) samp (samp_ctx, *t0, leaf));
        *t1 = fpr_of ((int64_t) samp (samp_ctx, *t1, leaf));
        return;
      }
    }
  n = 1 << logn;
  hn = n >> 1;
  falcon_inner_poly_LDL_fft ((const fpr * restrict) g00, g01, g11, logn);
  falcon_inner_poly_split_fft (tmp, tmp + (sizetype) (hn * 8), (const fpr * restrict) g00, logn);
  memcpy ((void * restrict) g00, (const void * restrict) tmp, n * 8);
  falcon_inner_poly_split_fft (tmp, tmp + (sizetype) (hn * 8), (const fpr * restrict) g11, logn);
  memcpy ((void * restrict) g11, (const void * restrict) tmp, n * 8);
  memcpy ((void * restrict) tmp, (const void * restrict) g01, n * 8);
  memcpy ((void * restrict) g01, (const void * restrict) g00, hn * 8);
  memcpy ((void * restrict) (g01 + (sizetype) (hn * 8)), (const void * restrict) g11, hn * 8);
  z1 = tmp + (sizetype) (n * 8);
  falcon_inner_poly_split_fft (z1, z1 + (sizetype) (hn * 8), (const fpr * restrict) t1, logn);
  ffSampling_fft_dyntree (samp, samp_ctx, z1, z1 + (sizetype) (hn * 8), g11, g11 + (sizetype) (hn * 8), g01 + (sizetype) (hn * 8), orig_logn, logn + 4294967295, z1 + (sizetype) (n * 8));
  falcon_inner_poly_merge_fft (tmp + (sizetype) (n * 16), (const fpr * restrict) z1, (const fpr * restrict) (z1 + (sizetype) (hn * 8)), logn);
  memcpy ((void * restrict) z1, (const void * restrict) t1, n * 8);
  falcon_inner_poly_sub (z1, (const fpr * restrict) (tmp + (sizetype) (n * 16)), logn);
  memcpy ((void * restrict) t1, (const void * restrict) (tmp + (sizetype) (n * 16)), n * 8);
  falcon_inner_poly_mul_fft (tmp, (const fpr * restrict) z1, logn);
  falcon_inner_poly_add (t0, (const fpr * restrict) tmp, logn);
  z0 = tmp;
  falcon_inner_poly_split_fft (z0, z0 + (sizetype) (hn * 8), (const fpr * restrict) t0, logn);
  ffSampling_fft_dyntree (samp, samp_ctx, z0, z0 + (sizetype) (hn * 8), g00, g00 + (sizetype) (hn * 8), g01, orig_logn, logn + 4294967295, z0 + (sizetype) (n * 8));
  falcon_inner_poly_merge_fft (t0, (const fpr * restrict) z0, (const fpr * restrict) (z0 + (sizetype) (hn * 8)), logn);
}


;; Function ffSampling_fft (null)
;; enabled by -tree-original


{
  size_t n;
  size_t hn;
  const fpr * tree0;
  const fpr * tree1;

    size_t n;
    size_t hn;
    const fpr * tree0;
    const fpr * tree1;
  if (logn == 2)
    {
      {
        fpr x0;
        fpr x1;
        fpr y0;
        fpr y1;
        fpr w0;
        fpr w1;
        fpr w2;
        fpr w3;
        fpr sigma;
        fpr a_re;
        fpr a_im;
        fpr b_re;
        fpr b_im;
        fpr c_re;
        fpr c_im;

                fpr x0;
                fpr x1;
                fpr y0;
                fpr y1;
                fpr w0;
                fpr w1;
                fpr w2;
                fpr w3;
                fpr sigma;
                fpr a_re;
                fpr a_im;
                fpr b_re;
                fpr b_im;
                fpr c_re;
                fpr c_im;
        tree0 = tree + 32;
        tree1 = tree + 64;
        a_re = *t1;
        a_im = *(t1 + 16);
        b_re = *(t1 + 8);
        b_im = *(t1 + 24);
        c_re = falcon_inner_fpr_add (a_re, b_re);
        c_im = falcon_inner_fpr_add (a_im, b_im);
        w0 = fpr_half (c_re);
        w1 = fpr_half (c_im);
        c_re = fpr_sub (a_re, b_re);
        c_im = fpr_sub (a_im, b_im);
        w2 = falcon_inner_fpr_mul (falcon_inner_fpr_add (c_re, c_im), 4600040671590431693);
        w3 = falcon_inner_fpr_mul (fpr_sub (c_im, c_re), 4600040671590431693);
        x0 = w2;
        x1 = w3;
        sigma = *(tree1 + 24);
        w2 = fpr_of ((int64_t) samp (samp_ctx, x0, sigma));
        w3 = fpr_of ((int64_t) samp (samp_ctx, x1, sigma));
        a_re = fpr_sub (x0, w2);
        a_im = fpr_sub (x1, w3);
        b_re = *tree1;
        b_im = *(tree1 + 8);
        c_re = fpr_sub (falcon_inner_fpr_mul (a_re, b_re), falcon_inner_fpr_mul (a_im, b_im));
        c_im = falcon_inner_fpr_add (falcon_inner_fpr_mul (a_re, b_im), falcon_inner_fpr_mul (a_im, b_re));
        x0 = falcon_inner_fpr_add (c_re, w0);
        x1 = falcon_inner_fpr_add (c_im, w1);
        sigma = *(tree1 + 16);
        w0 = fpr_of ((int64_t) samp (samp_ctx, x0, sigma));
        w1 = fpr_of ((int64_t) samp (samp_ctx, x1, sigma));
        a_re = w0;
        a_im = w1;
        b_re = w2;
        b_im = w3;
        c_re = falcon_inner_fpr_mul (fpr_sub (b_re, b_im), 4604544271217802189);
        c_im = falcon_inner_fpr_mul (falcon_inner_fpr_add (b_re, b_im), 4604544271217802189);
        *z1 = w0 = falcon_inner_fpr_add (a_re, c_re);
        *(z1 + 16) = w2 = falcon_inner_fpr_add (a_im, c_im);
        *(z1 + 8) = w1 = fpr_sub (a_re, c_re);
        *(z1 + 24) = w3 = fpr_sub (a_im, c_im);
        w0 = fpr_sub (*t1, w0);
        w1 = fpr_sub (*(t1 + 8), w1);
        w2 = fpr_sub (*(t1 + 16), w2);
        w3 = fpr_sub (*(t1 + 24), w3);
        a_re = w0;
        a_im = w2;
        b_re = *tree;
        b_im = *(tree + 16);
        w0 = fpr_sub (falcon_inner_fpr_mul (a_re, b_re), falcon_inner_fpr_mul (a_im, b_im));
        w2 = falcon_inner_fpr_add (falcon_inner_fpr_mul (a_re, b_im), falcon_inner_fpr_mul (a_im, b_re));
        a_re = w1;
        a_im = w3;
        b_re = *(tree + 8);
        b_im = *(tree + 24);
        w1 = fpr_sub (falcon_inner_fpr_mul (a_re, b_re), falcon_inner_fpr_mul (a_im, b_im));
        w3 = falcon_inner_fpr_add (falcon_inner_fpr_mul (a_re, b_im), falcon_inner_fpr_mul (a_im, b_re));
        w0 = falcon_inner_fpr_add (w0, *t0);
        w1 = falcon_inner_fpr_add (w1, *(t0 + 8));
        w2 = falcon_inner_fpr_add (w2, *(t0 + 16));
        w3 = falcon_inner_fpr_add (w3, *(t0 + 24));
        a_re = w0;
        a_im = w2;
        b_re = w1;
        b_im = w3;
        c_re = falcon_inner_fpr_add (a_re, b_re);
        c_im = falcon_inner_fpr_add (a_im, b_im);
        w0 = fpr_half (c_re);
        w1 = fpr_half (c_im);
        c_re = fpr_sub (a_re, b_re);
        c_im = fpr_sub (a_im, b_im);
        w2 = falcon_inner_fpr_mul (falcon_inner_fpr_add (c_re, c_im), 4600040671590431693);
        w3 = falcon_inner_fpr_mul (fpr_sub (c_im, c_re), 4600040671590431693);
        x0 = w2;
        x1 = w3;
        sigma = *(tree0 + 24);
        w2 = y0 = fpr_of ((int64_t) samp (samp_ctx, x0, sigma));
        w3 = y1 = fpr_of ((int64_t) samp (samp_ctx, x1, sigma));
        a_re = fpr_sub (x0, y0);
        a_im = fpr_sub (x1, y1);
        b_re = *tree0;
        b_im = *(tree0 + 8);
        c_re = fpr_sub (falcon_inner_fpr_mul (a_re, b_re), falcon_inner_fpr_mul (a_im, b_im));
        c_im = falcon_inner_fpr_add (falcon_inner_fpr_mul (a_re, b_im), falcon_inner_fpr_mul (a_im, b_re));
        x0 = falcon_inner_fpr_add (c_re, w0);
        x1 = falcon_inner_fpr_add (c_im, w1);
        sigma = *(tree0 + 16);
        w0 = fpr_of ((int64_t) samp (samp_ctx, x0, sigma));
        w1 = fpr_of ((int64_t) samp (samp_ctx, x1, sigma));
        a_re = w0;
        a_im = w1;
        b_re = w2;
        b_im = w3;
        c_re = falcon_inner_fpr_mul (fpr_sub (b_re, b_im), 4604544271217802189);
        c_im = falcon_inner_fpr_mul (falcon_inner_fpr_add (b_re, b_im), 4604544271217802189);
        *z0 = falcon_inner_fpr_add (a_re, c_re);
        *(z0 + 16) = falcon_inner_fpr_add (a_im, c_im);
        *(z0 + 8) = fpr_sub (a_re, c_re);
        *(z0 + 24) = fpr_sub (a_im, c_im);
        return;
      }
    }
  if (logn == 1)
    {
      {
        fpr x0;
        fpr x1;
        fpr y0;
        fpr y1;
        fpr sigma;
        fpr a_re;
        fpr a_im;
        fpr b_re;
        fpr b_im;
        fpr c_re;
        fpr c_im;

                fpr x0;
                fpr x1;
                fpr y0;
                fpr y1;
                fpr sigma;
                fpr a_re;
                fpr a_im;
                fpr b_re;
                fpr b_im;
                fpr c_re;
                fpr c_im;
        x0 = *t1;
        x1 = *(t1 + 8);
        sigma = *(tree + 24);
        *z1 = y0 = fpr_of ((int64_t) samp (samp_ctx, x0, sigma));
        *(z1 + 8) = y1 = fpr_of ((int64_t) samp (samp_ctx, x1, sigma));
        a_re = fpr_sub (x0, y0);
        a_im = fpr_sub (x1, y1);
        b_re = *tree;
        b_im = *(tree + 8);
        c_re = fpr_sub (falcon_inner_fpr_mul (a_re, b_re), falcon_inner_fpr_mul (a_im, b_im));
        c_im = falcon_inner_fpr_add (falcon_inner_fpr_mul (a_re, b_im), falcon_inner_fpr_mul (a_im, b_re));
        x0 = falcon_inner_fpr_add (c_re, *t0);
        x1 = falcon_inner_fpr_add (c_im, *(t0 + 8));
        sigma = *(tree + 16);
        *z0 = fpr_of ((int64_t) samp (samp_ctx, x0, sigma));
        *(z0 + 8) = fpr_of ((int64_t) samp (samp_ctx, x1, sigma));
        return;
      }
    }
  n = 1 << logn;
  hn = n >> 1;
  tree0 = tree + (sizetype) (n * 8);
  tree1 = tree + ((sizetype) ffLDL_treesize (logn + 4294967295) + (sizetype) n) * 8;
  falcon_inner_poly_split_fft (z1, z1 + (sizetype) (hn * 8), t1, logn);
  ffSampling_fft (samp, samp_ctx, tmp, tmp + (sizetype) (hn * 8), tree1, (const fpr * restrict) z1, (const fpr * restrict) (z1 + (sizetype) (hn * 8)), logn + 4294967295, tmp + (sizetype) (n * 8));
  falcon_inner_poly_merge_fft (z1, (const fpr * restrict) tmp, (const fpr * restrict) (tmp + (sizetype) (hn * 8)), logn);
  memcpy ((void * restrict) tmp, (const void * restrict) t1, n * 8);
  falcon_inner_poly_sub (tmp, (const fpr * restrict) z1, logn);
  falcon_inner_poly_mul_fft (tmp, tree, logn);
  falcon_inner_poly_add (tmp, t0, logn);
  falcon_inner_poly_split_fft (z0, z0 + (sizetype) (hn * 8), (const fpr * restrict) tmp, logn);
  ffSampling_fft (samp, samp_ctx, tmp, tmp + (sizetype) (hn * 8), tree0, (const fpr * restrict) z0, (const fpr * restrict) (z0 + (sizetype) (hn * 8)), logn + 4294967295, tmp + (sizetype) (n * 8));
  falcon_inner_poly_merge_fft (z0, (const fpr * restrict) tmp, (const fpr * restrict) (tmp + (sizetype) (hn * 8)), logn);
}


;; Function do_sign_tree (null)
;; enabled by -tree-original


{
  size_t n;
  size_t u;
  fpr * t0;
  fpr * t1;
  fpr * tx;
  fpr * ty;
  const fpr * b00;
  const fpr * b01;
  const fpr * b10;
  const fpr * b11;
  const fpr * tree;
  fpr ni;
  uint32_t sqn;
  uint32_t ng;
  int16_t * s1tmp;
  int16_t * s2tmp;

    size_t n;
    size_t u;
    fpr * t0;
    fpr * t1;
    fpr * tx;
    fpr * ty;
    const fpr * b00;
    const fpr * b01;
    const fpr * b10;
    const fpr * b11;
    const fpr * tree;
    fpr ni;
    uint32_t sqn;
    uint32_t ng;
    int16_t * s1tmp;
    int16_t * s2tmp;
  n = 1 << logn;
  t0 = tmp;
  t1 = t0 + (sizetype) (n * 8);
  b00 = expanded_key + (sizetype) (skoff_b00 (logn) * 8);
  b01 = expanded_key + (sizetype) (skoff_b01 (logn) * 8);
  b10 = expanded_key + (sizetype) (skoff_b10 (logn) * 8);
  b11 = expanded_key + (sizetype) (skoff_b11 (logn) * 8);
  tree = expanded_key + (sizetype) (skoff_tree (logn) * 8);
  u = 0;
  goto <D.8497>;
  <D.8496>:;
  *(t0 + (sizetype) (u * 8)) = fpr_of ((int64_t) *(hm + (sizetype) (u * 2)));
  u++ ;
  <D.8497>:;
  if (u < n) goto <D.8496>; else goto <D.8498>;
  <D.8498>:;
  falcon_inner_FFT (t0, logn);
  ni = 4545632735260551042;
  memcpy ((void * restrict) t1, (const void * restrict) t0, n * 8);
  falcon_inner_poly_mul_fft (t1, b01, logn);
  falcon_inner_poly_mulconst (t1, fpr_neg (ni), logn);
  falcon_inner_poly_mul_fft (t0, b11, logn);
  falcon_inner_poly_mulconst (t0, ni, logn);
  tx = t1 + (sizetype) (n * 8);
  ty = tx + (sizetype) (n * 8);
  ffSampling_fft (samp, samp_ctx, tx, ty, tree, (const fpr * restrict) t0, (const fpr * restrict) t1, logn, ty + (sizetype) (n * 8));
  memcpy ((void * restrict) t0, (const void * restrict) tx, n * 8);
  memcpy ((void * restrict) t1, (const void * restrict) ty, n * 8);
  falcon_inner_poly_mul_fft (tx, b00, logn);
  falcon_inner_poly_mul_fft (ty, b10, logn);
  falcon_inner_poly_add (tx, (const fpr * restrict) ty, logn);
  memcpy ((void * restrict) ty, (const void * restrict) t0, n * 8);
  falcon_inner_poly_mul_fft (ty, b01, logn);
  memcpy ((void * restrict) t0, (const void * restrict) tx, n * 8);
  falcon_inner_poly_mul_fft (t1, b11, logn);
  falcon_inner_poly_add (t1, (const fpr * restrict) ty, logn);
  falcon_inner_iFFT (t0, logn);
  falcon_inner_iFFT (t1, logn);
  s1tmp = (int16_t *) tx;
  sqn = 0;
  ng = 0;
  u = 0;
  goto <D.8501>;
  <D.8500>:;
  {
    int32_t z;

        int32_t z;
    z = (long int) *(hm + (sizetype) (u * 2)) - (long int) fpr_rint (*(t0 + (sizetype) (u * 8)));
    sqn = (long unsigned int) (z * z) + (long unsigned int) sqn;
    ng = ng | sqn;
    *(s1tmp + (sizetype) (u * 2)) = (short int) z;
  }
  u++ ;
  <D.8501>:;
  if (u < n) goto <D.8500>; else goto <D.8502>;
  <D.8502>:;
  sqn = (uint32_t) ((signed int) ng >> 31) | sqn;
  s2tmp = (int16_t *) tmp;
  u = 0;
  goto <D.8504>;
  <D.8503>:;
  *(s2tmp + (sizetype) (u * 2)) = (short int) -(unsigned short) fpr_rint (*(t1 + (sizetype) (u * 8)));
  u++ ;
  <D.8504>:;
  if (u < n) goto <D.8503>; else goto <D.8505>;
  <D.8505>:;
  if (falcon_inner_is_short_half (sqn, (const int16_t *) s2tmp, logn) != 0)
    {
      memcpy ((void * restrict) s2, (const void * restrict) s2tmp, n * 2);
      memcpy ((void * restrict) tmp, (const void * restrict) s1tmp, n * 2);
      return 1;
    }
  return 0;
}


;; Function do_sign_dyn (null)
;; enabled by -tree-original


{
  size_t n;
  size_t u;
  fpr * t0;
  fpr * t1;
  fpr * tx;
  fpr * ty;
  fpr * b00;
  fpr * b01;
  fpr * b10;
  fpr * b11;
  fpr * g00;
  fpr * g01;
  fpr * g11;
  fpr ni;
  uint32_t sqn;
  uint32_t ng;
  int16_t * s1tmp;
  int16_t * s2tmp;

    size_t n;
    size_t u;
    fpr * t0;
    fpr * t1;
    fpr * tx;
    fpr * ty;
    fpr * b00;
    fpr * b01;
    fpr * b10;
    fpr * b11;
    fpr * g00;
    fpr * g01;
    fpr * g11;
    fpr ni;
    uint32_t sqn;
    uint32_t ng;
    int16_t * s1tmp;
    int16_t * s2tmp;
  n = 1 << logn;
  b00 = tmp;
  b01 = b00 + (sizetype) (n * 8);
  b10 = b01 + (sizetype) (n * 8);
  b11 = b10 + (sizetype) (n * 8);
  smallints_to_fpr (b01, f, logn);
  smallints_to_fpr (b00, g, logn);
  smallints_to_fpr (b11, F, logn);
  smallints_to_fpr (b10, G, logn);
  falcon_inner_FFT (b01, logn);
  falcon_inner_FFT (b00, logn);
  falcon_inner_FFT (b11, logn);
  falcon_inner_FFT (b10, logn);
  falcon_inner_poly_neg (b01, logn);
  falcon_inner_poly_neg (b11, logn);
  t0 = b11 + (sizetype) (n * 8);
  t1 = t0 + (sizetype) (n * 8);
  memcpy ((void * restrict) t0, (const void * restrict) b01, n * 8);
  falcon_inner_poly_mulselfadj_fft (t0, logn);
  memcpy ((void * restrict) t1, (const void * restrict) b00, n * 8);
  falcon_inner_poly_muladj_fft (t1, (const fpr * restrict) b10, logn);
  falcon_inner_poly_mulselfadj_fft (b00, logn);
  falcon_inner_poly_add (b00, (const fpr * restrict) t0, logn);
  memcpy ((void * restrict) t0, (const void * restrict) b01, n * 8);
  falcon_inner_poly_muladj_fft (b01, (const fpr * restrict) b11, logn);
  falcon_inner_poly_add (b01, (const fpr * restrict) t1, logn);
  falcon_inner_poly_mulselfadj_fft (b10, logn);
  memcpy ((void * restrict) t1, (const void * restrict) b11, n * 8);
  falcon_inner_poly_mulselfadj_fft (t1, logn);
  falcon_inner_poly_add (b10, (const fpr * restrict) t1, logn);
  g00 = b00;
  g01 = b01;
  g11 = b10;
  b01 = t0;
  t0 = b01 + (sizetype) (n * 8);
  t1 = t0 + (sizetype) (n * 8);
  u = 0;
  goto <D.8537>;
  <D.8536>:;
  *(t0 + (sizetype) (u * 8)) = fpr_of ((int64_t) *(hm + (sizetype) (u * 2)));
  u++ ;
  <D.8537>:;
  if (u < n) goto <D.8536>; else goto <D.8538>;
  <D.8538>:;
  falcon_inner_FFT (t0, logn);
  ni = 4545632735260551042;
  memcpy ((void * restrict) t1, (const void * restrict) t0, n * 8);
  falcon_inner_poly_mul_fft (t1, (const fpr * restrict) b01, logn);
  falcon_inner_poly_mulconst (t1, fpr_neg (ni), logn);
  falcon_inner_poly_mul_fft (t0, (const fpr * restrict) b11, logn);
  falcon_inner_poly_mulconst (t0, ni, logn);
  memcpy ((void * restrict) b11, (const void * restrict) t0, n * 16);
  t0 = g11 + (sizetype) (n * 8);
  t1 = t0 + (sizetype) (n * 8);
  ffSampling_fft_dyntree (samp, samp_ctx, t0, t1, g00, g01, g11, logn, logn, t1 + (sizetype) (n * 8));
  b00 = tmp;
  b01 = b00 + (sizetype) (n * 8);
  b10 = b01 + (sizetype) (n * 8);
  b11 = b10 + (sizetype) (n * 8);
  memmove ((void *) (b11 + (sizetype) (n * 8)), (const void *) t0, n * 16);
  t0 = b11 + (sizetype) (n * 8);
  t1 = t0 + (sizetype) (n * 8);
  smallints_to_fpr (b01, f, logn);
  smallints_to_fpr (b00, g, logn);
  smallints_to_fpr (b11, F, logn);
  smallints_to_fpr (b10, G, logn);
  falcon_inner_FFT (b01, logn);
  falcon_inner_FFT (b00, logn);
  falcon_inner_FFT (b11, logn);
  falcon_inner_FFT (b10, logn);
  falcon_inner_poly_neg (b01, logn);
  falcon_inner_poly_neg (b11, logn);
  tx = t1 + (sizetype) (n * 8);
  ty = tx + (sizetype) (n * 8);
  memcpy ((void * restrict) tx, (const void * restrict) t0, n * 8);
  memcpy ((void * restrict) ty, (const void * restrict) t1, n * 8);
  falcon_inner_poly_mul_fft (tx, (const fpr * restrict) b00, logn);
  falcon_inner_poly_mul_fft (ty, (const fpr * restrict) b10, logn);
  falcon_inner_poly_add (tx, (const fpr * restrict) ty, logn);
  memcpy ((void * restrict) ty, (const void * restrict) t0, n * 8);
  falcon_inner_poly_mul_fft (ty, (const fpr * restrict) b01, logn);
  memcpy ((void * restrict) t0, (const void * restrict) tx, n * 8);
  falcon_inner_poly_mul_fft (t1, (const fpr * restrict) b11, logn);
  falcon_inner_poly_add (t1, (const fpr * restrict) ty, logn);
  falcon_inner_iFFT (t0, logn);
  falcon_inner_iFFT (t1, logn);
  s1tmp = (int16_t *) tx;
  sqn = 0;
  ng = 0;
  u = 0;
  goto <D.8541>;
  <D.8540>:;
  {
    int32_t z;

        int32_t z;
    z = (long int) *(hm + (sizetype) (u * 2)) - (long int) fpr_rint (*(t0 + (sizetype) (u * 8)));
    sqn = (long unsigned int) (z * z) + (long unsigned int) sqn;
    ng = ng | sqn;
    *(s1tmp + (sizetype) (u * 2)) = (short int) z;
  }
  u++ ;
  <D.8541>:;
  if (u < n) goto <D.8540>; else goto <D.8542>;
  <D.8542>:;
  sqn = (uint32_t) ((signed int) ng >> 31) | sqn;
  s2tmp = (int16_t *) tmp;
  u = 0;
  goto <D.8544>;
  <D.8543>:;
  *(s2tmp + (sizetype) (u * 2)) = (short int) -(unsigned short) fpr_rint (*(t1 + (sizetype) (u * 8)));
  u++ ;
  <D.8544>:;
  if (u < n) goto <D.8543>; else goto <D.8545>;
  <D.8545>:;
  if (falcon_inner_is_short_half (sqn, (const int16_t *) s2tmp, logn) != 0)
    {
      memcpy ((void * restrict) s2, (const void * restrict) s2tmp, n * 2);
      memcpy ((void * restrict) tmp, (const void * restrict) s1tmp, n * 2);
      return 1;
    }
  return 0;
}


;; Function do_sign_dyn_lazy (null)
;; enabled by -tree-original


{
  size_t n;
  fpr * b00;
  fpr * b01;
  fpr * b10;
  fpr * b11;
  fpr smallg[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  fpr smallf[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  fpr capG[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  fpr capF[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  fpr v_neg_g[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  fpr v_neg_F[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  fpr qB0_inv_fft_fF_0[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  fpr qB0_inv_fft_fF_1[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  fpr qB0_inv_fft_gG_0[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  fpr qB0_inv_fft_gG_1[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  fpr x1[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  fpr x2[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  fpr y1[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  fpr y2[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  fpr y1_scaled[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  fpr y2_scaled[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  fpr y1_round[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  fpr y2_round[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  fpr sk_y1[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  fpr sk_y2[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  fpr final_x1[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  fpr final_x2[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];

    size_t n;
    fpr * b00;
    fpr * b01;
    fpr * b10;
    fpr * b11;
  n = 1 << logn;
  b00 = tmp;
  b01 = b00 + (sizetype) (n * 8);
  b10 = b01 + (sizetype) (n * 8);
  b11 = b10 + (sizetype) (n * 8);
  smallints_to_fpr (b01, f, logn);
  smallints_to_fpr (b00, g, logn);
  smallints_to_fpr (b11, F, logn);
  smallints_to_fpr (b10, G, logn);
  falcon_inner_FFT (b01, logn);
  falcon_inner_FFT (b00, logn);
  falcon_inner_FFT (b11, logn);
  falcon_inner_FFT (b10, logn);
  falcon_inner_poly_neg (b01, logn);
  falcon_inner_poly_neg (b11, logn);
  (void) SAVE_EXPR <n>;
    fpr smallg[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  memcpy ((void * restrict) &smallg, (const void * restrict) b00, n * 8);
  (void) SAVE_EXPR <n>;
    fpr smallf[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  memcpy ((void * restrict) &smallf, (const void * restrict) b01, n * 8);
  (void) SAVE_EXPR <n>;
    fpr capG[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  memcpy ((void * restrict) &capG, (const void * restrict) b10, n * 8);
  (void) SAVE_EXPR <n>;
    fpr capF[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  memcpy ((void * restrict) &capF, (const void * restrict) b11, n * 8);
  (void) SAVE_EXPR <n>;
    fpr v_neg_g[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  memcpy ((void * restrict) &smallg, (const void * restrict) &smallg, n * 8);
  (void) SAVE_EXPR <n>;
    fpr v_neg_F[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  memcpy ((void * restrict) &capF, (const void * restrict) &capF, n * 8);
  (void) SAVE_EXPR <n>;
    fpr qB0_inv_fft_fF_0[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  (void) SAVE_EXPR <n>;
    fpr qB0_inv_fft_fF_1[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  (void) SAVE_EXPR <n>;
    fpr qB0_inv_fft_gG_0[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  (void) SAVE_EXPR <n>;
    fpr qB0_inv_fft_gG_1[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  (void) SAVE_EXPR <n>;
    fpr x1[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
  {
    int i = 0;

        int i = 0;
    goto <D.8576>;
    <D.8575>:;
    x1[i] = fpr_of ((int64_t) rand32 ());
    i++ ;
    <D.8576>:;
    if ((size_t) i < n) goto <D.8575>; else goto <D.8577>;
    <D.8577>:;
  }
  (void) SAVE_EXPR <n>;
  {
        fpr x2[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
    memset ((void *) &x2, 0, n * 8);
    falcon_inner_FFT ((fpr *) &x1, logn);
    falcon_inner_FFT ((fpr *) &x2, logn);
    (void) SAVE_EXPR <n>;
        fpr y1[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
    (void) SAVE_EXPR <n>;
        fpr y2[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
    mat_mul ((const fpr *) &capG, (const fpr *) &v_neg_g, (const fpr *) &v_neg_F, (const fpr *) &smallf, (const fpr *) &x1, (const fpr *) &x2, (fpr *) &y1, (fpr *) &y2, n);
    (void) SAVE_EXPR <n>;
        fpr y1_scaled[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
    (void) SAVE_EXPR <n>;
        fpr y2_scaled[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
    v_scalar_mul ((const fpr *) &y1, 4545632735260551042, (fpr *) &y1_scaled, n);
    v_scalar_mul ((const fpr *) &y2, 4545632735260551042, (fpr *) &y2_scaled, n);
    (void) SAVE_EXPR <n>;
        fpr y1_round[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
    (void) SAVE_EXPR <n>;
        fpr y2_round[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
    v_round ((const fpr *) &y1_scaled, (fpr *) &y1_round, logn, n);
    v_round ((const fpr *) &y2_scaled, (fpr *) &y2_round, logn, n);
    (void) SAVE_EXPR <n>;
        fpr sk_y1[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
    (void) SAVE_EXPR <n>;
        fpr sk_y2[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
    mat_mul ((const fpr *) &smallf, (const fpr *) &smallg, (const fpr *) &capF, (const fpr *) &capG, (const fpr *) &y1_round, (const fpr *) &y2_round, (fpr *) &sk_y1, (fpr *) &sk_y2, n);
    (void) SAVE_EXPR <n>;
        fpr final_x1[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
    (void) SAVE_EXPR <n>;
        fpr final_x2[0:(sizetype) ((int) SAVE_EXPR <n> + -1)];
    v_sub ((const fpr *) &x1, (const fpr *) &sk_y1, (fpr *) &final_x1, n);
    v_sub ((const fpr *) &x2, (const fpr *) &sk_y2, (fpr *) &final_x2, n);
    return 0;
  }
}


;; Function do_sign_dyn_lazyOLD (null)
;; enabled by -tree-original


{
  size_t n;
  fpr * b00;
  fpr * b01;
  fpr * b10;
  fpr * b11;
  int (*samplerZ) (void *, fpr, fpr) dummy1 = (int (*<T85f>) (void *, fpr, fpr)) samp;
  int8_t * dummy2 = (int8_t *) samp_ctx;
  int16_t * dummy3 = s2;
  int16_t * dummy4 = (int16_t *) hm;
  fpr * a = (fpr *) calloc (n, 8);
  fpr * b = (fpr *) calloc (n, 8);
  fpr * c = (fpr *) calloc (n, 8);
  fpr * d = (fpr *) calloc (n, 8);
  fpr * a_inv = (fpr *) calloc (n, 8);
  fpr * bc = (fpr *) calloc (n, 8);
  fpr * bc_a = (fpr *) calloc (n, 8);
  fpr * aa = (fpr *) calloc (n, 8);
  fpr * bc_a_d = (fpr *) calloc (n, 8);
  fpr * a_ = (fpr *) calloc (n, 8);
  fpr * b_ = (fpr *) calloc (n, 8);
  fpr * c_ = (fpr *) calloc (n, 8);
  fpr * d_ = (fpr *) calloc (n, 8);
  int rand_size = 32;
  fpr * x1 = (fpr *) calloc ((size_t) rand_size, 8);
  fpr * x2 = (fpr *) calloc ((size_t) rand_size, 8);
  fpr * y1 = (fpr *) calloc (n, 8);
  fpr * y1a = (fpr *) calloc (n, 8);
  fpr * y1b = (fpr *) calloc (n, 8);
  fpr * y2 = (fpr *) calloc (n, 8);
  fpr * y2a = (fpr *) calloc (n, 8);
  fpr * y2b = (fpr *) calloc (n, 8);
  fpr * xx1 = (fpr *) calloc (n, 8);
  fpr * xx1a = (fpr *) calloc (n, 8);
  fpr * xx1b = (fpr *) calloc (n, 8);
  fpr * xx2 = (fpr *) calloc (n, 8);
  fpr * xx2a = (fpr *) calloc (n, 8);
  fpr * xx2b = (fpr *) calloc (n, 8);

    size_t n;
    fpr * b00;
    fpr * b01;
    fpr * b10;
    fpr * b11;
    int (*samplerZ) (void *, fpr, fpr) dummy1 = (int (*<T85f>) (void *, fpr, fpr)) samp;
  dummy1 = dummy1 + 1;
    int8_t * dummy2 = (int8_t *) samp_ctx;
  dummy2 = dummy2 + 1;
    int16_t * dummy3 = s2;
  dummy3 = dummy3 + 2;
    int16_t * dummy4 = (int16_t *) hm;
  dummy4 = dummy4 + 2;
  n = 1 << logn;
  b00 = tmp;
  b01 = b00 + (sizetype) (n * 8);
  b10 = b01 + (sizetype) (n * 8);
  b11 = b10 + (sizetype) (n * 8);
  smallints_to_fpr (b01, f, logn);
  smallints_to_fpr (b00, g, logn);
  smallints_to_fpr (b11, F, logn);
  smallints_to_fpr (b10, G, logn);
  falcon_inner_FFT (b01, logn);
  falcon_inner_FFT (b00, logn);
  falcon_inner_FFT (b11, logn);
  falcon_inner_FFT (b10, logn);
  falcon_inner_poly_neg (b01, logn);
  falcon_inner_poly_neg (b11, logn);
    fpr * a = (fpr *) calloc (n, 8);
  memcpy ((void * restrict) a, (const void * restrict) b00, n * 8);
    fpr * b = (fpr *) calloc (n, 8);
  memcpy ((void * restrict) b, (const void * restrict) b01, n * 8);
    fpr * c = (fpr *) calloc (n, 8);
  memcpy ((void * restrict) c, (const void * restrict) b10, n * 8);
    fpr * d = (fpr *) calloc (n, 8);
  memcpy ((void * restrict) d, (const void * restrict) b11, n * 8);
    fpr * a_inv = (fpr *) calloc (n, 8);
  memcpy ((void * restrict) a_inv, (const void * restrict) a, n * 8);
  v_inv ((const fpr *) a, a_inv, n);
    fpr * bc = (fpr *) calloc (n, 8);
  v_mul ((const fpr *) b, (const fpr *) c, bc, n);
    fpr * bc_a = (fpr *) calloc (n, 8);
  v_mul ((const fpr *) bc, (const fpr *) a_inv, bc_a, n);
    fpr * aa = (fpr *) calloc (n, 8);
  v_mul ((const fpr *) a, (const fpr *) a, aa, n);
    fpr * bc_a_d = (fpr *) calloc (n, 8);
  v_mul ((const fpr *) bc_a, (const fpr *) d, bc_a_d, n);
    fpr * a_ = (fpr *) calloc (n, 8);
  v_mul ((const fpr *) aa, (const fpr *) bc_a_d, a_, n);
  v_inv ((const fpr *) a_, a_, n);
  v_mul ((const fpr *) bc, (const fpr *) a_, a_, n);
  v_sub ((const fpr *) a_inv, (const fpr *) a_, a_, n);
    fpr * b_ = (fpr *) calloc (n, 8);
  v_mul ((const fpr *) a, (const fpr *) bc_a_d, b_, n);
  v_inv ((const fpr *) b_, b_, n);
  v_mul ((const fpr *) b, (const fpr *) b_, b_, n);
    fpr * c_ = (fpr *) calloc (n, 8);
  v_mul ((const fpr *) a, (const fpr *) bc_a_d, c_, n);
  v_inv ((const fpr *) c_, c_, n);
  v_mul ((const fpr *) c, (const fpr *) c_, c_, n);
    fpr * d_ = (fpr *) calloc (n, 8);
  v_inv ((const fpr *) bc_a_d, d_, n);
  v_neg ((const fpr *) d_, d_, n);
    int rand_size = 32;
    fpr * x1 = (fpr *) calloc ((size_t) rand_size, 8);
  {
    int i = 0;

        int i = 0;
    goto <D.8627>;
    <D.8626>:;
    *(x1 + (sizetype) ((unsigned int) i * 8)) = fpr_of ((int64_t) rand32 ());
    i++ ;
    <D.8627>:;
    if (i < rand_size) goto <D.8626>; else goto <D.8628>;
    <D.8628>:;
  }
    fpr * x2 = (fpr *) calloc ((size_t) rand_size, 8);
  {
    int i = 0;

        int i = 0;
    goto <D.8632>;
    <D.8631>:;
    *(x2 + (sizetype) ((unsigned int) i * 8)) = fpr_of ((int64_t) rand32 ());
    i++ ;
    <D.8632>:;
    if (i < rand_size) goto <D.8631>; else goto <D.8633>;
    <D.8633>:;
  }
    fpr * y1 = (fpr *) calloc (n, 8);
    fpr * y1a = (fpr *) calloc (n, 8);
    fpr * y1b = (fpr *) calloc (n, 8);
  v_mul ((const fpr *) a_, (const fpr *) x1, y1a, n);
  v_mul ((const fpr *) b_, (const fpr *) x2, y1b, n);
  v_add ((const fpr *) y1a, (const fpr *) y1b, y1, n);
    fpr * y2 = (fpr *) calloc (n, 8);
    fpr * y2a = (fpr *) calloc (n, 8);
    fpr * y2b = (fpr *) calloc (n, 8);
  v_mul ((const fpr *) c_, (const fpr *) x1, y2a, n);
  v_mul ((const fpr *) d_, (const fpr *) x2, y2b, n);
  v_add ((const fpr *) y2a, (const fpr *) y2b, y2, n);
    fpr * xx1 = (fpr *) calloc (n, 8);
    fpr * xx1a = (fpr *) calloc (n, 8);
    fpr * xx1b = (fpr *) calloc (n, 8);
  v_mul ((const fpr *) a, (const fpr *) y1, xx1a, n);
  v_mul ((const fpr *) b, (const fpr *) y2, xx1b, n);
  v_add ((const fpr *) xx1a, (const fpr *) xx1b, xx1, n);
    fpr * xx2 = (fpr *) calloc (n, 8);
    fpr * xx2a = (fpr *) calloc (n, 8);
    fpr * xx2b = (fpr *) calloc (n, 8);
  v_mul ((const fpr *) c, (const fpr *) y1, xx2a, n);
  v_mul ((const fpr *) d, (const fpr *) y2, xx2b, n);
  v_add ((const fpr *) xx2a, (const fpr *) xx2b, xx2, n);
  return 0;
}


;; Function falcon_inner_gaussian0_sampler (null)
;; enabled by -tree-original


{
  static const uint32_t dist[54] = {10745844, 3068844, 3741698, 5559083, 1580863, 8248194, 2260429, 13669192, 2736639, 708981, 4421575, 10046180, 169348, 7122675, 4136815, 30538, 13063405, 7650655, 4132, 14505003, 7826148, 417, 16768101, 11363290, 31, 8444042, 8086568, 1, 12844466, 265321, 0, 1232676, 13644283, 0, 38047, 9111839, 0, 870, 6138264, 0, 14, 12545723, 0, 0, 3104126, 0, 0, 28824, 0, 0, 198, 0, 0, 1};
  uint32_t v0;
  uint32_t v1;
  uint32_t v2;
  uint32_t hi;
  uint64_t lo;
  size_t u;
  int z;

    static const uint32_t dist[54] = {10745844, 3068844, 3741698, 5559083, 1580863, 8248194, 2260429, 13669192, 2736639, 708981, 4421575, 10046180, 169348, 7122675, 4136815, 30538, 13063405, 7650655, 4132, 14505003, 7826148, 417, 16768101, 11363290, 31, 8444042, 8086568, 1, 12844466, 265321, 0, 1232676, 13644283, 0, 38047, 9111839, 0, 870, 6138264, 0, 14, 12545723, 0, 0, 3104126, 0, 0, 28824, 0, 0, 198, 0, 0, 1};
    uint32_t v0;
    uint32_t v1;
    uint32_t v2;
    uint32_t hi;
    uint64_t lo;
    size_t u;
    int z;
  lo = prng_get_u64 (p);
  hi = (uint32_t) prng_get_u8 (p);
  v0 = (long unsigned int) lo & 16777215;
  v1 = (long unsigned int) (lo >> 24) & 16777215;
  v2 = (long unsigned int) (lo >> 48) | (long unsigned int) (hi << 16);
  z = 0;
  u = 0;
  goto <D.8662>;
  <D.8661>:;
  {
    uint32_t w0;
    uint32_t w1;
    uint32_t w2;
    uint32_t cc;

        uint32_t w0;
        uint32_t w1;
        uint32_t w2;
        uint32_t cc;
    w0 = dist[u + 2];
    w1 = dist[u + 1];
    w2 = dist[u];
    cc = v0 - w0 >> 31;
    cc = (v1 - w1) - cc >> 31;
    cc = (v2 - w2) - cc >> 31;
    z = z + (int) cc;
  }
  u = u + 3;
  <D.8662>:;
  if (u <= 53) goto <D.8661>; else goto <D.8663>;
  <D.8663>:;
  return z;
}


;; Function BerExp (null)
;; enabled by -tree-original


{
  int s;
  int i;
  fpr r;
  uint32_t sw;
  uint32_t w;
  uint64_t z;

    int s;
    int i;
    fpr r;
    uint32_t sw;
    uint32_t w;
    uint64_t z;
  s = (int) fpr_trunc (falcon_inner_fpr_mul (x, 4609176140021203710));
  r = fpr_sub (x, falcon_inner_fpr_mul (fpr_of ((int64_t) s), 4604418534313441775));
  sw = (long unsigned int) s;
  sw = ((long unsigned int) sw ^ 63) & (long unsigned int) ((signed int) (63 - (long unsigned int) sw) >> 31) ^ (long unsigned int) sw;
  s = (int) sw;
  z = (falcon_inner_fpr_expm_p63 (r, ccs) << 1) + 18446744073709551615 >> s;
  i = 64;
  <D.8675>:;
  i = i + -8;
  w = (long unsigned int) prng_get_u8 (p) - ((long unsigned int) (z >> i) & 255);
  if (w == 0 && i > 0) goto <D.8675>; else goto <D.8676>;
  <D.8676>:;
  return (int) (w >> 31);
}


;; Function falcon_inner_sampler (null)
;; enabled by -tree-original


{
  struct sampler_context * spc;
  int s;
  fpr r;
  fpr dss;
  fpr ccs;

    struct sampler_context * spc;
    int s;
    fpr r;
    fpr dss;
    fpr ccs;
  spc = (struct sampler_context *) ctx;
  s = (int) fpr_floor (mu);
  r = fpr_sub (mu, fpr_of ((int64_t) s));
  dss = fpr_half (fpr_sqr (isigma));
  ccs = falcon_inner_fpr_mul (isigma, spc->sigma_min);
  <D.8691>:;
  {
    int z0;
    int z;
    int b;
    fpr x;

        int z0;
        int z;
        int b;
        fpr x;
    z0 = falcon_inner_gaussian0_sampler (&spc->p);
    b = (int) prng_get_u8 (&spc->p) & 1;
    z = ((b << 1) + -1) * z0 + b;
    x = falcon_inner_fpr_mul (fpr_sqr (fpr_sub (fpr_of ((int64_t) z), r)), dss);
    x = fpr_sub (x, falcon_inner_fpr_mul (fpr_of ((int64_t) (z0 * z0)), 4594603506513722306));
    if (BerExp (&spc->p, x, ccs) != 0)
      {
        return s + z;
      }
  }
  goto <D.8691>;
}


;; Function falcon_inner_sign_tree (null)
;; enabled by -tree-original


{
  fpr * ftmp;

    fpr * ftmp;
  ftmp = (fpr *) tmp;
  <D.8705>:;
  {
    struct sampler_context spc;
    int (*samplerZ) (void *, fpr, fpr) samp;
    void * samp_ctx;

        struct sampler_context spc;
        int (*samplerZ) (void *, fpr, fpr) samp;
        void * samp_ctx;
    spc.sigma_min = fpr_sigma_min[logn];
    falcon_inner_prng_init (&spc.p, rng);
    samp = falcon_inner_sampler;
    samp_ctx = (void *) &spc;
    if (do_sign_tree (samp, samp_ctx, sig, expanded_key, hm, logn, ftmp) != 0)
      {
        goto <D.8704>;
      }
  }
  goto <D.8705>;
  <D.8704>:;
}


;; Function falcon_inner_sign_dyn (null)
;; enabled by -tree-original


{
  fpr * ftmp;

    fpr * ftmp;
  ftmp = (fpr *) tmp;
  <D.8722>:;
  {
    struct sampler_context spc;
    int (*samplerZ) (void *, fpr, fpr) samp;
    void * samp_ctx;

        struct sampler_context spc;
        int (*samplerZ) (void *, fpr, fpr) samp;
        void * samp_ctx;
    spc.sigma_min = fpr_sigma_min[logn];
    falcon_inner_prng_init (&spc.p, rng);
    samp = falcon_inner_sampler;
    samp_ctx = (void *) &spc;
    if (do_sign_dyn (samp, samp_ctx, sig, f, g, F, G, hm, logn, ftmp) != 0)
      {
        goto <D.8721>;
      }
  }
  goto <D.8722>;
  <D.8721>:;
}


;; Function falcon_inner_sign_dyn_lazy (null)
;; enabled by -tree-original


{
  fpr * ftmp;
  struct inner_shake256_context * dummy1 = rng;

    fpr * ftmp;
    struct inner_shake256_context * dummy1 = rng;
  dummy1 = dummy1 + 208;
  ftmp = (fpr *) tmp;
  <D.8739>:;
  {
    int (*samplerZ) (void *, fpr, fpr) samp = 0B;
    void * samp_ctx = 0B;

        int (*samplerZ) (void *, fpr, fpr) samp = 0B;
        void * samp_ctx = 0B;
    if (do_sign_dyn_lazy (samp, samp_ctx, sig, f, g, F, G, hm, logn, ftmp) != 0) goto <D.8738>; else goto <D.8738>;
  }
  goto <D.8739>;
  <D.8738>:;
}

