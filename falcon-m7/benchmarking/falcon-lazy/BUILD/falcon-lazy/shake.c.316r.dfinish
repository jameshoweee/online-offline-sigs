
;; Function process_block (process_block, funcdef_no=18, decl_uid=6908, cgraph_uid=19, symbol_order=38)

(note 1 0 4 NOTE_INSN_DELETED)
(note 4 1 11 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 11 4 3 2 NOTE_INSN_PROLOGUE_END)
(note 3 11 6 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 6 3 17 2 (parallel [
            (asm_input/v ("push	{ r1, r2, r3, r4, r5, r6, r7, r8, r10, r11, r12, lr }
	sub	sp, sp, #232
	
	@ Invert some words (alternate internal representation, which
	@ saves some operations).
	
	@ Invert A[1] and A[2].
	adds	r1, r0, #8
	ldm	r1, { r2, r3, r4, r5 }
	mvns	r2, r2
	mvns	r3, r3
	mvns	r4, r4
	mvns	r5, r5
	stm	r1!, { r2, r3, r4, r5 }
	@ Invert A[8]
	adds	r1, r0, #64
	ldm	r1, { r2, r3 }
	mvns	r2, r2
	mvns	r3, r3
	stm	r1!, { r2, r3 }
	@ Invert A[12]
	adds	r1, r0, #96
	ldm	r1, { r2, r3 }
	mvns	r2, r2
	mvns	r3, r3
	stm	r1!, { r2, r3 }
	@ Invert A[17]
	adds	r1, r0, #136
	ldm	r1, { r2, r3 }
	mvns	r2, r2
	mvns	r3, r3
	stm	r1!, { r2, r3 }
	@ Invert A[20]
	adds	r1, r0, #160
	ldm	r1, { r2, r3 }
	mvns	r2, r2
	mvns	r3, r3
	stm	r1!, { r2, r3 }
	
	@ Do 24 rounds. Each loop iteration performs one rounds. We
	@ keep eight times the current round counter in [sp] (i.e.
	@ a multiple of 8, from 0 to 184).
	
	eors	r1, r1
	str	r1, [sp, #0]
	.process_block_loop:
	
	@ xor(A[5*i+0]) -> r1:r2
	@ xor(A[5*i+1]) -> r3:r4
	@ xor(A[5*i+2]) -> r5:r6
	@ xor(A[5*i+3]) -> r7:r8
	@ xor(A[5*i+4]) -> r10:r11
	ldm	r0!, { r1, r2, r3, r4, r5, r6, r7, r8 }
	adds	r0, #8
	ldm	r0!, { r10, r11, r12 }
	eors	r1, r10
	eors	r2, r11
	eors	r3, r12
	ldm	r0!, { r10, r11, r12 }
	eors	r4, r10
	eors	r5, r11
	eors	r6, r12
	ldm	r0!, { r10, r11 }
	eors	r7, r10
	eors	r8, r11
	adds	r0, #8
	ldm	r0!, { r10, r11, r12 }
	eors	r1, r10
	eors	r2, r11
	eors	r3, r12
	ldm	r0!, { r10, r11, r12 }
	eors	r4, r10
	eors	r5, r11
	eors	r6, r12
	ldm	r0!, { r10, r11 }
	eors	r7, r10
	eors	r8, r11
	adds	r0, #8
	ldm	r0!, { r10, r11, r12 }
	eors	r1, r10
	eors	r2, r11
	eors	r3, r12
	ldm	r0!, { r10, r11, r12 }
	eors	r4, r10
	eors	r5, r11
	eors	r6, r12
	ldm	r0!, { r10, r11 }
	eors	r7, r10
	eors	r8, r11
	adds	r0, #8
	ldm	r0!, { r10, r11, r12 }
	eors	r1, r10
	eors	r2, r11
	eors	r3, r12
	ldm	r0!, { r10, r11, r12 }
	eors	r4, r10
	eors	r5, r11
	eors	r6, r12
	ldm	r0!, { r10, r11 }
	eors	r7, r10
	eors	r8, r11
	ldm	r0!, { r10, r11 }
	subs	r0, #200
	ldr	r12, [r0, #32]
	eors	r10, r12
	ldr	r12, [r0, #36]
	eors	r11, r12
	ldr	r12, [r0, #72]
	eors	r10, r12
	ldr	r12, [r0, #76]
	eors	r11, r12
	ldr	r12, [r0, #112]
	eors	r10, r12
	ldr	r12, [r0, #116]
	eors	r11, r12
	ldr	r12, [r0, #152]
	eors	r10, r12
	ldr	r12, [r0, #156]
	eors	r11, r12
	
	@ t0 = xor(A[5*i+4]) ^ rotl1(xor(A[5*i+1])) -> r10:r11
	@ t1 = xor(A[5*i+0]) ^ rotl1(xor(A[5*i+2])) -> r1:r2
	@ t2 = xor(A[5*i+1]) ^ rotl1(xor(A[5*i+3])) -> r3:r4
	@ t3 = xor(A[5*i+2]) ^ rotl1(xor(A[5*i+4])) -> r5:r6
	@ t4 = xor(A[5*i+3]) ^ rotl1(xor(A[5*i+0])) -> r7:r8
	str	r11, [sp, #4]
	mov	r12, r10
	eors	r10, r10, r3, lsl #1
	eors	r10, r10, r4, lsr #31
	eors	r11, r11, r4, lsl #1
	eors	r11, r11, r3, lsr #31
	eors	r3, r3, r7, lsl #1
	eors	r3, r3, r8, lsr #31
	eors	r4, r4, r8, lsl #1
	eors	r4, r4, r7, lsr #31
	eors	r7, r7, r1, lsl #1
	eors	r7, r7, r2, lsr #31
	eors	r8, r8, r2, lsl #1
	eors	r8, r8, r1, lsr #31
	eors	r1, r1, r5, lsl #1
	eors	r1, r1, r6, lsr #31
	eors	r2, r2, r6, lsl #1
	eors	r2, r2, r5, lsr #31
	eors	r5, r5, r12, lsl #1
	eors	r6, r6, r12, lsr #31
	ldr	r12, [sp, #4]
	eors	r5, r5, r12, lsr #31
	eors	r6, r6, r12, lsl #1
	
	@ Save t2, t3 and t4 on the stack.
	addw	r12, sp, #4
	stm	r12, { r3, r4, r5, r6, r7, r8 }
	
	@ We XOR one of the t0..t4 values into each A[] word, and
	@ rotate the result by some amount (each word has its own
	@ amount). The results are written back into a stack buffer
	@ that starts at sp+32
	addw	r12, sp, #32
	
	@ XOR t0 into A[5*i+0] and t1 into A[5*i+1]; each A[i] is also
	@ rotated left by some amount.
	
	@ A[0] and A[1]
	ldm	r0!, { r5, r6, r7, r8 }
	eors	r5, r10
	eors	r6, r11
	eors	r3, r7, r1
	eors	r4, r8, r2
	lsl	r7, r3, #1
	orr	r7, r7, r4, lsr #31
	lsl	r8, r4, #1
	orr	r8, r8, r3, lsr #31
	stm	r12!, { r5, r6, r7, r8 }
	
	@ A[5] and A[6]
	adds	r0, #24
	ldm	r0!, { r5, r6, r7, r8 }
	eors	r3, r5, r10
	eors	r4, r6, r11
	lsl	r5, r4, #4
	orr	r5, r5, r3, lsr #28
	lsl	r6, r3, #4
	orr	r6, r6, r4, lsr #28
	eors	r3, r7, r1
	eors	r4, r8, r2
	lsl	r7, r4, #12
	orr	r7, r7, r3, lsr #20
	lsl	r8, r3, #12
	orr	r8, r8, r4, lsr #20
	stm	r12!, { r5, r6, r7, r8 }
	
	@ A[10] and A[11]
	adds	r0, #24
	ldm	r0!, { r5, r6, r7, r8 }
	eors	r3, r5, r10
	eors	r4, r6, r11
	lsl	r5, r3, #3
	orr	r5, r5, r4, lsr #29
	lsl	r6, r4, #3
	orr	r6, r6, r3, lsr #29
	eors	r3, r7, r1
	eors	r4, r8, r2
	lsl	r7, r3, #10
	orr	r7, r7, r4, lsr #22
	lsl	r8, r4, #10
	orr	r8, r8, r3, lsr #22
	stm	r12!, { r5, r6, r7, r8 }
	
	@ A[15] and A[16]
	adds	r0, #24
	ldm	r0!, { r5, r6, r7, r8 }
	eors	r3, r5, r10
	eors	r4, r6, r11
	lsl	r5, r4, #9
	orr	r5, r5, r3, lsr #23
	lsl	r6, r3, #9
	orr	r6, r6, r4, lsr #23
	eors	r3, r7, r1
	eors	r4, r8, r2
	lsl	r7, r4, #13
	orr	r7, r7, r3, lsr #19
	lsl	r8, r3, #13
	orr	r8, r8, r4, lsr #19
	stm	r12!, { r5, r6, r7, r8 }
	
	@ A[20] and A[21]
	adds	r0, #24
	ldm	r0!, { r5, r6, r7, r8 }
	eors	r3, r5, r10
	eors	r4, r6, r11
	lsl	r5, r3, #18
	orr	r5, r5, r4, lsr #14
	lsl	r6, r4, #18
	orr	r6, r6, r3, lsr #14
	eors	r3, r7, r1
	eors	r4, r8, r2
	lsl	r7, r3, #2
	orr	r7, r7, r4, lsr #30
	lsl	r8, r4, #2
	orr	r8, r8, r3, lsr #30
	stm	r12!, { r5, r6, r7, r8 }
	
	@ XOR t2 into A[5*i+2] and t3 into A[5*i+3]; each A[i] is also
	@ rotated left by some amount. We reload t2 into r1:r2 and t3
	@ into r3:r4.
	addw	r5, sp, #4
	ldm	r5!, { r1, r2, r3, r4 }
	
	@ A[2] and A[3]
	subs	r0, #160
	ldm	r0!, { r5, r6, r7, r8 }
	eors	r10, r5, r1
	eors	r11, r6, r2
	lsl	r5, r11, #30
	orr	r5, r5, r10, lsr #2
	lsl	r6, r10, #30
	orr	r6, r6, r11, lsr #2
	eors	r10, r7, r3
	eors	r11, r8, r4
	lsl	r7, r10, #28
	orr	r7, r7, r11, lsr #4
	lsl	r8, r11, #28
	orr	r8, r8, r10, lsr #4
	stm	r12!, { r5, r6, r7, r8 }
	
	@ A[7] and A[8]
	adds	r0, #24
	ldm	r0!, { r5, r6, r7, r8 }
	eors	r10, r5, r1
	eors	r11, r6, r2
	lsl	r5, r10, #6
	orr	r5, r5, r11, lsr #26
	lsl	r6, r11, #6
	orr	r6, r6, r10, lsr #26
	eors	r10, r7, r3
	eors	r11, r8, r4
	lsl	r7, r11, #23
	orr	r7, r7, r10, lsr #9
	lsl	r8, r10, #23
	orr	r8, r8, r11, lsr #9
	stm	r12!, { r5, r6, r7, r8 }
	
	@ A[12] and A[13]
	adds	r0, #24
	ldm	r0!, { r5, r6, r7, r8 }
	eors	r10, r5, r1
	eors	r11, r6, r2
	lsl	r5, r11, #11
	orr	r5, r5, r10, lsr #21
	lsl	r6, r10, #11
	orr	r6, r6, r11, lsr #21
	eors	r10, r7, r3
	eors	r11, r8, r4
	lsl	r7, r10, #25
	orr	r7, r7, r11, lsr #7
	lsl	r8, r11, #25
	orr	r8, r8, r10, lsr #7
	stm	r12!, { r5, r6, r7, r8 }
	
	@ A[17] and A[18]
	adds	r0, #24
	ldm	r0!, { r5, r6, r7, r8 }
	eors	r10, r5, r1
	eors	r11, r6, r2
	lsl	r5, r10, #15
	orr	r5, r5, r11, lsr #17
	lsl	r6, r11, #15
	orr	r6, r6, r10, lsr #17
	eors	r10, r7, r3
	eors	r11, r8, r4
	lsl	r7, r10, #21
	orr	r7, r7, r11, lsr #11
	lsl	r8, r11, #21
	orr	r8, r8, r10, lsr #11
	stm	r12!, { r5, r6, r7, r8 }
	
	@ A[22] and A[23]
	adds	r0, #24
	ldm	r0!, { r5, r6, r7, r8 }
	eors	r10, r5, r1
	eors	r11, r6, r2
	lsl	r5, r11, #29
	orr	r5, r5, r10, lsr #3
	lsl	r6, r10, #29
	orr	r6, r6, r11, lsr #3
	eors	r10, r7, r3
	eors	r11, r8, r4
	lsl	r7, r11, #24
	orr	r7, r7, r10, lsr #8
	lsl	r8, r10, #24
	orr	r8, r8, r11, lsr #8
	stm	r12!, { r5, r6, r7, r8 }
	
	@ XOR t4 into A[5*i+4]; each A[i] is also rotated left by some
	@ amount. We reload t4 into r1:r2.
	ldr	r1, [sp, #20]
	ldr	r2, [sp, #24]
	
	@ A[4]
	subs	r0, #160
	ldm	r0!, { r5, r6 }
	eors	r3, r5, r1
	eors	r4, r6, r2
	lsl	r5, r3, #27
	orr	r5, r5, r4, lsr #5
	lsl	r6, r4, #27
	orr	r6, r6, r3, lsr #5
	stm	r12!, { r5, r6 }
	
	@ A[9]
	adds	r0, #32
	ldm	r0!, { r5, r6 }
	eors	r3, r5, r1
	eors	r4, r6, r2
	lsl	r5, r3, #20
	orr	r5, r5, r4, lsr #12
	lsl	r6, r4, #20
	orr	r6, r6, r3, lsr #12
	stm	r12!, { r5, r6 }
	
	@ A[14]
	adds	r0, #32
	ldm	r0!, { r5, r6 }
	eors	r3, r5, r1
	eors	r4, r6, r2
	lsl	r5, r4, #7
	orr	r5, r5, r3, lsr #25
	lsl	r6, r3, #7
	orr	r6, r6, r4, lsr #25
	stm	r12!, { r5, r6 }
	
	@ A[19]
	adds	r0, #32
	ldm	r0!, { r5, r6 }
	eors	r3, r5, r1
	eors	r4, r6, r2
	lsl	r5, r3, #8
	orr	r5, r5, r4, lsr #24
	lsl	r6, r4, #8
	orr	r6, r6, r3, lsr #24
	stm	r12!, { r5, r6 }
	
	@ A[24]
	adds	r0, #32
	ldm	r0!, { r5, r6 }
	eors	r3, r5, r1
	eors	r4, r6, r2
	lsl	r5, r3, #14
	orr	r5, r5, r4, lsr #18
	lsl	r6, r4, #14
	orr	r6, r6, r3, lsr #18
	stm	r12!, { r5, r6 }
	
	subs	r0, #200
	
	@ At that point, the stack buffer at sp+32 contains the words
	@ at the following indexes (0 to 24) and offsets (from sp)
	@   A[ 0]    0      32
	@   A[ 1]    1      40
	@   A[ 2]   10     112
	@   A[ 3]   11     120
	@   A[ 4]   20     192
	@   A[ 5]    2      48
	@   A[ 6]    3      56
	@   A[ 7]   12     128
	@   A[ 8]   13     136
	@   A[ 9]   21     200
	@   A[10]    4      64
	@   A[11]    5      72
	@   A[12]   14     144
	@   A[13]   15     152
	@   A[14]   22     208
	@   A[15]    6      80
	@   A[16]    7      88
	@   A[17]   16     160
	@   A[18]   17     168
	@   A[19]   23     216
	@   A[20]    8      96
	@   A[21]    9     104
	@   A[22]   18     176
	@   A[23]   19     184
	@   A[24]   24     224
	@ A[0], A[6], A[12], A[18] and A[24]
	ldr	r1, [sp, #(32 + 8 * 0)]
	ldr	r2, [sp, #(36 + 8 * 0)]
	ldr	r3, [sp, #(32 + 8 * 3)]
	ldr	r4, [sp, #(36 + 8 * 3)]
	ldr	r5, [sp, #(32 + 8 * 14)]
	ldr	r6, [sp, #(36 + 8 * 14)]
	ldr	r7, [sp, #(32 + 8 * 17)]
	ldr	r8, [sp, #(36 + 8 * 17)]
	ldr	r10, [sp, #(32 + 8 * 24)]
	ldr	r11, [sp, #(36 + 8 * 24)]
	orrs	r12, r3, r5
	eors	r12, r1
	str	r12, [r0, #(8 * 0)]
	orrs	r12, r4, r6
	eors	r12, r2
	str	r12, [r0, #(4 + 8 * 0)]
	orns	r12, r7, r5
	eors	r12, r3
	str	r12, [r0, #(8 * 1)]
	orns	r12, r8, r6
	eors	r12, r4
	str	r12, [r0, #(4 + 8 * 1)]
	ands	r12, r7, r10
	eors	r12, r5
	str	r12, [r0, #(8 * 2)]
	ands	r12, r8, r11
	eors	r12, r6
	str	r12, [r0, #(4 + 8 * 2)]
	orrs	r12, r1, r10
	eors	r12, r7
	str	r12, [r0, #(8 * 3)]
	orrs	r12, r2, r11
	eors	r12, r8
	str	r12, [r0, #(4 + 8 * 3)]
	ands	r12, r1, r3
	eors	r12, r10
	str	r12, [r0, #(8 * 4)]
	ands	r12, r2, r4
	eors	r12, r11
	str	r12, [r0, #(4 + 8 * 4)]
	
	@ A[3], A[9], A[10], A[16] and A[22]
	ldr	r1, [sp, #(32 + 8 * 11)]
	ldr	r2, [sp, #(36 + 8 * 11)]
	ldr	r3, [sp, #(32 + 8 * 21)]
	ldr	r4, [sp, #(36 + 8 * 21)]
	ldr	r5, [sp, #(32 + 8 * 4)]
	ldr	r6, [sp, #(36 + 8 * 4)]
	ldr	r7, [sp, #(32 + 8 * 7)]
	ldr	r8, [sp, #(36 + 8 * 7)]
	ldr	r10, [sp, #(32 + 8 * 18)]
	ldr	r11, [sp, #(36 + 8 * 18)]
	orrs	r12, r3, r5
	eors	r12, r1
	str	r12, [r0, #(8 * 5)]
	orrs	r12, r4, r6
	eors	r12, r2
	str	r12, [r0, #(4 + 8 * 5)]
	ands	r12, r7, r5
	eors	r12, r3
	str	r12, [r0, #(8 * 6)]
	ands	r12, r8, r6
	eors	r12, r4
	str	r12, [r0, #(4 + 8 * 6)]
	orns	r12, r7, r10
	eors	r12, r5
	str	r12, [r0, #(8 * 7)]
	orns	r12, r8, r11
	eors	r12, r6
	str	r12, [r0, #(4 + 8 * 7)]
	orrs	r12, r1, r10
	eors	r12, r7
	str	r12, [r0, #(8 * 8)]
	orrs	r12, r2, r11
	eors	r12, r8
	str	r12, [r0, #(4 + 8 * 8)]
	ands	r12, r1, r3
	eors	r12, r10
	str	r12, [r0, #(8 * 9)]
	ands	r12, r2, r4
	eors	r12, r11
	str	r12, [r0, #(4 + 8 * 9)]
	
	@ A[1], A[7], A[13], A[19] and A[20]
	ldr	r1, [sp, #(32 + 8 * 1)]
	ldr	r2, [sp, #(36 + 8 * 1)]
	ldr	r3, [sp, #(32 + 8 * 12)]
	ldr	r4, [sp, #(36 + 8 * 12)]
	ldr	r5, [sp, #(32 + 8 * 15)]
	ldr	r6, [sp, #(36 + 8 * 15)]
	ldr	r7, [sp, #(32 + 8 * 23)]
	ldr	r8, [sp, #(36 + 8 * 23)]
	ldr	r10, [sp, #(32 + 8 * 8)]
	ldr	r11, [sp, #(36 + 8 * 8)]
	orrs	r12, r3, r5
	eors	r12, r1
	str	r12, [r0, #(8 * 10)]
	orrs	r12, r4, r6
	eors	r12, r2
	str	r12, [r0, #(4 + 8 * 10)]
	ands	r12, r7, r5
	eors	r12, r3
	str	r12, [r0, #(8 * 11)]
	ands	r12, r8, r6
	eors	r12, r4
	str	r12, [r0, #(4 + 8 * 11)]
	bics	r12, r10, r7
	eors	r12, r5
	str	r12, [r0, #(8 * 12)]
	bics	r12, r11, r8
	eors	r12, r6
	str	r12, [r0, #(4 + 8 * 12)]
	mvns	r7, r7
	mvns	r8, r8
	orrs	r12, r1, r10
	eors	r12, r7
	str	r12, [r0, #(8 * 13)]
	orrs	r12, r2, r11
	eors	r12, r8
	str	r12, [r0, #(4 + 8 * 13)]
	ands	r12, r1, r3
	eors	r12, r10
	str	r12, [r0, #(8 * 14)]
	ands	r12, r2, r4
	eors	r12, r11
	str	r12, [r0, #(4 + 8 * 14)]
	
	@ A[4], A[5], A[11], A[17] and A[23]
	ldr	r1, [sp, #(32 + 8 * 20)]
	ldr	r2, [sp, #(36 + 8 * 20)]
	ldr	r3, [sp, #(32 + 8 * 2)]
	ldr	r4, [sp, #(36 + 8 * 2)]
	ldr	r5, [sp, #(32 + 8 * 5)]
	ldr	r6, [sp, #(36 + 8 * 5)]
	ldr	r7, [sp, #(32 + 8 * 16)]
	ldr	r8, [sp, #(36 + 8 * 16)]
	ldr	r10, [sp, #(32 + 8 * 19)]
	ldr	r11, [sp, #(36 + 8 * 19)]
	ands	r12, r3, r5
	eors	r12, r1
	str	r12, [r0, #(8 * 15)]
	ands	r12, r4, r6
	eors	r12, r2
	str	r12, [r0, #(4 + 8 * 15)]
	orrs	r12, r7, r5
	eors	r12, r3
	str	r12, [r0, #(8 * 16)]
	orrs	r12, r8, r6
	eors	r12, r4
	str	r12, [r0, #(4 + 8 * 16)]
	orns	r12, r10, r7
	eors	r12, r5
	str	r12, [r0, #(8 * 17)]
	orns	r12, r11, r8
	eors	r12, r6
	str	r12, [r0, #(4 + 8 * 17)]
	mvns	r7, r7
	mvns	r8, r8
	ands	r12, r1, r10
	eors	r12, r7
	str	r12, [r0, #(8 * 18)]
	ands	r12, r2, r11
	eors	r12, r8
	str	r12, [r0, #(4 + 8 * 18)]
	orrs	r12, r1, r3
	eors	r12, r10
	str	r12, [r0, #(8 * 19)]
	orrs	r12, r2, r4
	eors	r12, r11
	str	r12, [r0, #(4 + 8 * 19)]
	
	@ A[2], A[8], A[14], A[15] and A[21]
	ldr	r1, [sp, #(32 + 8 * 10)]
	ldr	r2, [sp, #(36 + 8 * 10)]
	ldr	r3, [sp, #(32 + 8 * 13)]
	ldr	r4, [sp, #(36 + 8 * 13)]
	ldr	r5, [sp, #(32 + 8 * 22)]
	ldr	r6, [sp, #(36 + 8 * 22)]
	ldr	r7, [sp, #(32 + 8 * 6)]
	ldr	r8, [sp, #(36 + 8 * 6)]
	ldr	r10, [sp, #(32 + 8 * 9)]
	ldr	r11, [sp, #(36 + 8 * 9)]
	bics	r12, r5, r3
	eors	r12, r1
	str	r12, [r0, #(8 * 20)]
	bics	r12, r6, r4
	eors	r12, r2
	str	r12, [r0, #(4 + 8 * 20)]
	ands	r12, r1, r3
	eors	r12, r10
	str	r12, [r0, #(8 * 24)]
	ands	r12, r2, r4
	eors	r12, r11
	str	r12, [r0, #(4 + 8 * 24)]
	mvns	r3, r3
	mvns	r4, r4
	orrs	r12, r7, r5
	eors	r12, r3
	str	r12, [r0, #(8 * 21)]
	orrs	r12, r8, r6
	eors	r12, r4
	str	r12, [r0, #(4 + 8 * 21)]
	ands	r12, r7, r10
	eors	r12, r5
	str	r12, [r0, #(8 * 22)]
	ands	r12, r8, r11
	eors	r12, r6
	str	r12, [r0, #(4 + 8 * 22)]
	orrs	r12, r1, r10
	eors	r12, r7
	str	r12, [r0, #(8 * 23)]
	orrs	r12, r2, r11
	eors	r12, r8
	str	r12, [r0, #(4 + 8 * 23)]
	
	@ Get round counter XOR round constant into A[0]
	ldr	r1, [sp, #0]
	adr	r2, .process_block_RC
	adds	r2, r1
	ldm	r2, { r3, r4 }
	ldm	r0, { r5, r6 }
	eors	r5, r3
	eors	r6, r4
	stm	r0, { r5, r6 }
	
	@ Increment round counter, loop until all 24 rounds are done.
	
	adds	r1, #8
	str	r1, [sp, #0]
	cmp	r1, #192
	blo	.process_block_loop
	@ Invert A[1] and A[2].
	adds	r1, r0, #8
	ldm	r1, { r2, r3, r4, r5 }
	mvns	r2, r2
	mvns	r3, r3
	mvns	r4, r4
	mvns	r5, r5
	stm	r1!, { r2, r3, r4, r5 }
	@ Invert A[8]
	adds	r1, r0, #64
	ldm	r1, { r2, r3 }
	mvns	r2, r2
	mvns	r3, r3
	stm	r1!, { r2, r3 }
	@ Invert A[12]
	adds	r1, r0, #96
	ldm	r1, { r2, r3 }
	mvns	r2, r2
	mvns	r3, r3
	stm	r1!, { r2, r3 }
	@ Invert A[17]
	adds	r1, r0, #136
	ldm	r1, { r2, r3 }
	mvns	r2, r2
	mvns	r3, r3
	stm	r1!, { r2, r3 }
	@ Invert A[20]
	adds	r1, r0, #160
	ldm	r1, { r2, r3 }
	mvns	r2, r2
	mvns	r3, r3
	stm	r1!, { r2, r3 }
	
	add	sp, sp, #232
	pop	{ r1, r2, r3, r4, r5, r6, r7, r8, r10, r11, r12, pc }
	
	.process_block_RC:
	.word	0x00000001
	.word	0x00000000
	.word	0x00008082
	.word	0x00000000
	.word	0x0000808A
	.word	0x80000000
	.word	0x80008000
	.word	0x80000000
	.word	0x0000808B
	.word	0x00000000
	.word	0x80000001
	.word	0x00000000
	.word	0x80008081
	.word	0x80000000
	.word	0x00008009
	.word	0x80000000
	.word	0x0000008A
	.word	0x00000000
	.word	0x00000088
	.word	0x00000000
	.word	0x80008009
	.word	0x00000000
	.word	0x8000000A
	.word	0x00000000
	.word	0x8000808B
	.word	0x00000000
	.word	0x0000008B
	.word	0x80000000
	.word	0x00008089
	.word	0x80000000
	.word	0x00008003
	.word	0x80000000
	.word	0x00008002
	.word	0x80000000
	.word	0x00000080
	.word	0x80000000
	.word	0x0000800A
	.word	0x00000000
	.word	0x8000000A
	.word	0x80000000
	.word	0x80008081
	.word	0x80000000
	.word	0x00008080
	.word	0x80000000
	.word	0x80000001
	.word	0x00000000
	.word	0x80008008
	.word	0x80000000
	") ../falcon-lazy/shake.c:42)
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) "../falcon-lazy/shake.c":42:2 -1
     (nil))
(note 17 6 13 2 NOTE_INSN_EPILOGUE_BEG)
(jump_insn:TI 13 17 14 2 (simple_return) "../falcon-lazy/shake.c":619:1 1009 {*thumb2_return}
     (nil)
 -> simple_return)
(barrier 14 13 9)
(note 9 14 10 NOTE_INSN_DELETED)
(note 10 9 0 NOTE_INSN_DELETED)

;; Function falcon_inner_i_shake256_init (falcon_inner_i_shake256_init, funcdef_no=19, decl_uid=6516, cgraph_uid=20, symbol_order=39)

(note 1 0 4 NOTE_INSN_DELETED)
(note 4 1 21 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 21 4 3 2 NOTE_INSN_PROLOGUE_END)
(note 3 21 10 2 NOTE_INSN_FUNCTION_BEG)
(note 10 3 6 2 NOTE_INSN_DELETED)
(insn:TI 6 10 11 2 (set (reg:DI 30 s14 [115])
        (mem:DI (label_ref 26) [0  S8 A64])) "../falcon-lazy/shake.c":1078:11 729 {*movdi_vfp}
     (expr_list:REG_EQUIV (const_int 0 [0])
        (nil)))
(insn:TI 11 6 12 2 (parallel [
            (set (reg:SI 2 r2)
                (const_int 200 [0xc8]))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/shake.c":1084:2 1016 {*thumb2_movsi_shortim}
     (expr_list:REG_EQUAL (const_int 200 [0xc8])
        (nil)))
(insn 12 11 7 2 (parallel [
            (set (reg:SI 1 r1)
                (const_int 0 [0]))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/shake.c":1084:2 1016 {*thumb2_movsi_shortim}
     (nil))
(insn:TI 7 12 14 2 (set (mem:DI (plus:SI (reg/f:SI 0 r0 [orig:114 sc ] [114])
                (const_int 200 [0xc8])) [1 sc_3(D)->dptr+0 S8 A64])
        (reg:DI 30 s14 [115])) "../falcon-lazy/shake.c":1078:11 729 {*movdi_vfp}
     (expr_list:REG_DEAD (reg:DI 30 s14 [115])
        (nil)))
(call_insn/j:TI 14 7 15 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memset") [flags 0x41]  <function_decl 0x14c1dc800 __builtin_memset>) [0 __builtin_memset S4 A32])
                    (const_int 0 [0])))
            (return)
            (use (const_int 0 [0]))
        ]) "../falcon-lazy/shake.c":1084:2 293 {*sibcall_value_insn}
     (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_CALL_DECL (symbol_ref:SI ("memset") [flags 0x41]  <function_decl 0x14c1dc800 __builtin_memset>)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(barrier 15 14 24)
(code_label 24 15 25 5 (nil) [0 uses])
(insn 25 24 26 (unspec_volatile [
            (const_int 0 [0])
        ] VUNSPEC_ALIGN8) 386 {align_8}
     (nil))
(code_label 26 25 27 4 (nil) [0 uses])
(insn 27 26 28 (unspec_volatile [
            (const_int 0 [0])
        ] VUNSPEC_POOL_8) 391 {consttable_8}
     (nil))
(insn 28 27 29 (unspec_volatile [
            (const_int 0 [0])
        ] VUNSPEC_POOL_END) 387 {consttable_end}
     (nil))
(barrier 29 28 20)
(note 20 29 0 NOTE_INSN_DELETED)

;; Function falcon_inner_i_shake256_inject (falcon_inner_i_shake256_inject, funcdef_no=20, decl_uid=6520, cgraph_uid=21, symbol_order=40)

(note 1 0 7 NOTE_INSN_DELETED)
(note 7 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 7 5 2 NOTE_INSN_DELETED)
(note 5 4 114 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 114 5 115 2 (parallel [
            (set (mem/c:BLK (pre_modify:SI (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -32 [0xffffffffffffffe0]))) [6  A8])
                (unspec:BLK [
                        (reg:SI 3 r3)
                    ] UNSPEC_PUSH_MULT))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 14 lr))
        ]) "../falcon-lazy/shake.c":1090:1 378 {*push_multi}
     (expr_list:REG_DEAD (reg:SI 9 r9)
        (expr_list:REG_DEAD (reg:SI 8 r8)
            (expr_list:REG_DEAD (reg:SI 7 r7)
                (expr_list:REG_DEAD (reg:SI 6 r6)
                    (expr_list:REG_DEAD (reg:SI 5 r5)
                        (expr_list:REG_DEAD (reg:SI 4 r4)
                            (expr_list:REG_DEAD (reg:SI 3 r3)
                                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                            (set/f (reg/f:SI 13 sp)
                                                (plus:SI (reg/f:SI 13 sp)
                                                    (const_int -32 [0xffffffffffffffe0])))
                                            (set/f (mem/c:SI (reg/f:SI 13 sp) [6  S4 A32])
                                                (reg:SI 3 r3))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [6  S4 A32])
                                                (reg:SI 4 r4))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [6  S4 A32])
                                                (reg:SI 5 r5))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [6  S4 A32])
                                                (reg:SI 6 r6))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [6  S4 A32])
                                                (reg:SI 7 r7))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [6  S4 A32])
                                                (reg:SI 8 r8))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [6  S4 A32])
                                                (reg:SI 9 r9))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 28 [0x1c])) [6  S4 A32])
                                                (reg:SI 14 lr))
                                        ])
                                    (nil))))))))))
(note 115 114 10 2 NOTE_INSN_PROLOGUE_END)
(insn:TI 10 115 2 2 (set (reg/v:SI 7 r7 [orig:134 len ] [134])
        (reg:SI 2 r2 [150])) "../falcon-lazy/shake.c":1094:8 728 {*thumb2_movsi_vfp}
     (expr_list:REG_DEAD (reg:SI 2 r2 [150])
        (nil)))
(insn 2 10 9 2 (set (reg/v/f:SI 9 r9 [orig:132 sc ] [132])
        (reg:SI 0 r0 [148])) "../falcon-lazy/shake.c":1090:1 728 {*thumb2_movsi_vfp}
     (nil))
(insn:TI 9 2 11 2 (set (reg/v:SI 2 r2 [orig:123 dptr ] [123])
        (mem:SI (plus:SI (reg/f:SI 0 r0 [orig:132 sc ] [132])
                (const_int 200 [0xc8])) [1 sc_17(D)->dptr+0 S4 A64])) "../falcon-lazy/shake.c":1093:7 728 {*thumb2_movsi_vfp}
     (expr_list:REG_DEAD (reg/f:SI 0 r0 [orig:132 sc ] [132])
        (nil)))
(jump_insn:TI 11 9 118 2 (parallel [
            (set (pc)
                (if_then_else (eq (reg/v:SI 7 r7 [orig:134 len ] [134])
                        (const_int 0 [0]))
                    (label_ref:SI 52)
                    (pc)))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/shake.c":1094:8 1024 {*thumb2_cbz}
     (expr_list:REG_UNUSED (reg:CC 100 cc)
        (int_list:REG_BR_PROB 118111604 (nil)))
 -> 52)
(note 118 11 119 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 119 118 49 3 (set (reg/v/f:SI 8 r8 [orig:133 in ] [133])
        (reg:SI 1 r1 [149])) 728 {*thumb2_movsi_vfp}
     (expr_list:REG_DEAD (reg:SI 1 r1 [149])
        (nil)))
(code_label 49 119 12 4 11 (nil) [2 uses])
(note 12 49 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(note 15 12 13 4 NOTE_INSN_DELETED)
(insn:TI 13 15 112 4 (set (reg/v:SI 6 r6 [orig:122 clen ] [122])
        (minus:SI (const_int 136 [0x88])
            (reg/v:SI 2 r2 [orig:123 dptr ] [123]))) "../falcon-lazy/shake.c":1097:8 45 {*arm_subsi3_insn}
     (nil))
(insn:TI 112 13 113 4 (set (reg:CC 100 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:122 clen ] [122])
            (reg/v:SI 7 r7 [orig:134 len ] [134]))) 268 {*arm_cmpsi_insn}
     (nil))
(insn:TI 113 112 16 4 (cond_exec (geu:SI (reg:CC 100 cc)
            (const_int 0 [0]))
        (set (reg/v:SI 6 r6 [orig:125 clen ] [125])
            (reg/v:SI 7 r7 [orig:134 len ] [134]))) 6567 {*p *thumb2_movsi_vfp}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil)))
(jump_insn:TI 16 113 17 4 (parallel [
            (set (pc)
                (if_then_else (eq (reg/v:SI 6 r6 [orig:125 clen ] [125])
                        (const_int 0 [0]))
                    (label_ref:SI 37)
                    (pc)))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/shake.c":1102:3 1024 {*thumb2_cbz}
     (expr_list:REG_UNUSED (reg:CC 100 cc)
        (int_list:REG_BR_PROB 118111604 (nil)))
 -> 37)
(note 17 16 18 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn:TI 18 17 20 5 (set (reg:SI 12 ip [135])
        (plus:SI (reg/v:SI 2 r2 [orig:123 dptr ] [123])
            (const_int -1 [0xffffffffffffffff]))) 7 {*arm_addsi3}
     (nil))
(insn 20 18 19 5 (set (reg:SI 14 lr [orig:121 ivtmp.21 ] [121])
        (plus:SI (reg/v/f:SI 8 r8 [orig:133 in ] [133])
            (const_int -1 [0xffffffffffffffff]))) 7 {*arm_addsi3}
     (nil))
(insn:TI 19 20 22 5 (set (reg:SI 12 ip [orig:128 ivtmp.18 ] [128])
        (plus:SI (reg:SI 12 ip [135])
            (reg/v/f:SI 9 r9 [orig:132 sc ] [132]))) 7 {*arm_addsi3}
     (nil))
(insn 22 19 34 5 (set (reg:SI 5 r5 [orig:130 _48 ] [130])
        (plus:SI (reg:SI 14 lr [orig:121 ivtmp.21 ] [121])
            (reg/v:SI 6 r6 [orig:125 clen ] [125]))) 7 {*arm_addsi3}
     (nil))
(code_label 34 22 23 6 9 (nil) [1 uses])
(note 23 34 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 29 23 27 6 (set (reg:SI 4 r4 [orig:140 MEM[base: _37, offset: 0B] ] [140])
        (zero_extend:SI (mem:QI (pre_inc:SI (reg:SI 14 lr [orig:121 ivtmp.21 ] [121])) [0 MEM[base: _37, offset: 0B]+0 S1 A8]))) "../falcon-lazy/shake.c":1103:26 1006 {thumb2_zero_extendqisi2_v6}
     (expr_list:REG_INC (reg:SI 14 lr [orig:121 ivtmp.21 ] [121])
        (nil)))
(insn:TI 27 29 35 6 (set (reg:SI 3 r3 [orig:138 MEM[base: _11, offset: 0B] ] [138])
        (zero_extend:SI (mem:QI (pre_inc:SI (reg:SI 12 ip [orig:128 ivtmp.18 ] [128])) [2 MEM[base: _11, offset: 0B]+0 S1 A8]))) "../falcon-lazy/shake.c":1103:26 1006 {thumb2_zero_extendqisi2_v6}
     (expr_list:REG_INC (reg:SI 12 ip [orig:128 ivtmp.18 ] [128])
        (nil)))
(insn:TI 35 27 31 6 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 14 lr [orig:121 ivtmp.21 ] [121])
            (reg:SI 5 r5 [orig:130 _48 ] [130]))) "../falcon-lazy/shake.c":1102:3 268 {*arm_cmpsi_insn}
     (nil))
(insn:TI 31 35 33 6 (set (reg:SI 3 r3 [141])
        (xor:SI (reg:SI 3 r3 [orig:138 MEM[base: _11, offset: 0B] ] [138])
            (reg:SI 4 r4 [orig:140 MEM[base: _37, offset: 0B] ] [140]))) "../falcon-lazy/shake.c":1103:26 109 {*arm_xorsi3}
     (expr_list:REG_DEAD (reg:SI 4 r4 [orig:140 MEM[base: _37, offset: 0B] ] [140])
        (nil)))
(insn:TI 33 31 36 6 (set (mem:QI (reg:SI 12 ip [orig:128 ivtmp.18 ] [128]) [2 MEM[base: _11, offset: 0B]+0 S1 A8])
        (reg:QI 3 r3 [141])) "../falcon-lazy/shake.c":1103:26 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 3 r3 [141])
        (nil)))
(jump_insn 36 33 37 6 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 34)
            (pc))) "../falcon-lazy/shake.c":1102:3 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (int_list:REG_BR_PROB 955630228 (nil)))
 -> 34)
(code_label 37 36 38 7 8 (nil) [1 uses])
(note 38 37 39 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn:TI 39 38 40 7 (set (reg/v:SI 2 r2 [orig:123 dptr ] [123])
        (plus:SI (reg/v:SI 2 r2 [orig:123 dptr ] [123])
            (reg/v:SI 6 r6 [orig:125 clen ] [125]))) "../falcon-lazy/shake.c":1113:8 7 {*arm_addsi3}
     (nil))
(insn 40 39 41 7 (set (reg/v/f:SI 8 r8 [orig:133 in ] [133])
        (plus:SI (reg/v/f:SI 8 r8 [orig:133 in ] [133])
            (reg/v:SI 6 r6 [orig:125 clen ] [125]))) "../falcon-lazy/shake.c":1114:6 7 {*arm_addsi3}
     (nil))
(insn:TI 41 40 42 7 (parallel [
            (set (reg/v:SI 7 r7 [orig:134 len ] [134])
                (minus:SI (reg/v:SI 7 r7 [orig:134 len ] [134])
                    (reg/v:SI 6 r6 [orig:125 clen ] [125])))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/shake.c":1115:7 1018 {*thumb2_subsi_short}
     (expr_list:REG_DEAD (reg/v:SI 6 r6 [orig:125 clen ] [125])
        (nil)))
(insn:TI 42 41 43 7 (set (reg:CC 100 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:123 dptr ] [123])
            (const_int 136 [0x88]))) "../falcon-lazy/shake.c":1116:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn:TI 43 42 48 7 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 127)
            (pc))) "../falcon-lazy/shake.c":1116:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (int_list:REG_BR_PROB 217325348 (nil)))
 -> 127)
(note 48 43 50 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(note 50 48 51 8 NOTE_INSN_DELETED)
(jump_insn:TI 51 50 52 8 (parallel [
            (set (pc)
                (if_then_else (ne (reg/v:SI 7 r7 [orig:134 len ] [134])
                        (const_int 0 [0]))
                    (label_ref:SI 49)
                    (pc)))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/shake.c":1094:8 1025 {*thumb2_cbnz}
     (expr_list:REG_UNUSED (reg:CC 100 cc)
        (int_list:REG_BR_PROB 955630228 (nil)))
 -> 49)
(code_label 52 51 53 9 7 (nil) [2 uses])
(note 53 52 54 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn:TI 54 53 123 9 (parallel [
            (set (reg:SI 3 r3 [144])
                (const_int 0 [0]))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/shake.c":1121:11 1016 {*thumb2_movsi_shortim}
     (expr_list:REG_EQUIV (const_int 0 [0])
        (nil)))
(insn:TI 123 54 131 9 (parallel [
            (set (mem:SI (plus:SI (reg/v/f:SI 9 r9 [orig:132 sc ] [132])
                        (const_int 200 [0xc8])) [1 sc_17(D)->dptr+0 S4 A64])
                (reg/v:SI 2 r2 [orig:123 dptr ] [123]))
            (set (mem:SI (plus:SI (reg/v/f:SI 9 r9 [orig:132 sc ] [132])
                        (const_int 204 [0xcc])) [1 sc_17(D)->dptr+4 S4 A32])
                (reg:SI 3 r3 [144]))
        ]) "../falcon-lazy/shake.c":1121:11 412 {*thumb2_strd}
     (expr_list:REG_DEAD (reg/v/f:SI 9 r9 [orig:132 sc ] [132])
        (expr_list:REG_DEAD (reg:SI 3 r3 [144])
            (expr_list:REG_DEAD (reg/v:SI 2 r2 [orig:123 dptr ] [123])
                (nil)))))
(note 131 123 117 9 NOTE_INSN_EPILOGUE_BEG)
(jump_insn:TI 117 131 122 9 (parallel [
            (return)
            (set/f (reg/f:SI 13 sp)
                (plus:SI (reg/f:SI 13 sp)
                    (const_int 32 [0x20])))
            (set/f (reg:SI 3 r3)
                (mem/c:SI (reg/f:SI 13 sp) [6  S4 A32]))
            (set/f (reg:SI 4 r4)
                (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                        (const_int 4 [0x4])) [6  S4 A32]))
            (set/f (reg:SI 5 r5)
                (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                        (const_int 8 [0x8])) [6  S4 A32]))
            (set/f (reg:SI 6 r6)
                (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                        (const_int 12 [0xc])) [6  S4 A32]))
            (set/f (reg:SI 7 r7)
                (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                        (const_int 16 [0x10])) [6  S4 A32]))
            (set/f (reg:SI 8 r8)
                (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                        (const_int 20 [0x14])) [6  S4 A32]))
            (set/f (reg:SI 9 r9)
                (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                        (const_int 24 [0x18])) [6  S4 A32]))
            (set/f (reg:SI 15 pc)
                (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                        (const_int 28 [0x1c])) [6  S4 A32]))
        ]) "../falcon-lazy/shake.c":1122:1 381 {*pop_multiple_with_writeback_and_return}
     (expr_list:REG_UNUSED (reg:SI 15 pc)
        (expr_list:REG_UNUSED (reg:SI 3 r3)
            (expr_list:REG_CFA_RESTORE (reg:SI 9 r9)
                (expr_list:REG_CFA_RESTORE (reg:SI 8 r8)
                    (expr_list:REG_CFA_RESTORE (reg:SI 7 r7)
                        (expr_list:REG_CFA_RESTORE (reg:SI 6 r6)
                            (expr_list:REG_CFA_RESTORE (reg:SI 5 r5)
                                (expr_list:REG_CFA_RESTORE (reg:SI 4 r4)
                                    (expr_list:REG_CFA_RESTORE (reg:SI 3 r3)
                                        (nil))))))))))
 -> return)
(barrier 122 117 127)
(code_label 127 122 44 10 21 (nil) [1 uses])
(note 44 127 45 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn:TI 45 44 46 10 (set (reg:SI 0 r0)
        (reg/v/f:SI 9 r9 [orig:132 sc ] [132])) "../falcon-lazy/shake.c":1117:4 728 {*thumb2_movsi_vfp}
     (nil))
(call_insn:TI 46 45 6 10 (parallel [
            (call (mem:SI (symbol_ref:SI ("process_block") [flags 0x3]  <function_decl 0x14c4f9200 process_block>) [0 process_block S4 A32])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "../falcon-lazy/shake.c":1117:4 290 {*call_symbol}
     (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_CALL_DECL (symbol_ref:SI ("process_block") [flags 0x3]  <function_decl 0x14c4f9200 process_block>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 6 46 125 10 (parallel [
            (set (reg/v:SI 2 r2 [orig:123 dptr ] [123])
                (const_int 0 [0]))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/shake.c":1118:9 1016 {*thumb2_movsi_shortim}
     (nil))
(jump_insn:TI 125 6 128 10 (parallel [
            (set (pc)
                (if_then_else (ne (reg/v:SI 7 r7 [orig:134 len ] [134])
                        (const_int 0 [0]))
                    (label_ref:SI 49)
                    (pc)))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/shake.c":1094:8 1025 {*thumb2_cbnz}
     (expr_list:REG_UNUSED (reg:CC 100 cc)
        (int_list:REG_BR_PROB 955630228 (nil)))
 -> 49)
(note 128 125 129 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 129 128 130 11 (set (pc)
        (label_ref 52)) 284 {*arm_jump}
     (nil)
 -> 52)
(barrier 130 129 109)
(note 109 130 111 NOTE_INSN_DELETED)
(note 111 109 0 NOTE_INSN_DELETED)

;; Function falcon_inner_i_shake256_flip (falcon_inner_i_shake256_flip, funcdef_no=21, decl_uid=6522, cgraph_uid=22, symbol_order=41)

(note 1 0 4 NOTE_INSN_DELETED)
(note 4 1 30 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 30 4 3 2 NOTE_INSN_PROLOGUE_END)
(note 3 30 25 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 25 3 9 2 (set (reg:SI 2 r2 [orig:132 _1 ] [132])
        (mem:SI (plus:SI (reg/v/f:SI 0 r0 [orig:118 sc ] [118])
                (const_int 200 [0xc8])) [1 sc_7(D)->dptr+0 S4 A64])) "../falcon-lazy/shake.c":1134:16 728 {*thumb2_movsi_vfp}
     (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/v/f:SI 0 r0 [orig:118 sc ] [118])
                (const_int 200 [0xc8])) [1 sc_7(D)->dptr+0 S4 A64])
        (nil)))
(insn:TI 9 25 11 2 (set (reg:SI 3 r3 [orig:122 sc_7(D)->st.dbuf[_1] ] [122])
        (zero_extend:SI (mem/j:QI (plus:SI (reg/v/f:SI 0 r0 [orig:118 sc ] [118])
                    (reg:SI 2 r2 [orig:132 _1 ] [132])) [2 sc_7(D)->st.dbuf[_1]+0 S1 A8]))) "../falcon-lazy/shake.c":1134:24 1006 {thumb2_zero_extendqisi2_v6}
     (nil))
(insn:TI 11 9 13 2 (set (reg:SI 3 r3 [123])
        (xor:SI (reg:SI 3 r3 [orig:122 sc_7(D)->st.dbuf[_1] ] [122])
            (const_int 31 [0x1f]))) "../falcon-lazy/shake.c":1134:24 109 {*arm_xorsi3}
     (nil))
(insn:TI 13 11 16 2 (set (mem/j:QI (plus:SI (reg/v/f:SI 0 r0 [orig:118 sc ] [118])
                (reg:SI 2 r2 [orig:132 _1 ] [132])) [2 sc_7(D)->st.dbuf[_1]+0 S1 A8])
        (reg:QI 3 r3 [123])) "../falcon-lazy/shake.c":1134:24 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 3 r3 [123])
        (expr_list:REG_DEAD (reg:SI 2 r2 [orig:132 _1 ] [132])
            (nil))))
(insn:TI 16 13 21 2 (set (reg:SI 3 r3 [orig:128 sc_7(D)->st.dbuf[135] ] [128])
        (zero_extend:SI (mem/j:QI (plus:SI (reg/v/f:SI 0 r0 [orig:118 sc ] [118])
                    (const_int 135 [0x87])) [2 sc_7(D)->st.dbuf[135]+0 S1 A8]))) "../falcon-lazy/shake.c":1135:19 1006 {thumb2_zero_extendqisi2_v6}
     (nil))
(insn:TI 21 16 18 2 (set (reg:DI 30 s14 [131])
        (mem:DI (label_ref 37) [0  S8 A64])) "../falcon-lazy/shake.c":1143:11 729 {*movdi_vfp}
     (expr_list:REG_EQUIV (const_int 136 [0x88])
        (nil)))
(insn:TI 18 21 22 2 (set (reg:SI 3 r3 [129])
        (xor:SI (reg:SI 3 r3 [orig:128 sc_7(D)->st.dbuf[135] ] [128])
            (const_int 128 [0x80]))) "../falcon-lazy/shake.c":1135:19 109 {*arm_xorsi3}
     (nil))
(insn:TI 22 18 20 2 (set (mem:DI (plus:SI (reg/v/f:SI 0 r0 [orig:118 sc ] [118])
                (const_int 200 [0xc8])) [1 sc_7(D)->dptr+0 S8 A64])
        (reg:DI 30 s14 [131])) "../falcon-lazy/shake.c":1143:11 729 {*movdi_vfp}
     (expr_list:REG_DEAD (reg:DI 30 s14 [131])
        (nil)))
(insn:TI 20 22 34 2 (set (mem/j:QI (plus:SI (reg/v/f:SI 0 r0 [orig:118 sc ] [118])
                (const_int 135 [0x87])) [2 sc_7(D)->st.dbuf[135]+0 S1 A8])
        (reg:QI 3 r3 [129])) "../falcon-lazy/shake.c":1135:19 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 3 r3 [129])
        (expr_list:REG_DEAD (reg/v/f:SI 0 r0 [orig:118 sc ] [118])
            (nil))))
(note 34 20 32 2 NOTE_INSN_EPILOGUE_BEG)
(jump_insn 32 34 33 2 (simple_return) "../falcon-lazy/shake.c":1144:1 1009 {*thumb2_return}
     (nil)
 -> simple_return)
(barrier 33 32 35)
(code_label 35 33 36 24 (nil) [0 uses])
(insn 36 35 37 (unspec_volatile [
            (const_int 0 [0])
        ] VUNSPEC_ALIGN8) 386 {align_8}
     (nil))
(code_label 37 36 38 23 (nil) [0 uses])
(insn 38 37 39 (unspec_volatile [
            (const_int 136 [0x88])
        ] VUNSPEC_POOL_8) 391 {consttable_8}
     (nil))
(insn 39 38 40 (unspec_volatile [
            (const_int 0 [0])
        ] VUNSPEC_POOL_END) 387 {consttable_end}
     (nil))
(barrier 40 39 28)
(note 28 40 29 NOTE_INSN_DELETED)
(note 29 28 0 NOTE_INSN_DELETED)

;; Function falcon_inner_i_shake256_extract (falcon_inner_i_shake256_extract, funcdef_no=22, decl_uid=6526, cgraph_uid=23, symbol_order=42)

(note 1 0 9 NOTE_INSN_DELETED)
(note 9 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 9 5 2 NOTE_INSN_DELETED)
(note 5 4 75 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 75 5 76 2 (parallel [
            (set (mem/c:BLK (pre_modify:SI (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -24 [0xffffffffffffffe8]))) [6  A8])
                (unspec:BLK [
                        (reg:SI 3 r3)
                    ] UNSPEC_PUSH_MULT))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 14 lr))
        ]) "../falcon-lazy/shake.c":1149:1 378 {*push_multi}
     (expr_list:REG_DEAD (reg:SI 7 r7)
        (expr_list:REG_DEAD (reg:SI 6 r6)
            (expr_list:REG_DEAD (reg:SI 5 r5)
                (expr_list:REG_DEAD (reg:SI 4 r4)
                    (expr_list:REG_DEAD (reg:SI 3 r3)
                        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                    (set/f (reg/f:SI 13 sp)
                                        (plus:SI (reg/f:SI 13 sp)
                                            (const_int -24 [0xffffffffffffffe8])))
                                    (set/f (mem/c:SI (reg/f:SI 13 sp) [6  S4 A32])
                                        (reg:SI 3 r3))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 4 [0x4])) [6  S4 A32])
                                        (reg:SI 4 r4))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 8 [0x8])) [6  S4 A32])
                                        (reg:SI 5 r5))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 12 [0xc])) [6  S4 A32])
                                        (reg:SI 6 r6))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 16 [0x10])) [6  S4 A32])
                                        (reg:SI 7 r7))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 20 [0x14])) [6  S4 A32])
                                        (reg:SI 14 lr))
                                ])
                            (nil))))))))
(note 76 75 2 2 NOTE_INSN_PROLOGUE_END)
(insn:TI 2 76 11 2 (set (reg/v/f:SI 7 r7 [orig:120 sc ] [120])
        (reg:SI 0 r0 [131])) "../falcon-lazy/shake.c":1149:1 728 {*thumb2_movsi_vfp}
     (nil))
(insn 11 2 13 2 (set (reg/v:SI 4 r4 [orig:117 dptr ] [117])
        (mem:SI (plus:SI (reg/f:SI 0 r0 [orig:120 sc ] [120])
                (const_int 200 [0xc8])) [1 sc_13(D)->dptr+0 S4 A64])) "../falcon-lazy/shake.c":1152:7 728 {*thumb2_movsi_vfp}
     (expr_list:REG_DEAD (reg/f:SI 0 r0 [orig:120 sc ] [120])
        (nil)))
(jump_insn:TI 13 11 79 2 (parallel [
            (set (pc)
                (if_then_else (eq (reg:SI 2 r2 [orig:122 len ] [122])
                        (const_int 0 [0]))
                    (label_ref:SI 45)
                    (pc)))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/shake.c":1153:8 1024 {*thumb2_cbz}
     (expr_list:REG_UNUSED (reg:CC 100 cc)
        (int_list:REG_BR_PROB 118111604 (nil)))
 -> 45)
(note 79 13 81 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 81 79 80 3 (set (reg/v/f:SI 6 r6 [orig:121 out ] [121])
        (reg:SI 1 r1 [132])) 728 {*thumb2_movsi_vfp}
     (expr_list:REG_DEAD (reg:SI 1 r1 [132])
        (nil)))
(insn 80 81 86 3 (set (reg/v:SI 5 r5 [orig:122 len ] [122])
        (reg:SI 2 r2 [133])) 728 {*thumb2_movsi_vfp}
     (expr_list:REG_DEAD (reg:SI 2 r2 [133])
        (nil)))
(jump_insn:TI 86 80 87 3 (set (pc)
        (label_ref 42)) 284 {*arm_jump}
     (nil)
 -> 42)
(barrier 87 86 28)
(code_label 28 87 29 4 28 (nil) [2 uses])
(note 29 28 43 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(note 43 29 73 4 NOTE_INSN_DELETED)
(insn:TI 73 43 37 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 2 r2 [orig:119 _35 ] [119])
            (reg/v:SI 5 r5 [orig:122 len ] [122]))) 268 {*arm_cmpsi_insn}
     (nil))
(insn 37 73 74 4 (set (reg:SI 0 r0)
        (reg/v/f:SI 6 r6 [orig:121 out ] [121])) "../falcon-lazy/shake.c":1166:3 728 {*thumb2_movsi_vfp}
     (nil))
(insn:TI 74 37 31 4 (cond_exec (geu:SI (reg:CC 100 cc)
            (const_int 0 [0]))
        (set (reg/v:SI 2 r2 [orig:115 clen ] [115])
            (reg/v:SI 5 r5 [orig:122 len ] [122]))) 6567 {*p *thumb2_movsi_vfp}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil)))
(insn:TI 31 74 40 4 (parallel [
            (set (reg/v:SI 5 r5 [orig:122 len ] [122])
                (minus:SI (reg/v:SI 5 r5 [orig:122 len ] [122])
                    (reg/v:SI 2 r2 [orig:115 clen ] [115])))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/shake.c":1164:7 1018 {*thumb2_subsi_short}
     (nil))
(insn 40 31 41 4 (set (reg/v:SI 4 r4 [orig:117 dptr ] [117])
        (plus:SI (reg/v:SI 4 r4 [orig:117 dptr ] [117])
            (reg:SI 2 r2))) "../falcon-lazy/shake.c":1167:8 7 {*arm_addsi3}
     (nil))
(insn:TI 41 40 38 4 (set (reg/v/f:SI 6 r6 [orig:121 out ] [121])
        (plus:SI (reg/v/f:SI 6 r6 [orig:121 out ] [121])
            (reg:SI 2 r2))) "../falcon-lazy/shake.c":1168:7 7 {*arm_addsi3}
     (nil))
(call_insn 38 41 44 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41]  <function_decl 0x14c1dc200 __builtin_memcpy>) [0 __builtin_memcpy S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "../falcon-lazy/shake.c":1166:3 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_CALL_DECL (symbol_ref:SI ("memcpy") [flags 0x41]  <function_decl 0x14c1dc200 __builtin_memcpy>)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (set (reg:SI 0 r0)
                (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 0 r0))
                (expr_list:SI (use (reg:SI 1 r1))
                    (expr_list:SI (use (reg:SI 2 r2))
                        (nil)))))))
(jump_insn:TI 44 38 42 4 (parallel [
            (set (pc)
                (if_then_else (eq (reg/v:SI 5 r5 [orig:122 len ] [122])
                        (const_int 0 [0]))
                    (label_ref:SI 45)
                    (pc)))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/shake.c":1153:8 1024 {*thumb2_cbz}
     (expr_list:REG_UNUSED (reg:CC 100 cc)
        (int_list:REG_BR_PROB 118111604 (nil)))
 -> 45)
(code_label 42 44 16 5 29 (nil) [1 uses])
(note 16 42 17 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn:TI 17 16 20 5 (set (reg:CC 100 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:117 dptr ] [117])
            (const_int 136 [0x88]))) "../falcon-lazy/shake.c":1156:6 268 {*arm_cmpsi_insn}
     (nil))
(insn 20 17 21 5 (set (reg/f:SI 1 r1 [orig:116 _21 ] [116])
        (plus:SI (reg/v/f:SI 7 r7 [orig:120 sc ] [120])
            (reg/v:SI 4 r4 [orig:117 dptr ] [117]))) "../falcon-lazy/shake.c":1166:3 7 {*arm_addsi3}
     (nil))
(insn:TI 21 20 18 5 (set (reg:SI 2 r2 [orig:119 _35 ] [119])
        (minus:SI (const_int 136 [0x88])
            (reg/v:SI 4 r4 [orig:117 dptr ] [117]))) "../falcon-lazy/shake.c":1160:8 45 {*arm_subsi3_insn}
     (nil))
(jump_insn:TI 18 21 25 5 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 28)
            (pc))) "../falcon-lazy/shake.c":1156:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (int_list:REG_BR_PROB 856416484 (nil)))
 -> 28)
(note 25 18 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 26 25 27 6 (set (reg:SI 0 r0)
        (reg/v/f:SI 7 r7 [orig:120 sc ] [120])) "../falcon-lazy/shake.c":1157:4 728 {*thumb2_movsi_vfp}
     (nil))
(call_insn:TI 27 26 6 6 (parallel [
            (call (mem:SI (symbol_ref:SI ("process_block") [flags 0x3]  <function_decl 0x14c4f9200 process_block>) [0 process_block S4 A32])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "../falcon-lazy/shake.c":1157:4 290 {*call_symbol}
     (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_CALL_DECL (symbol_ref:SI ("process_block") [flags 0x3]  <function_decl 0x14c4f9200 process_block>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 6 27 7 6 (set (reg:SI 2 r2 [orig:119 _35 ] [119])
        (reg/v:SI 4 r4 [orig:117 dptr ] [117])) "../falcon-lazy/shake.c":1157:4 728 {*thumb2_movsi_vfp}
     (expr_list:REG_DEAD (reg/v:SI 4 r4 [orig:117 dptr ] [117])
        (expr_list:REG_EQUAL (const_int 136 [0x88])
            (nil))))
(insn:TI 7 6 8 6 (set (reg/f:SI 1 r1 [orig:116 _21 ] [116])
        (reg/v/f:SI 7 r7 [orig:120 sc ] [120])) "../falcon-lazy/shake.c":1157:4 728 {*thumb2_movsi_vfp}
     (nil))
(insn 8 7 88 6 (parallel [
            (set (reg/v:SI 4 r4 [orig:117 dptr ] [117])
                (const_int 0 [0]))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/shake.c":1158:9 1016 {*thumb2_movsi_shortim}
     (nil))
(jump_insn:TI 88 8 89 6 (set (pc)
        (label_ref 28)) 284 {*arm_jump}
     (nil)
 -> 28)
(barrier 89 88 45)
(code_label 45 89 46 7 26 (nil) [2 uses])
(note 46 45 47 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn:TI 47 46 85 7 (parallel [
            (set (reg:SI 3 r3 [128])
                (const_int 0 [0]))
            (clobber (reg:CC 100 cc))
        ]) "../falcon-lazy/shake.c":1176:11 1016 {*thumb2_movsi_shortim}
     (expr_list:REG_EQUIV (const_int 0 [0])
        (nil)))
(insn:TI 85 47 90 7 (parallel [
            (set (mem:SI (plus:SI (reg/v/f:SI 7 r7 [orig:120 sc ] [120])
                        (const_int 200 [0xc8])) [1 sc_13(D)->dptr+0 S4 A64])
                (reg/v:SI 4 r4 [orig:117 dptr ] [117]))
            (set (mem:SI (plus:SI (reg/v/f:SI 7 r7 [orig:120 sc ] [120])
                        (const_int 204 [0xcc])) [1 sc_13(D)->dptr+4 S4 A32])
                (reg:SI 3 r3 [128]))
        ]) "../falcon-lazy/shake.c":1176:11 412 {*thumb2_strd}
     (expr_list:REG_DEAD (reg/v/f:SI 7 r7 [orig:120 sc ] [120])
        (expr_list:REG_DEAD (reg/v:SI 4 r4 [orig:117 dptr ] [117])
            (expr_list:REG_DEAD (reg:SI 3 r3 [128])
                (nil)))))
(note 90 85 78 7 NOTE_INSN_EPILOGUE_BEG)
(jump_insn:TI 78 90 84 7 (parallel [
            (return)
            (set/f (reg/f:SI 13 sp)
                (plus:SI (reg/f:SI 13 sp)
                    (const_int 24 [0x18])))
            (set/f (reg:SI 3 r3)
                (mem/c:SI (reg/f:SI 13 sp) [6  S4 A32]))
            (set/f (reg:SI 4 r4)
                (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                        (const_int 4 [0x4])) [6  S4 A32]))
            (set/f (reg:SI 5 r5)
                (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                        (const_int 8 [0x8])) [6  S4 A32]))
            (set/f (reg:SI 6 r6)
                (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                        (const_int 12 [0xc])) [6  S4 A32]))
            (set/f (reg:SI 7 r7)
                (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                        (const_int 16 [0x10])) [6  S4 A32]))
            (set/f (reg:SI 15 pc)
                (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                        (const_int 20 [0x14])) [6  S4 A32]))
        ]) "../falcon-lazy/shake.c":1177:1 381 {*pop_multiple_with_writeback_and_return}
     (expr_list:REG_UNUSED (reg:SI 15 pc)
        (expr_list:REG_UNUSED (reg:SI 3 r3)
            (expr_list:REG_CFA_RESTORE (reg:SI 7 r7)
                (expr_list:REG_CFA_RESTORE (reg:SI 6 r6)
                    (expr_list:REG_CFA_RESTORE (reg:SI 5 r5)
                        (expr_list:REG_CFA_RESTORE (reg:SI 4 r4)
                            (expr_list:REG_CFA_RESTORE (reg:SI 3 r3)
                                (nil))))))))
 -> return)
(barrier 84 78 71)
(note 71 84 72 NOTE_INSN_DELETED)
(note 72 71 0 NOTE_INSN_DELETED)
