
;; Function set_fpu_cw (null)
;; enabled by -tree-original


{
  return x;
}


;; Function fpr_ursh (null)
;; enabled by -tree-original


{
  x = (long long unsigned int) (x >> 32 ^ x) & -(long long unsigned int) (n >> 5) ^ (long long unsigned int) x;
  return x >> (n & 31);
}


;; Function fpr_irsh (null)
;; enabled by -tree-original


{
  x = (long long int) (x >> 32 ^ x) & -(long long int) (n >> 5) ^ (long long int) x;
  return x >> (n & 31);
}


;; Function fpr_ulsh (null)
;; enabled by -tree-original


{
  x = (long long unsigned int) (x << 32 ^ x) & -(long long unsigned int) (n >> 5) ^ (long long unsigned int) x;
  return x << (n & 31);
}


;; Function FPR (null)
;; enabled by -tree-original


{
  fpr x;
  uint32_t t;
  unsigned int f;

    fpr x;
    uint32_t t;
    unsigned int f;
  e = e + 1076;
  t = (long unsigned int) e >> 31;
  m = (long long unsigned int) t + 18446744073709551615 & (long long unsigned int) m;
  t = (long unsigned int) (m >> 54);
  e = -(int) t & e;
  x = ((long long unsigned int) s << 63 | (long long unsigned int) (m >> 2)) + ((long long unsigned int) (long unsigned int) e << 52);
  f = (unsigned int) m & 7;
  x = ((fpr) (200 >> f) & 1) + x;
  return x;
}


;; Function fpr_of (null)
;; enabled by -tree-original


{
  return falcon_inner_fpr_scaled (i, 0);
}


;; Function fpr_rint (null)
;; enabled by -tree-original


{
  uint64_t m;
  uint64_t d;
  int e;
  uint32_t s;
  uint32_t dd;
  uint32_t f;

    uint64_t m;
    uint64_t d;
    int e;
    uint32_t s;
    uint32_t dd;
    uint32_t f;
  m = (long long unsigned int) (x << 10) & 4611686018427387903 | 4611686018427387904;
  e = 1085 - ((int) (x >> 52) & 2047);
  m = -(long long unsigned int) ((long unsigned int) (e + -64) >> 31) & (long long unsigned int) m;
  e = e & 63;
  d = fpr_ulsh (m, 63 - e);
  dd = (long unsigned int) d | (long unsigned int) (d >> 32) & 536870911;
  f = (long unsigned int) (d >> 61) | (long unsigned int) ((-dd | dd) >> 31);
  m = (long long unsigned int) fpr_ursh (m, e) + ((long long unsigned int) (200 >> f) & 1);
  s = (long unsigned int) (x >> 63);
  return (int64_t) ((-(long long int) s ^ (long long int) m) + (long long int) s);
}


;; Function fpr_floor (null)
;; enabled by -tree-original


{
  uint64_t t;
  int64_t xi;
  int e;
  int cc;

    uint64_t t;
    int64_t xi;
    int e;
    int cc;
  e = (int) (x >> 52) & 2047;
  t = x >> 63;
  xi = (long long int) ((long long unsigned int) (x << 10) | 4611686018427387904) & 9223372036854775807;
  xi = (-(long long int) t ^ (long long int) xi) + (long long int) t;
  cc = 1085 - e;
  xi = fpr_irsh (xi, cc & 63);
  xi = (-(long long int) t ^ (long long int) xi) & -(long long int) ((long unsigned int) (63 - cc) >> 31) ^ (long long int) xi;
  return xi;
}


;; Function fpr_trunc (null)
;; enabled by -tree-original


{
  uint64_t t;
  uint64_t xu;
  int e;
  int cc;

    uint64_t t;
    uint64_t xu;
    int e;
    int cc;
  e = (int) (x >> 52) & 2047;
  xu = (long long unsigned int) (x << 10) & 4611686018427387903 | 4611686018427387904;
  cc = 1085 - e;
  xu = fpr_ursh (xu, cc & 63);
  xu = -(long long unsigned int) ((long unsigned int) (cc + -64) >> 31) & (long long unsigned int) xu;
  t = x >> 63;
  xu = (-t ^ xu) + t;
  return *(int64_t *) &xu;
}


;; Function fpr_sub (null)
;; enabled by -tree-original


{
  y = (long long unsigned int) y ^ 9223372036854775808;
  return falcon_inner_fpr_add (x, y);
}


;; Function fpr_neg (null)
;; enabled by -tree-original


{
  x = (long long unsigned int) x ^ 9223372036854775808;
  return x;
}


;; Function fpr_half (null)
;; enabled by -tree-original


{
  uint32_t t;

    uint32_t t;
  x = (long long unsigned int) x + 18442240474082181120;
  t = ((long unsigned int) (x >> 52) & 2047) + 1 >> 11;
  x = (long long unsigned int) t + 18446744073709551615 & (long long unsigned int) x;
  return x;
}


;; Function fpr_double (null)
;; enabled by -tree-original


{
  x = ((long long unsigned int) (((unsigned int) (x >> 52) & 2047) + 2047 >> 11) << 52) + (long long unsigned int) x;
  return x;
}


;; Function fpr_sqr (null)
;; enabled by -tree-original


{
  return falcon_inner_fpr_mul (x, x);
}


;; Function fpr_inv (null)
;; enabled by -tree-original


{
  return falcon_inner_fpr_div (4607182418800017408, x);
}


;; Function fpr_lt (null)
;; enabled by -tree-original


{
  int cc0;
  int cc1;

    int cc0;
    int cc1;
  cc0 = *(int64_t *) &x < *(int64_t *) &y;
  cc1 = *(int64_t *) &x > *(int64_t *) &y;
  return (cc0 ^ cc1) & (int) ((x & y) >> 63) ^ cc0;
}


;; Function prng_get_u64 (null)
;; enabled by -tree-original


{
  size_t u;

    size_t u;
  u = p->ptr;
  if (u > 502)
    {
      falcon_inner_prng_refill (p);
      u = 0;
    }
  p->ptr = u + 8;
  return (uint64_t) ((((((((long long unsigned int) p->buf.d[u] | (long long unsigned int) p->buf.d[u + 1] << 8) | (long long unsigned int) p->buf.d[u + 2] << 16) | (long long unsigned int) p->buf.d[u + 3] << 24) | (long long unsigned int) p->buf.d[u + 4] << 32) | (long long unsigned int) p->buf.d[u + 5] << 40) | (long long unsigned int) p->buf.d[u + 6] << 48) | (long long unsigned int) p->buf.d[u + 7] << 56);
}


;; Function prng_get_u8 (null)
;; enabled by -tree-original


{
  unsigned int v;

    unsigned int v;
  v = (unsigned int) p->buf.d[p->ptr++ ];
  if (p->ptr == 512)
    {
      falcon_inner_prng_refill (p);
    }
  return v;
}


;; Function falcon_inner_fpr_scaled (null)
;; enabled by -tree-original


{
  __asm__ __volatile__("push\t{ r4, r5, r6, lr }\n\t\n\t@ Input i is in r0:r1, and sc in r2.\n\t@ Extract the sign bit, and compute the absolute value.\n\t@ -> sign bit in r3, with value 0 or -1\n\tasrs\tr3, r1, #31\n\teors\tr0, r3\n\teors\tr1, r3\n\tsubs\tr0, r3\n\tsbcs\tr1, r3\n\t\n\t@ Scale exponent to account for the encoding; if the source is\n\t@ zero or if the scaled exponent is negative, it is set to 32.\n\taddw\tr2, r2, #1022\n\torrs\tr4, r0, r1\n\tbics\tr4, r4, r2, asr #31\n\trsbs\tr5, r4, #0\n\torrs\tr4, r5\n\tands\tr2, r2, r4, asr #31\n\tadds\tr2, #32\n\t\n\t@ Normalize value to a full 64-bit width, by shifting it left.\n\t@ The shift count is subtracted from the exponent (in r2).\n\t@ If the mantissa is 0, the exponent is set to 0.\n\t\n\t@ If top word is 0, replace with low word; otherwise, add 32 to\n\t@ the exponent.\n\trsbs\tr4, r1, #0\n\torrs\tr4, r1\n\teors\tr5, r0, r1\n\tbics\tr5, r5, r4, asr #31\n\teors\tr1, r5\n\tands\tr0, r0, r4, asr #31\n\tlsrs\tr4, r4, #31\n\tadds\tr2, r2, r4, lsl #5\n\t\n\t@ Count leading zeros of r1 to finish the shift.\n\tclz\tr4, r1\n\tsubs\tr2, r4\n\trsbs\tr5, r4, #32\n\tlsls\tr1, r4\n\tlsrs\tr5, r0, r5\n\tlsls\tr0, r4\n\torrs\tr1, r5\n\t\n\t@ Clear the top bit; we know it\'s a 1 (unless the whole mantissa\n\t@ was zero, but then it\'s still OK to clear it)\n\tbfc\tr1, #31, #1\n\t\n\t@ Now shift right the value by 11 bits; this puts the value in\n\t@ the 2^52..2^53-1 range. We also keep a copy of the pre-shift\n\t@ low bits in r5.\n\tmovs\tr5, r0\n\tlsrs\tr0, #11\n\torrs\tr0, r0, r1, lsl #21\n\tlsrs\tr1, #11\n\t\n\t@ Also plug the exponent at the right place. This must be done\n\t@ now so that, in case the rounding creates a carry, that carry\n\t@ adds to the exponent, which would be exactly what we want at\n\t@ that point.\n\torrs\tr1, r1, r2, lsl #20\n\t\n\t@ Rounding: we must add 1 to the mantissa in the following cases:\n\t@  - bits 11 to 9 of r5 are \'011\', \'110\' or \'111\'\n\t@  - bits 11 to 9 of r5 are \'010\' and one of the\n\t@    bits 0 to 8 is non-zero\n\tubfx\tr6, r5, #0, #9\n\taddw\tr6, r6, #511\n\torrs\tr5, r6\n\t\n\tubfx\tr5, r5, #9, #3\n\tmovs\tr6, #0xC8\n\tlsrs\tr6, r5\n\tands\tr6, #1\n\tadds\tr0, r6\n\tadcs\tr1, #0\n\t\n\t@ Put back the sign.\n\torrs\tr1, r1, r3, lsl #31\n\t\n\tpop\t{ r4, r5, r6, pc}\n\t"::);
}


;; Function falcon_inner_fpr_add (null)
;; enabled by -tree-original


{
  __asm__ __volatile__("push\t{ r4, r5, r6, r7, r8, r10, r11, lr }\n\t\n\t@ Make sure that the first operand (x) has the larger absolute\n\t@ value. This guarantees that the exponent of y is less than\n\t@ or equal to the exponent of x, and, if they are equal, then\n\t@ the mantissa of y will not be greater than the mantissa of x.\n\t@ However, if absolute values are equal and the sign of x is 1,\n\t@ then we want to also swap the values.\n\tubfx\tr4, r1, #0, #31  @ top word without sign bit\n\tubfx\tr5, r3, #0, #31  @ top word without sign bit\n\tsubs\tr7, r0, r2       @ difference in r7:r4\n\tsbcs\tr4, r5\n\torrs\tr7, r4\n\trsbs\tr5, r7, #0\n\torrs\tr7, r5      @ bit 31 of r7 is 0 iff difference is zero\n\tbics\tr6, r1, r7\n\torrs\tr6, r4      @ bit 31 of r6 is 1 iff the swap must be done\n\t\n\t@ Conditional swap\n\teors\tr4, r0, r2\n\teors\tr5, r1, r3\n\tands\tr4, r4, r6, asr #31\n\tands\tr5, r5, r6, asr #31\n\teors\tr0, r4\n\teors\tr1, r5\n\teors\tr2, r4\n\teors\tr3, r5\n\t\n\t@ Extract mantissa of x into r0:r1, exponent in r4, sign in r5\n\tubfx\tr4, r1, #20, #11   @ Exponent in r4 (without sign)\n\taddw\tr5, r4, #2047 @ Get a carry to test r4 for zero\n\tlsrs\tr5, #11       @ r5 is the mantissa implicit high bit\n\tbfc\tr1, #20, #11  @ Clear exponent bits (not the sign)\n\torrs\tr1, r1, r5, lsl #20  @ Set mantissa high bit\n\tasrs\tr5, r1, #31   @ Get sign bit (sign-extended)\n\tbfc\tr1, #31, #1   @ Clear the sign bit\n\t\n\t@ Extract mantissa of y into r2:r3, exponent in r6, sign in r7\n\tubfx\tr6, r3, #20, #11   @ Exponent in r6 (without sign)\n\taddw\tr7, r6, #2047 @ Get a carry to test r6 for zero\n\tlsrs\tr7, #11       @ r7 is the mantissa implicit high bit\n\tbfc\tr3, #20, #11  @ Clear exponent bits (not the sign)\n\torrs\tr3, r3, r7, lsl #20  @ Set mantissa high bit\n\tasrs\tr7, r3, #31   @ Get sign bit (sign-extended)\n\tbfc\tr3, #31, #1   @ Clear the sign bit\n\t\n\t@ Scale mantissas up by three bits.\n\tlsls\tr1, #3\n\torrs\tr1, r1, r0, lsr #29\n\tlsls\tr0, #3\n\tlsls\tr3, #3\n\torrs\tr3, r3, r2, lsr #29\n\tlsls\tr2, #3\n\t\n\t@ x: exponent=r4, sign=r5, mantissa=r0:r1 (scaled up 3 bits)\n\t@ y: exponent=r6, sign=r7, mantissa=r2:r3 (scaled up 3 bits)\n\t\n\t@ At that point, the exponent of x (in r4) is larger than that\n\t@ of y (in r6). The difference is the amount of shifting that\n\t@ should be done on y. If that amount is larger than 59 then\n\t@ we clamp y to 0. We won\'t need y\'s exponent beyond that point,\n\t@ so we store that shift count in r6.\n\tsubs\tr6, r4, r6\n\tsubs\tr8, r6, #60\n\tands\tr2, r2, r8, asr #31\n\tands\tr3, r3, r8, asr #31\n\t\n\t@ Shift right r2:r3 by r6 bits. The shift count is in the 0..59\n\t@ range. r11 will be non-zero if and only if some non-zero bits\n\t@ were dropped.\n\tsubs\tr8, r6, #32\n\tbics\tr11, r2, r8, asr #31\n\tands\tr2, r2, r8, asr #31\n\tbics\tr10, r3, r8, asr #31\n\torrs\tr2, r2, r10\n\tands\tr3, r3, r8, asr #31\n\tands\tr6, r6, #31\n\trsbs\tr8, r6, #32\n\tlsls\tr10, r2, r8\n\torrs\tr11, r11, r10\n\tlsrs\tr2, r2, r6\n\tlsls\tr10, r3, r8\n\torrs\tr2, r2, r10\n\tlsrs\tr3, r3, r6\n\t\n\t@ If r11 is non-zero then some non-zero bit was dropped and the\n\t@ low bit of r2 must be forced to 1 (\'sticky bit\').\n\trsbs\tr6, r11, #0\n\torrs\tr6, r6, r11\n\torrs\tr2, r2, r6, lsr #31\n\t\n\t@ x: exponent=r4, sign=r5, mantissa=r0:r1 (scaled up 3 bits)\n\t@ y: sign=r7, value=r2:r3 (scaled to same exponent as x)\n\t\n\t@ If x and y don\'t have the same sign, then we should negate r2:r3\n\t@ (i.e. subtract the mantissa instead of adding it). Signs of x\n\t@ and y are in r5 and r7, as full-width words. We won\'t need r7\n\t@ afterwards.\n\teors\tr7, r5    @ r7 = -1 if y must be negated, 0 otherwise\n\teors\tr2, r7\n\teors\tr3, r7\n\tsubs\tr2, r7\n\tsbcs\tr3, r7\n\t\n\t@ r2:r3 has been shifted, we can add to r0:r1.\n\tadds\tr0, r2\n\tadcs\tr1, r3\n\t\n\t@ result: exponent=r4, sign=r5, mantissa=r0:r1 (scaled up 3 bits)\n\t\n\t@ Normalize the result with some left-shifting to full 64-bit\n\t@ width. Shift count goes to r2, and exponent (r4) is adjusted.\n\tclz\tr2, r0\n\tclz\tr3, r1\n\tsbfx\tr6, r3, #5, #1\n\tands\tr2, r6\n\tadds\tr2, r2, r3\n\tsubs\tr4, r4, r2\n\t\n\t@ Shift r0:r1 to the left by r2 bits.\n\tsubs\tr7, r2, #32\n\tlsls\tr7, r0, r7\n\tlsls\tr1, r1, r2\n\trsbs\tr6, r2, #32\n\torrs\tr1, r1, r7\n\tlsrs\tr6, r0, r6\n\torrs\tr1, r1, r6\n\tlsls\tr0, r0, r2\n\t\n\t@ The exponent of x was in r4. The left-shift operation has\n\t@ subtracted some value from it, 8 in case the result has the\n\t@ same exponent as x. However, the high bit of the mantissa will\n\t@ add 1 to the exponent, so we only add back 7 (the exponent is\n\t@ added in because rounding might have produced a carry, which\n\t@ should then spill into the exponent).\n\tadds\tr4, #7\n\t\n\t@ If the mantissa new mantissa is non-zero, then its bit 63 is\n\t@ non-zero (thanks to the normalizing shift). Otherwise, that bit\n\t@ is zero, and we should then set the exponent to zero as well.\n\tands\tr4, r4, r1, asr #31\n\t\n\t@ Shrink back the value to a 52-bit mantissa. This requires\n\t@ right-shifting by 11 bits; we keep a copy of the pre-shift\n\t@ low word in r3.\n\tmovs\tr3, r0\n\tlsrs\tr0, #11\n\torrs\tr0, r0, r1, lsl #21\n\tlsrs\tr1, #11\n\t\n\t@ Apply rounding.\n\tubfx\tr6, r3, #0, #9\n\taddw\tr6, r6, #511\n\torrs\tr3, r6\n\tubfx\tr3, r3, #9, #3\n\tmovs\tr6, #0xC8\n\tlsrs\tr6, r3\n\tands\tr6, #1\n\tadds\tr0, r6\n\tadcs\tr1, #0\n\t\n\t@Plug in the exponent with an addition.\n\tadds\tr1, r1, r4, lsl #20\n\t\n\t@ If the new exponent is negative or zero, then it underflowed\n\t@ and we must clear the whole mantissa and exponent.\n\trsbs\tr4, r4, #0\n\tands\tr0, r0, r4, asr #31\n\tands\tr1, r1, r4, asr #31\n\t\n\t@ Put back the sign. This is the sign of x: thanks to the\n\t@ conditional swap at the start, this is always correct.\n\tbfi\tr1, r5, #31, #1\n\t\n\tpop\t{ r4, r5, r6, r7, r8, r10, r11, pc }\n\t"::);
}


;; Function falcon_inner_fpr_mul (null)
;; enabled by -tree-original


{
  __asm__ __volatile__("push\t{ r4, r5, r6, r7, r8, r10, r11, lr }\n\t\n\t@ Extract mantissas: x.m = r4:r5, y.m = r6:r7\n\t@ r4 and r6 contain only 25 bits each.\n\tbics\tr4, r0, #0xFE000000\n\tlsls\tr5, r1, #7\n\torrs\tr5, r5, r0, lsr #25\n\torrs\tr5, r5, #0x08000000\n\tbics\tr5, r5, #0xF0000000\n\tbics\tr6, r2, #0xFE000000\n\tlsls\tr7, r3, #7\n\torrs\tr7, r7, r2, lsr #25\n\torrs\tr7, r7, #0x08000000\n\tbics\tr7, r7, #0xF0000000\n\t\n\t@ Perform product. Values are in the 2^52..2^53-1 range, so\n\t@ the product is at most 106-bit long. Of the low 50 bits,\n\t@ we only want to know if they are all zeros or not. Here,\n\t@ we get the top 56 bits in r10:r11, and r8 will be non-zero\n\t@ if and only if at least one of the low 50 bits is non-zero.\n\tumull\tr8, r10, r4, r6      @ x0*y0\n\tlsls\tr10, #7\n\torrs\tr10, r10, r8, lsr #25\n\teors\tr11, r11\n\tumlal\tr10, r11, r4, r7     @ x0*y1\n\tumlal\tr10, r11, r5, r6     @ x1*y0\n\torrs\tr8, r8, r10, lsl #7\n\tlsrs\tr10, #25\n\torrs\tr10, r10, r11, lsl #7\n\teors\tr11, r11\n\tumlal\tr10, r11, r5, r7     @ x1*y1\n\t\n\t@ Now r0, r2, r4, r5, r6 and r7 are free.\n\t@ If any of the low 50 bits was non-zero, then we force the\n\t@ low bit of r10 to 1.\n\trsbs\tr4, r8, #0\n\torrs\tr8, r8, r4\n\torrs\tr10, r10, r8, lsr #31\n\t\n\t@ r8 is free.\n\t@ r10:r11 contains the product in the 2^54..2^56-1 range. We\n\t@ normalize it to 2^54..2^55-1 (into r6:r7) with a conditional\n\t@ shift (low bit is sticky). r5 contains -1 if the shift was done,\n\t@ 0 otherwise.\n\tands\tr6, r10, #1\n\tlsrs\tr5, r11, #23\n\trsbs\tr5, r5, #0\n\torrs\tr6, r6, r10, lsr #1\n\torrs\tr6, r6, r11, lsl #31\n\tlsrs\tr7, r11, #1\n\teors\tr10, r10, r6\n\teors\tr11, r11, r7\n\tbics\tr10, r10, r5\n\tbics\tr11, r11, r5\n\teors\tr6, r6, r10\n\teors\tr7, r7, r11\n\t\n\t@ Compute aggregate exponent: ex + ey - 1023 + w\n\t@ (where w = 1 if the conditional shift was done, 0 otherwise)\n\t@ But we subtract 1 because the injection of the mantissa high\n\t@ bit will increment the exponent by 1.\n\tlsls\tr0, r1, #1\n\tlsls\tr2, r3, #1\n\tlsrs\tr0, #21\n\taddw\tr4, r0, #0x7FF   @ save ex + 2047 in r4\n\tlsrs\tr2, #21\n\taddw\tr8, r2, #0x7FF   @ save ey + 2047 in r8\n\tadds\tr2, r0\n\tsubw\tr2, r2, #1024\n\tsubs\tr2, r5\n\t\n\t@ r5 is free.\n\t@ Also, if either of the source exponents is 0, or the result\n\t@ exponent is 0 or negative, then the result is zero and the\n\t@ mantissa and the exponent shall be clamped to zero. Since\n\t@ r2 contains the result exponent minus 1, we test on r2\n\t@ being strictly negative.\n\tands\tr4, r8    @ if bit 11 = 0 then one of the exponents was 0\n\tmvns\tr5, r2\n\tands\tr5, r5, r4, lsl #20\n\tands\tr2, r2, r5, asr #31\n\tands\tr6, r6, r5, asr #31\n\tands\tr7, r7, r5, asr #31\n\t\n\t@ Sign is the XOR of the sign of the operands. This is true in\n\t@ all cases, including very small results (exponent underflow)\n\t@ and zeros.\n\teors\tr1, r3\n\tbfc\tr1, #0, #31\n\t\n\t@ Plug in the exponent.\n\tbfi\tr1, r2, #20, #11\n\t\n\t@ r2 and r3 are free.\n\t@ Shift back to the normal 53-bit mantissa, with rounding.\n\t@ Mantissa goes into r0:r1. For r1, we must use an addition\n\t@ because the rounding may have triggered a carry, that should\n\t@ be added to the exponent.\n\tmovs\tr4, r6\n\tlsrs\tr0, r6, #2\n\torrs\tr0, r0, r7, lsl #30\n\tadds\tr1, r1, r7, lsr #2\n\tands\tr4, #0x7\n\tmovs\tr3, #0xC8\n\tlsrs\tr3, r4\n\tands\tr3, #1\n\tadds\tr0, r3\n\tadcs\tr1, #0\n\t\n\tpop\t{ r4, r5, r6, r7, r8, r10, r11, pc }\n\t"::);
}


;; Function falcon_inner_fpr_div (null)
;; enabled by -tree-original


{
  __asm__ __volatile__("push\t{ r4, r5, r6, r7, r8, r10, r11, lr }\n\t@ Extract mantissas of x and y, in r0:r4 and r2:r5, respectively.\n\t@ We don\'t touch r1 and r3 as they contain the exponents and\n\t@ signs, which we\'ll need later on.\n\tubfx\tr4, r1, #0, #20\n\tubfx\tr5, r3, #0, #20\n\torrs\tr4, r4, #0x00100000\n\torrs\tr5, r5, #0x00100000\n\t\n\t@ Perform bit-by-bit division. We want a 56-bit result in r8:r10\n\t@ (low bit is 0). Bits come from the carry flag and are\n\t@ injected with rrx, i.e. in position 31; we thus get bits in\n\t@ the reverse order. Bits accumulate in r8; after the first 24\n\t@ bits, we move the quotient bits to r10.\n\teors\tr8, r8\n\t\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\t\n\t@ We have the first 24 bits of the quotient, move them to r10.\n\trbit\tr10, r8\n\t\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\tsubs\tr6, r0, r2\n\tsbcs\tr7, r4, r5\n\trrx\tr8, r8\n\tands\tr6, r2, r8, asr #31\n\tands\tr7, r5, r8, asr #31\n\tsubs\tr0, r6\n\tsbcs\tr4, r7\n\tadds\tr0, r0, r0\n\tadcs\tr4, r4, r4\n\t\n\t@ Lowest bit will be set if remainder is non-zero at this point\n\t@ (this is the \'sticky\' bit).\n\tsubs\tr0, #1\n\tsbcs\tr4, #0\n\trrx\tr8, r8\n\t\n\t@ We now have the next (low) 32 bits of the quotient.\n\trbit\tr8, r8\n\t\n\t@ Since both operands had their top bit set, we know that the\n\t@ result at this point is in 2^54..2^56-1. We scale it down\n\t@ to 2^54..2^55-1 with a conditional shift. We also write the\n\t@ result in r4:r5. If the shift is done, r6 will contain -1.\n\tands\tr4, r8, #1\n\tlsrs\tr6, r10, #23\n\trsbs\tr6, r6, #0\n\torrs\tr4, r4, r8, lsr #1\n\torrs\tr4, r4, r10, lsl #31\n\tlsrs\tr5, r10, #1\n\teors\tr8, r8, r4\n\teors\tr10, r10, r5\n\tbics\tr8, r8, r6\n\tbics\tr10, r10, r6\n\teors\tr4, r4, r8\n\teors\tr5, r5, r10\n\t\n\t@ Compute aggregate exponent: ex - ey + 1022 + w\n\t@ (where w = 1 if the conditional shift was done, 0 otherwise)\n\t@ But we subtract 1 because the injection of the mantissa high\n\t@ bit will increment the exponent by 1.\n\tlsls\tr0, r1, #1\n\tlsls\tr2, r3, #1\n\tlsrs\tr0, r0, #21\n\taddw\tr7, r0, #0x7FF  @ save ex + 2047 in r7\n\tsubs\tr0, r0, r2, lsr #21\n\taddw\tr0, r0, #1021\n\tsubs\tr0, r6\n\t\n\t@ If the x operand was zero, then the computation was wrong and\n\t@ the result is zero. Also, if the result exponent is zero or\n\t@ negative, then the mantissa shall be clamped to zero. Since r0\n\t@ contains the result exponent minus 1, we test on r0 being\n\t@ strictly negative.\n\tmvns\tr2, r0\n\tands\tr2, r2, r7, lsl #20\n\tands\tr0, r0, r2, asr #31\n\tands\tr4, r4, r2, asr #31\n\tands\tr5, r5, r2, asr #31\n\t\n\t@ Sign is the XOR of the sign of the operands. This is true in\n\t@ all cases, including very small results (exponent underflow)\n\t@ and zeros.\n\teors\tr1, r3\n\tbfc\tr1, #0, #31\n\t\n\t@ Plug in the exponent.\n\tbfi\tr1, r0, #20, #11\n\t\n\t@ Shift back to the normal 53-bit mantissa, with rounding.\n\t@ Mantissa goes into r0:r1. For r1, we must use an addition\n\t@ because the rounding may have triggered a carry, that should\n\t@ be added to the exponent.\n\tmovs\tr6, r4\n\tlsrs\tr0, r4, #2\n\torrs\tr0, r0, r5, lsl #30\n\tadds\tr1, r1, r5, lsr #2\n\tands\tr6, #0x7\n\tmovs\tr3, #0xC8\n\tlsrs\tr3, r6\n\tands\tr3, #1\n\tadds\tr0, r3\n\tadcs\tr1, #0\n\t\n\tpop\t{ r4, r5, r6, r7, r8, r10, r11, pc }\n\t"::);
}


;; Function falcon_inner_fpr_sqrt (null)
;; enabled by -tree-original


{
  __asm__ __volatile__("push\t{ r4, r5, r6, r7, r8, r10, r11, lr }\n\t\n\t@ Extract mantissa (r0:r1) and exponent (r2). We assume that the\n\t@ sign is positive. If the source is zero, then the mantissa is\n\t@ set to 0.\n\tlsrs\tr2, r1, #20\n\tbfc\tr1, #20, #12\n\taddw\tr3, r2, #0x7FF\n\tsubw\tr2, r2, #1023\n\tlsrs\tr3, r3, #11\n\torrs\tr1, r1, r3, lsl #20\n\t\n\t@ If the exponent is odd, then multiply mantissa by 2 and subtract\n\t@ 1 from the exponent.\n\tands\tr3, r2, #1\n\tsubs\tr2, r2, r3\n\trsbs\tr3, r3, #0\n\tands\tr4, r1, r3\n\tands\tr3, r0\n\tadds\tr0, r3\n\tadcs\tr1, r4\n\t\n\t@ Left-shift the mantissa by 9 bits to put it in the\n\t@ 2^61..2^63-1 range (unless it is exactly 0).\n\tlsls\tr1, r1, #9\n\torrs\tr1, r1, r0, lsr #23\n\tlsls\tr0, r0, #9\n\t\n\t@ Compute the square root bit-by-bit.\n\t@ There are 54 iterations; first 30 can work on top word only.\n\t@   q = r3 (bit-reversed)\n\t@   s = r5\n\teors\tr3, r3\n\teors\tr5, r5\n\torrs\tr6, r5, #(1 << ((25)+4))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((25)+4) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << ((25)+3))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((25)+3) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << ((25)+2))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((25)+2) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << ((25)+1))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((25)+1) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << (25))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #((25) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << ((20)+4))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((20)+4) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << ((20)+3))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((20)+3) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << ((20)+2))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((20)+2) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << ((20)+1))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((20)+1) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << (20))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #((20) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << ((15)+4))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((15)+4) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << ((15)+3))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((15)+3) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << ((15)+2))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((15)+2) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << ((15)+1))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((15)+1) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << (15))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #((15) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << ((10)+4))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((10)+4) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << ((10)+3))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((10)+3) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << ((10)+2))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((10)+2) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << ((10)+1))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((10)+1) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << (10))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #((10) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << ((5)+4))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((5)+4) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << ((5)+3))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((5)+3) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << ((5)+2))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((5)+2) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << ((5)+1))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((5)+1) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << (5))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #((5) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << ((0)+4))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((0)+4) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << ((0)+3))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((0)+3) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << ((0)+2))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((0)+2) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << ((0)+1))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #(((0)+1) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr6, r5, #(1 << (0))\n\tsubs\tr7, r1, r6\n\trrx\tr3, r3\n\tands\tr6, r6, r3, asr #31\n\tsubs\tr1, r1, r6\n\tlsrs\tr6, r3, #31\n\torrs\tr5, r5, r6, lsl #((0) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\t@ Top 30 bits of the result must be reversed: they were\n\t@ accumulated with rrx (hence from the top bit).\n\trbit\tr3, r3\n\t\n\t@ For the next 24 iterations, we must use two-word operations.\n\t@   bits of q now accumulate in r4\n\t@   s is in r6:r5\n\teors\tr4, r4\n\teors\tr6, r6\n\t\n\t@ First iteration is special because the potential bit goes into\n\t@ r5, not r6.\n\torrs\tr7, r6, #(1 << 31)\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr5, r5, r4, lsr #31\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr7, r6, #(1 << (30))\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr6, r6, r7, lsl #((30) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr7, r6, #(1 << (29))\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr6, r6, r7, lsl #((29) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr7, r6, #(1 << (28))\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr6, r6, r7, lsl #((28) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr7, r6, #(1 << ((24)+3))\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr6, r6, r7, lsl #(((24)+3) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr7, r6, #(1 << ((24)+2))\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr6, r6, r7, lsl #(((24)+2) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr7, r6, #(1 << ((24)+1))\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr6, r6, r7, lsl #(((24)+1) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr7, r6, #(1 << (24))\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr6, r6, r7, lsl #((24) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr7, r6, #(1 << ((20)+3))\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr6, r6, r7, lsl #(((20)+3) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr7, r6, #(1 << ((20)+2))\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr6, r6, r7, lsl #(((20)+2) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr7, r6, #(1 << ((20)+1))\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr6, r6, r7, lsl #(((20)+1) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr7, r6, #(1 << (20))\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr6, r6, r7, lsl #((20) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr7, r6, #(1 << ((16)+3))\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr6, r6, r7, lsl #(((16)+3) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr7, r6, #(1 << ((16)+2))\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr6, r6, r7, lsl #(((16)+2) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr7, r6, #(1 << ((16)+1))\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr6, r6, r7, lsl #(((16)+1) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr7, r6, #(1 << (16))\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr6, r6, r7, lsl #((16) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr7, r6, #(1 << ((12)+3))\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr6, r6, r7, lsl #(((12)+3) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr7, r6, #(1 << ((12)+2))\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr6, r6, r7, lsl #(((12)+2) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr7, r6, #(1 << ((12)+1))\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr6, r6, r7, lsl #(((12)+1) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr7, r6, #(1 << (12))\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr6, r6, r7, lsl #((12) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr7, r6, #(1 << ((8)+3))\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr6, r6, r7, lsl #(((8)+3) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr7, r6, #(1 << ((8)+2))\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr6, r6, r7, lsl #(((8)+2) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr7, r6, #(1 << ((8)+1))\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr6, r6, r7, lsl #(((8)+1) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\torrs\tr7, r6, #(1 << (8))\n\tsubs\tr8, r0, r7\n\tsbcs\tr10, r1, r5\n\trrx\tr4, r4\n\tands\tr7, r7, r4, asr #31\n\tands\tr8, r5, r4, asr #31\n\tsubs\tr0, r0, r7\n\tsbcs\tr1, r1, r8\n\tlsrs\tr7, r4, #31\n\torrs\tr6, r6, r7, lsl #((8) + 1)\n\tadds\tr0, r0\n\tadcs\tr1, r1\n\t@ Put low 24 bits in the right order.\n\trbit\tr4, r4\n\t\n\t@ We have a 54-bit result; compute the 55-th bit as the \'sticky\'\n\t@ bit: it is non-zero if and only if r0:r1 is non-zero. We put the\n\t@ three low bits (including the sticky bit) in r5.\n\torrs\tr0, r1\n\trsbs\tr1, r0, #0\n\torrs\tr0, r1\n\tlsls\tr5, r4, #1\n\torrs\tr5, r5, r0, lsr #31\n\tands\tr5, #0x7\n\t\n\t@ Compute the rounding: r6 is set to 0 or 1, and will be added\n\t@ to the mantissa.\n\tmovs\tr6, #0xC8\n\tlsrs\tr6, r5\n\tands\tr6, #1\n\t\n\t@ Put the mantissa (53 bits, in the 2^52..2^53-1 range) in r0:r1\n\t@ (rounding not applied yet).\n\tlsrs\tr0, r4, #1\n\torrs\tr0, r0, r3, lsl #23\n\tlsrs\tr1, r3, #9\n\t\n\t@ Compute new exponent. This is half the old one (then reencoded\n\t@ by adding 1023). Exception: if the mantissa is zero, then the\n\t@ encoded exponent is set to 0. At that point, if the mantissa\n\t@ is non-zero, then its high bit (bit 52, i.e. bit 20 of r1) is\n\t@ non-zero. Note that the exponent cannot go out of range.\n\tlsrs\tr2, r2, #1\n\taddw\tr2, r2, #1023\n\tlsrs\tr5, r1, #20\n\trsbs\tr5, r5, #0\n\tands\tr2, r5\n\t\n\t@ Place exponent. This overwrites the high bit of the mantissa.\n\tbfi\tr1, r2, #20, #11\n\t\n\t@ Apply rounding. This may create a carry that will spill into\n\t@ the exponent, which is exactly what should be done in that case\n\t@ (i.e. increment the exponent).\n\tadds\tr0, r0, r6\n\tadcs\tr1, r1, #0\n\t\n\tpop\t{ r4, r5, r6, r7, r8, r10, r11, pc }\n\t"::);
}


;; Function falcon_inner_fpr_expm_p63 (null)
;; enabled by -tree-original


{
  static const uint64_t C[13] = {19127174051, 233346759686, 2542029181962, 25415798087749, 228754078003076, 1830034511206115, 12810238987800554, 76861433589428176, 384307168197152512, 1537228672812056320, 4611686018427565056, 9223372036854728704, 9223372036854775808};
  uint64_t z;
  uint64_t y;
  unsigned int u;
  uint32_t z0;
  uint32_t z1;
  uint32_t y0;
  uint32_t y1;
  uint64_t a;
  uint64_t b;

    static const uint64_t C[13] = {19127174051, 233346759686, 2542029181962, 25415798087749, 228754078003076, 1830034511206115, 12810238987800554, 76861433589428176, 384307168197152512, 1537228672812056320, 4611686018427565056, 9223372036854728704, 9223372036854775808};
    uint64_t z;
    uint64_t y;
    unsigned int u;
    uint32_t z0;
    uint32_t z1;
    uint32_t y0;
    uint32_t y1;
    uint64_t a;
    uint64_t b;
  y = C[0];
  z = (long long unsigned int) fpr_trunc (falcon_inner_fpr_mul (x, 4890909195324358656)) << 1;
  u = 1;
  goto <D.6942>;
  <D.6941>:;
  {
    uint64_t c;

        uint64_t c;
    z0 = (long unsigned int) z;
    z1 = (long unsigned int) (z >> 32);
    y0 = (long unsigned int) y;
    y1 = (long unsigned int) (y >> 32);
    a = (long long unsigned int) z0 * (long long unsigned int) y1 + ((long long unsigned int) z0 * (long long unsigned int) y0 >> 32);
    b = (long long unsigned int) z1 * (long long unsigned int) y0;
    c = (a >> 32) + (b >> 32);
    c = ((long long unsigned int) (long unsigned int) a + (long long unsigned int) (long unsigned int) b >> 32) + (long long unsigned int) c;
    c = (long long unsigned int) z1 * (long long unsigned int) y1 + (long long unsigned int) c;
    y = (long long unsigned int) C[u] - (long long unsigned int) c;
  }
  u++ ;
  <D.6942>:;
  if (u <= 12) goto <D.6941>; else goto <D.6943>;
  <D.6943>:;
  z = (long long unsigned int) fpr_trunc (falcon_inner_fpr_mul (ccs, 4890909195324358656)) << 1;
  z0 = (long unsigned int) z;
  z1 = (long unsigned int) (z >> 32);
  y0 = (long unsigned int) y;
  y1 = (long unsigned int) (y >> 32);
  a = (long long unsigned int) z0 * (long long unsigned int) y1 + ((long long unsigned int) z0 * (long long unsigned int) y0 >> 32);
  b = (long long unsigned int) z1 * (long long unsigned int) y0;
  y = (a >> 32) + (b >> 32);
  y = ((long long unsigned int) (long unsigned int) a + (long long unsigned int) (long unsigned int) b >> 32) + (long long unsigned int) y;
  y = (long long unsigned int) z1 * (long long unsigned int) y1 + (long long unsigned int) y;
  return y;
}

